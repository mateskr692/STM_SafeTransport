
BlackPillCPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010eb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035a0  08011048  08011048  00021048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080145e8  080145e8  00030214  2**0
                  CONTENTS
  4 .ARM          00000000  080145e8  080145e8  00030214  2**0
                  CONTENTS
  5 .preinit_array 00000000  080145e8  080145e8  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080145e8  080145e8  000245e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080145ec  080145ec  000245ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  080145f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001060  20000218  08014804  00030218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001278  08014804  00031278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193a4  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003727  00000000  00000000  000495e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a0  00000000  00000000  0004cd10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  0004e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d60e  00000000  00000000  0004f250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012a8c  00000000  00000000  0006c85e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e99e  00000000  00000000  0007f2ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011dc88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005de8  00000000  00000000  0011dd04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801102c 	.word	0x0801102c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	0801102c 	.word	0x0801102c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <ProgramInit>:

volatile ContextData ctx;
volatile extern AHRS _ahrs;

void ProgramInit()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af02      	add	r7, sp, #8
	ctx._DisableSD = 0;
 8000c8e:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <ProgramInit+0xb8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
	ctx.status = Buzzer_Disabled;
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <ProgramInit+0xb8>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	705a      	strb	r2, [r3, #1]
	ctx.mode = Display_Default;
 8000c9c:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <ProgramInit+0xb8>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
	htim2.Instance->CCR1 = 20;		//frequency of the buzzer
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <ProgramInit+0xbc>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2214      	movs	r2, #20
 8000ca8:	635a      	str	r2, [r3, #52]	; 0x34
	ctx.GForce_Buffor_Index = 0; 	//Start Index for the Gforce cyclic buffor
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <ProgramInit+0xb8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c

	//initialize Oled display and flash it white
	st7789_Init();
 8000cb2:	f004 fce9 	bl	8005688 <st7789_Init>
	st7789_FillScreen(WHITE);
 8000cb6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cba:	f004 fdd9 	bl	8005870 <st7789_FillScreen>

	//set up neccesery flag for the MPU
	st7789_DrawString(10, 10, "Initializing Sensors", &Font16, WHITE, RED);
 8000cbe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000cc2:	9301      	str	r3, [sp, #4]
 8000cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <ProgramInit+0xc0>)
 8000ccc:	4a1f      	ldr	r2, [pc, #124]	; (8000d4c <ProgramInit+0xc4>)
 8000cce:	210a      	movs	r1, #10
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f004 fe9d 	bl	8005a10 <st7789_DrawString>
	MPU_Init();
 8000cd6:	f001 fcf1 	bl	80026bc <MPU_Init>
	MPU_begin();
 8000cda:	f001 fd4d 	bl	8002778 <MPU_begin>

	//connect to the SD and choose a file
	st7789_DrawString(10, 30, "Initializing Memory", &Font16, WHITE, BLUE);
 8000cde:	231f      	movs	r3, #31
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <ProgramInit+0xc0>)
 8000cea:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <ProgramInit+0xc8>)
 8000cec:	211e      	movs	r1, #30
 8000cee:	200a      	movs	r0, #10
 8000cf0:	f004 fe8e 	bl	8005a10 <st7789_DrawString>
	_SD_Init();
 8000cf4:	f000 f8a0 	bl	8000e38 <_SD_Init>

	//enable reading from the MPU and calculate the base vectors
	st7789_DrawString(10, 50, "Calibrating Sensors", &Font16, WHITE, GREEN);
 8000cf8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <ProgramInit+0xc0>)
 8000d06:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <ProgramInit+0xcc>)
 8000d08:	2132      	movs	r1, #50	; 0x32
 8000d0a:	200a      	movs	r0, #10
 8000d0c:	f004 fe80 	bl	8005a10 <st7789_DrawString>
	AHRS_Init();
 8000d10:	f002 fc8e 	bl	8003630 <AHRS_Init>
	HAL_TIM_Base_Start_IT(&htim4);	//starts the MPU timer
 8000d14:	4810      	ldr	r0, [pc, #64]	; (8000d58 <ProgramInit+0xd0>)
 8000d16:	f007 fbbd 	bl	8008494 <HAL_TIM_Base_Start_IT>
	_CalibrateInit();
 8000d1a:	f000 f951 	bl	8000fc0 <_CalibrateInit>

	//enable updating the display
	HAL_TIM_Base_Start_IT(&htim3);	//starts the display Update timer
 8000d1e:	480f      	ldr	r0, [pc, #60]	; (8000d5c <ProgramInit+0xd4>)
 8000d20:	f007 fbb8 	bl	8008494 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);	//starts the SD Card Save timer
 8000d24:	480e      	ldr	r0, [pc, #56]	; (8000d60 <ProgramInit+0xd8>)
 8000d26:	f007 fbb5 	bl	8008494 <HAL_TIM_Base_Start_IT>

	_Prepare_DrawDisplay(ctx.mode);
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <ProgramInit+0xb8>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fa05 	bl	8001140 <_Prepare_DrawDisplay>
	SetToUpdateDisplay();
 8000d36:	f000 f85b 	bl	8000df0 <SetToUpdateDisplay>
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000474 	.word	0x20000474
 8000d44:	20000c34 	.word	0x20000c34
 8000d48:	2000000c 	.word	0x2000000c
 8000d4c:	08011048 	.word	0x08011048
 8000d50:	08011060 	.word	0x08011060
 8000d54:	08011074 	.word	0x08011074
 8000d58:	20000bb4 	.word	0x20000bb4
 8000d5c:	20000bf4 	.word	0x20000bf4
 8000d60:	20000b74 	.word	0x20000b74

08000d64 <AwaitForSignal>:

//check for flags from interrupts to calibrate / update screen
void AwaitForSignal()
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	if( ctx.shouldCalibrate == 1)
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <AwaitForSignal+0x48>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d104      	bne.n	8000d7a <AwaitForSignal+0x16>
	{
		_Calibrate();
 8000d70:	f000 f932 	bl	8000fd8 <_Calibrate>
		//HAL_Delay(1);

		ctx.shouldCalibrate = 0;
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <AwaitForSignal+0x48>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
	}

	if( ctx.shouldUpdateDisplay == 1)
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <AwaitForSignal+0x48>)
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d108      	bne.n	8000d94 <AwaitForSignal+0x30>
	{
		_PreUpdate();		//calculates indirect values for display based on sesnoor readings
 8000d82:	f000 f951 	bl	8001028 <_PreUpdate>
		_UpdateDisplay();	//displays data
 8000d86:	f000 f955 	bl	8001034 <_UpdateDisplay>
		_PostUpdate();		//toogles buzzers, saves data to memory, resets local maximum (GForce)
 8000d8a:	f000 f981 	bl	8001090 <_PostUpdate>

		ctx.shouldUpdateDisplay = 0;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <AwaitForSignal+0x48>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
	}

	if( ctx.shouldSaveToSD == 1)
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <AwaitForSignal+0x48>)
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d104      	bne.n	8000da6 <AwaitForSignal+0x42>
	{
		_SaveToSD();
 8000d9c:	f000 f89a 	bl	8000ed4 <_SaveToSD>
		ctx.shouldSaveToSD = 0;
 8000da0:	4b02      	ldr	r3, [pc, #8]	; (8000dac <AwaitForSignal+0x48>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
	}
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000474 	.word	0x20000474

08000db0 <ProcessValues>:

//read the MPU data and calculate GForce and Space position
void ProcessValues()
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	MPU_readSensor();
 8000db4:	f001 ffea 	bl	8002d8c <MPU_readSensor>
	_Calculate_GForce();
 8000db8:	f000 fc84 	bl	80016c4 <_Calculate_GForce>
	_Calculate_Position();
 8000dbc:	f000 fd1c 	bl	80017f8 <_Calculate_Position>

	ctx.MeasureCount++;
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <ProcessValues+0x24>)
 8000dc2:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	4a02      	ldr	r2, [pc, #8]	; (8000dd4 <ProcessValues+0x24>)
 8000dca:	f8c2 3634 	str.w	r3, [r2, #1588]	; 0x634
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000474 	.word	0x20000474

08000dd8 <SetToChangeDisplayMode>:

void SetToChangeDisplayMode() 	{ ctx.shouldChangeMode = 1; }
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <SetToChangeDisplayMode+0x14>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	20000474 	.word	0x20000474

08000df0 <SetToUpdateDisplay>:
void SetToUpdateDisplay() 		{ ctx.shouldUpdateDisplay = 1; }
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <SetToUpdateDisplay+0x14>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	20000474 	.word	0x20000474

08000e08 <SetToCalibrate>:
void SetToCalibrate() 			{ ctx.shouldCalibrate = 1; }
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <SetToCalibrate+0x14>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	20000474 	.word	0x20000474

08000e20 <SetToSaveData>:
void SetToSaveData()			{ ctx.shouldSaveToSD = 1; }
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <SetToSaveData+0x14>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	20000474 	.word	0x20000474

08000e38 <_SD_Init>:
//-------------------------------------------------------------------
/*		Private		*/
//-------------------------------------------------------------------

void _SD_Init()
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	//uint32_t currentPrescaler = hspi2.Init.BaudRatePrescaler;
	//hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
	//HAL_SPI_Init(&hspi2);

	//try to mount the card a few times
	int attempts = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
	while(f_mount(&ctx.fs, "auto", 1)) {
 8000e42:	e00d      	b.n	8000e60 <_SD_Init+0x28>
		attempts++;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3301      	adds	r3, #1
 8000e48:	607b      	str	r3, [r7, #4]
		HAL_Delay(15);
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f004 feb8 	bl	8005bc0 <HAL_Delay>
		if(attempts > 10)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b0a      	cmp	r3, #10
 8000e54:	dd04      	ble.n	8000e60 <_SD_Init+0x28>
		{
			ctx._DisableSD = 1;
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <_SD_Init+0x80>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
			return;
 8000e5e:	e027      	b.n	8000eb0 <_SD_Init+0x78>
	while(f_mount(&ctx.fs, "auto", 1)) {
 8000e60:	2201      	movs	r2, #1
 8000e62:	4916      	ldr	r1, [pc, #88]	; (8000ebc <_SD_Init+0x84>)
 8000e64:	4816      	ldr	r0, [pc, #88]	; (8000ec0 <_SD_Init+0x88>)
 8000e66:	f00a ff3b 	bl	800bce0 <f_mount>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1e9      	bne.n	8000e44 <_SD_Init+0xc>
		}
	}

	if(f_open(&ctx.fil, SD_FileName, FA_CREATE_ALWAYS | FA_WRITE | FA_READ)) {
 8000e70:	220b      	movs	r2, #11
 8000e72:	4914      	ldr	r1, [pc, #80]	; (8000ec4 <_SD_Init+0x8c>)
 8000e74:	4814      	ldr	r0, [pc, #80]	; (8000ec8 <_SD_Init+0x90>)
 8000e76:	f00a ff7b 	bl	800bd70 <f_open>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <_SD_Init+0x50>
		ctx._DisableSD = 1;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <_SD_Init+0x80>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
	}

	uint16_t pr = f_puts("XXX\tAccX\t|\tAccY\t|\tAccZ\t|\tGyrX\t|\tGyrY\t|\tGyrZ\n", &ctx.fil);
 8000e88:	490f      	ldr	r1, [pc, #60]	; (8000ec8 <_SD_Init+0x90>)
 8000e8a:	4810      	ldr	r0, [pc, #64]	; (8000ecc <_SD_Init+0x94>)
 8000e8c:	f00b fc26 	bl	800c6dc <f_puts>
 8000e90:	4603      	mov	r3, r0
 8000e92:	807b      	strh	r3, [r7, #2]
	f_puts("----------------------------------------------------------------------\n", &ctx.fil);
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <_SD_Init+0x90>)
 8000e96:	480e      	ldr	r0, [pc, #56]	; (8000ed0 <_SD_Init+0x98>)
 8000e98:	f00b fc20 	bl	800c6dc <f_puts>

	if(f_sync(&ctx.fil)) {
 8000e9c:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <_SD_Init+0x90>)
 8000e9e:	f00b fb26 	bl	800c4ee <f_sync>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <_SD_Init+0x78>
		ctx._DisableSD = 1;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <_SD_Init+0x80>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
	}

	//hspi2.Init.BaudRatePrescaler = currentPrescaler;
	//HAL_SPI_Init(&hspi2);
}
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000474 	.word	0x20000474
 8000ebc:	08011088 	.word	0x08011088
 8000ec0:	20000488 	.word	0x20000488
 8000ec4:	08011090 	.word	0x08011090
 8000ec8:	200006b8 	.word	0x200006b8
 8000ecc:	080110a0 	.word	0x080110a0
 8000ed0:	080110d0 	.word	0x080110d0

08000ed4 <_SaveToSD>:

void _SaveToSD()
{
 8000ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ed8:	b0b0      	sub	sp, #192	; 0xc0
 8000eda:	af0c      	add	r7, sp, #48	; 0x30
	//ignore if could not initialize card
	if(ctx._DisableSD == 1){
 8000edc:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <_SaveToSD+0xe0>)
 8000ede:	f8d3 3630 	ldr.w	r3, [r3, #1584]	; 0x630
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d061      	beq.n	8000faa <_SaveToSD+0xd6>
		return;
	}

	char buffer[100];

	float AccX = MPU_getAccelX_mss();
 8000ee6:	f002 f8c5 	bl	8003074 <MPU_getAccelX_mss>
 8000eea:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
	float AccY = MPU_getAccelY_mss();
 8000eee:	f002 f8cf 	bl	8003090 <MPU_getAccelY_mss>
 8000ef2:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
	float AccZ = MPU_getAccelZ_mss();
 8000ef6:	f002 f8d9 	bl	80030ac <MPU_getAccelZ_mss>
 8000efa:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84

	float GyrX = MPU_getGyroX_rads();
 8000efe:	f002 f8e3 	bl	80030c8 <MPU_getGyroX_rads>
 8000f02:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
	float GyrY = MPU_getGyroY_rads();
 8000f06:	f002 f8ed 	bl	80030e4 <MPU_getGyroY_rads>
 8000f0a:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
	float GyrZ = MPU_getGyroZ_rads();
 8000f0e:	f002 f8f7 	bl	8003100 <MPU_getGyroZ_rads>
 8000f12:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78

	snprintf(buffer, 100, "\t%+.2f\t|\t%+.2f\t|\t%+.2f\t|\t%+.2f\t|\t%+.2f\t|\t%+.2f\n",
 8000f16:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000f1a:	f7ff fb15 	bl	8000548 <__aeabi_f2d>
 8000f1e:	4604      	mov	r4, r0
 8000f20:	460d      	mov	r5, r1
 8000f22:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000f26:	f7ff fb0f 	bl	8000548 <__aeabi_f2d>
 8000f2a:	4680      	mov	r8, r0
 8000f2c:	4689      	mov	r9, r1
 8000f2e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000f32:	f7ff fb09 	bl	8000548 <__aeabi_f2d>
 8000f36:	4682      	mov	sl, r0
 8000f38:	468b      	mov	fp, r1
 8000f3a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8000f3e:	f7ff fb03 	bl	8000548 <__aeabi_f2d>
 8000f42:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000f46:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000f48:	f7ff fafe 	bl	8000548 <__aeabi_f2d>
 8000f4c:	e9c7 0100 	strd	r0, r1, [r7]
 8000f50:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000f52:	f7ff faf9 	bl	8000548 <__aeabi_f2d>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	f107 0010 	add.w	r0, r7, #16
 8000f5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000f62:	ed97 7b00 	vldr	d7, [r7]
 8000f66:	ed8d 7b08 	vstr	d7, [sp, #32]
 8000f6a:	ed97 7b02 	vldr	d7, [r7, #8]
 8000f6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000f72:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8000f76:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000f7a:	e9cd 4500 	strd	r4, r5, [sp]
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <_SaveToSD+0xe4>)
 8000f80:	2164      	movs	r1, #100	; 0x64
 8000f82:	f00d f92b 	bl	800e1dc <sniprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f86:	b672      	cpsid	i


	//__NVIC_DisableIRQ(TIM4_IRQn);
	__disable_irq();

	uint16_t pr = f_puts(buffer, &ctx.fil);
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	490b      	ldr	r1, [pc, #44]	; (8000fbc <_SaveToSD+0xe8>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f00b fba4 	bl	800c6dc <f_puts>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	FRESULT sr = f_sync(&ctx.fil);
 8000f9a:	4808      	ldr	r0, [pc, #32]	; (8000fbc <_SaveToSD+0xe8>)
 8000f9c:	f00b faa7 	bl	800c4ee <f_sync>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
  __ASM volatile ("cpsie i" : : : "memory");
 8000fa6:	b662      	cpsie	i
 8000fa8:	e000      	b.n	8000fac <_SaveToSD+0xd8>
		return;
 8000faa:	bf00      	nop

	__enable_irq();
	//__NVIC_EnableIRQ(TIM4_IRQn);
}
 8000fac:	3790      	adds	r7, #144	; 0x90
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000fb4:	20000474 	.word	0x20000474
 8000fb8:	08011118 	.word	0x08011118
 8000fbc:	200006b8 	.word	0x200006b8

08000fc0 <_CalibrateInit>:


//enable reading data, await for the data to self calibrate and init the base reference values
void _CalibrateInit()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	//while(ctx.MeasureCount < Calibration_Init_SampleSize) {}
	HAL_Delay(1000*10);
 8000fc4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000fc8:	f004 fdfa 	bl	8005bc0 <HAL_Delay>

	_PosToRadians();
 8000fcc:	f000 fc54 	bl	8001878 <_PosToRadians>
	_Calibrate();
 8000fd0:	f000 f802 	bl	8000fd8 <_Calibrate>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_Calibrate>:

//update base GForce and angle values for reference
void _Calibrate()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0

	//MPU_calibrateAccel();
	//MPU_calibrateGyro();
	//MPU_calibrateMag();
	//use the mean of the last few GForce measurments as the new base
	ctx.GForce_Base = ctx.GForce_Mean;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <_Calibrate+0x4c>)
 8000fde:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <_Calibrate+0x4c>)
 8000fe6:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8000fea:	601a      	str	r2, [r3, #0]

	//use the current space vector as the base one
	_Calculate_Angle();
 8000fec:	f000 fd46 	bl	8001a7c <_Calculate_Angle>
	ctx.BaseX = ctx.PosX;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <_Calibrate+0x4c>)
 8000ff2:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <_Calibrate+0x4c>)
 8000ffa:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8000ffe:	601a      	str	r2, [r3, #0]
	ctx.BaseY = ctx.PosY;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <_Calibrate+0x4c>)
 8001002:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <_Calibrate+0x4c>)
 800100a:	f203 6314 	addw	r3, r3, #1556	; 0x614
 800100e:	601a      	str	r2, [r3, #0]
	ctx.BaseZ = ctx.PosZ;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <_Calibrate+0x4c>)
 8001012:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <_Calibrate+0x4c>)
 800101a:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 800101e:	601a      	str	r2, [r3, #0]
	//ctx.BaseVectorLength = ctx.BaseX * ctx.BaseX + ctx.BaseY * ctx.BaseY;

	//__NVIC_EnableIRQ(TIM4_IRQn);
	//__enable_irq();
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000474 	.word	0x20000474

08001028 <_PreUpdate>:


//calculatethe neccesary values from the recent readings before updating display
void _PreUpdate()
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	//__NVIC_DisableIRQ(TIM4_IRQn);
	//__disable_irq();

	_Calculate_Angle();
 800102c:	f000 fd26 	bl	8001a7c <_Calculate_Angle>

	//__NVIC_EnableIRQ(TIM4_IRQn);
	//__enable_irq();
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <_UpdateDisplay>:

//update the display in the respective mode
void _UpdateDisplay()
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	if( ctx.shouldChangeMode == 1)
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <_UpdateDisplay+0x58>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d11d      	bne.n	800107c <_UpdateDisplay+0x48>
	{
		//cycle through the display modes
		switch(ctx.mode)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <_UpdateDisplay+0x58>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d007      	beq.n	800105a <_UpdateDisplay+0x26>
 800104a:	2b02      	cmp	r3, #2
 800104c:	d009      	beq.n	8001062 <_UpdateDisplay+0x2e>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10b      	bne.n	800106a <_UpdateDisplay+0x36>
		{
			case Display_Default:
			ctx.mode = Display_Position;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <_UpdateDisplay+0x58>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
			break;
 8001058:	e007      	b.n	800106a <_UpdateDisplay+0x36>

			case Display_Position:
			ctx.mode = Display_Raw;
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <_UpdateDisplay+0x58>)
 800105c:	2202      	movs	r2, #2
 800105e:	701a      	strb	r2, [r3, #0]
			break;
 8001060:	e003      	b.n	800106a <_UpdateDisplay+0x36>

			case Display_Raw:
			ctx.mode = Display_Default;
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <_UpdateDisplay+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
			break;
 8001068:	bf00      	nop
		}

		//draw the static values for the chosen mode
		_Prepare_DrawDisplay(ctx.mode);
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <_UpdateDisplay+0x58>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f865 	bl	8001140 <_Prepare_DrawDisplay>

		ctx.shouldChangeMode = 0;
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <_UpdateDisplay+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
	}

	_DrawDisplay(ctx.mode);
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <_UpdateDisplay+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f922 	bl	80012cc <_DrawDisplay>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000474 	.word	0x20000474

08001090 <_PostUpdate>:

void _PostUpdate()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	//Toogle Buzzer based on GForce
	if( (ctx.GForce_LocalMax/ctx.GForce_Base >= GForce_Threashold_1) || (ctx.Angle >= Angle_Threashold_1) )
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <_PostUpdate+0xa8>)
 8001096:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 800109a:	edd3 6a00 	vldr	s13, [r3]
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <_PostUpdate+0xa8>)
 80010a0:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80010a4:	ed93 7a00 	vldr	s14, [r3]
 80010a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ac:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800113c <_PostUpdate+0xac>
 80010b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	da0b      	bge.n	80010d2 <_PostUpdate+0x42>
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <_PostUpdate+0xa8>)
 80010bc:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80010c0:	edd3 7a00 	vldr	s15, [r3]
 80010c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d0:	db02      	blt.n	80010d8 <_PostUpdate+0x48>
		_Buzzer_Enable();
 80010d2:	f000 fad7 	bl	8001684 <_Buzzer_Enable>
 80010d6:	e020      	b.n	800111a <_PostUpdate+0x8a>
	else if( (ctx.GForce_LocalMax/ctx.GForce_Base < GForce_Threashold_1) && (ctx.Angle < Angle_Threashold_1) )
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <_PostUpdate+0xa8>)
 80010da:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 80010de:	edd3 6a00 	vldr	s13, [r3]
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <_PostUpdate+0xa8>)
 80010e4:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80010e8:	ed93 7a00 	vldr	s14, [r3]
 80010ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800113c <_PostUpdate+0xac>
 80010f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fc:	d50d      	bpl.n	800111a <_PostUpdate+0x8a>
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <_PostUpdate+0xa8>)
 8001100:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800110c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	d501      	bpl.n	800111a <_PostUpdate+0x8a>
		_Buzzer_Disable();
 8001116:	f000 fac5 	bl	80016a4 <_Buzzer_Disable>
	//	_Buzzer_Enable();
	//else if(ctx.Angle < Angle_Threashold_1)
	//	_Buzzer_Disable();

	//reset GForce local maximum
	ctx.GForce_LocalMax = ctx.GForce_Base;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <_PostUpdate+0xa8>)
 800111c:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <_PostUpdate+0xa8>)
 8001124:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8001128:	601a      	str	r2, [r3, #0]
	ctx.MeasureCount = 0;
 800112a:	4b03      	ldr	r3, [pc, #12]	; (8001138 <_PostUpdate+0xa8>)
 800112c:	2200      	movs	r2, #0
 800112e:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000474 	.word	0x20000474
 800113c:	3f8ccccd 	.word	0x3f8ccccd

08001140 <_Prepare_DrawDisplay>:
	st7789_FillRectangle(30, 160, 150, 30, YELLOW);
}

//Draw static values that neve change in the given mode
void _Prepare_DrawDisplay(DisplayMode mode)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b092      	sub	sp, #72	; 0x48
 8001144:	af02      	add	r7, sp, #8
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	switch(mode)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d01e      	beq.n	800118e <_Prepare_DrawDisplay+0x4e>
 8001150:	2b02      	cmp	r3, #2
 8001152:	d040      	beq.n	80011d6 <_Prepare_DrawDisplay+0x96>
 8001154:	2b00      	cmp	r3, #0
 8001156:	d000      	beq.n	800115a <_Prepare_DrawDisplay+0x1a>

			st7789_DrawString(Display_Spacing, (Display_Spacing + DispRaw_FontH) * 9, "Temperature", DispRaw_Font, BLACK, YELLOW);
			break;
		}

		default: break;
 8001158:	e090      	b.n	800127c <_Prepare_DrawDisplay+0x13c>
			st7789_FillScreen(BLACK);
 800115a:	2000      	movs	r0, #0
 800115c:	f004 fb88 	bl	8005870 <st7789_FillScreen>
			st7789_DrawString(20, 50, "Force: ", &Font24, BLACK, WHITE);
 8001160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	2300      	movs	r3, #0
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <_Prepare_DrawDisplay+0x144>)
 800116c:	4a46      	ldr	r2, [pc, #280]	; (8001288 <_Prepare_DrawDisplay+0x148>)
 800116e:	2132      	movs	r1, #50	; 0x32
 8001170:	2014      	movs	r0, #20
 8001172:	f004 fc4d 	bl	8005a10 <st7789_DrawString>
			st7789_DrawString(20, 80, "Angle: ", &Font24, BLACK, WHITE);
 8001176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	2300      	movs	r3, #0
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <_Prepare_DrawDisplay+0x144>)
 8001182:	4a42      	ldr	r2, [pc, #264]	; (800128c <_Prepare_DrawDisplay+0x14c>)
 8001184:	2150      	movs	r1, #80	; 0x50
 8001186:	2014      	movs	r0, #20
 8001188:	f004 fc42 	bl	8005a10 <st7789_DrawString>
			break;
 800118c:	e076      	b.n	800127c <_Prepare_DrawDisplay+0x13c>
			st7789_FillScreen(BLACK);
 800118e:	2000      	movs	r0, #0
 8001190:	f004 fb6e 	bl	8005870 <st7789_FillScreen>
			st7789_DrawString(20, 30, "X: ", &Font24, BLACK, RED);
 8001194:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	2300      	movs	r3, #0
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	4b39      	ldr	r3, [pc, #228]	; (8001284 <_Prepare_DrawDisplay+0x144>)
 80011a0:	4a3b      	ldr	r2, [pc, #236]	; (8001290 <_Prepare_DrawDisplay+0x150>)
 80011a2:	211e      	movs	r1, #30
 80011a4:	2014      	movs	r0, #20
 80011a6:	f004 fc33 	bl	8005a10 <st7789_DrawString>
			st7789_DrawString(20, 60, "Y: ", &Font24, BLACK, GREEN);
 80011aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	2300      	movs	r3, #0
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <_Prepare_DrawDisplay+0x144>)
 80011b6:	4a37      	ldr	r2, [pc, #220]	; (8001294 <_Prepare_DrawDisplay+0x154>)
 80011b8:	213c      	movs	r1, #60	; 0x3c
 80011ba:	2014      	movs	r0, #20
 80011bc:	f004 fc28 	bl	8005a10 <st7789_DrawString>
			st7789_DrawString(20, 90, "Z: ", &Font24, BLACK, BLUE);
 80011c0:	231f      	movs	r3, #31
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	2300      	movs	r3, #0
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <_Prepare_DrawDisplay+0x144>)
 80011ca:	4a33      	ldr	r2, [pc, #204]	; (8001298 <_Prepare_DrawDisplay+0x158>)
 80011cc:	215a      	movs	r1, #90	; 0x5a
 80011ce:	2014      	movs	r0, #20
 80011d0:	f004 fc1e 	bl	8005a10 <st7789_DrawString>
			break;
 80011d4:	e052      	b.n	800127c <_Prepare_DrawDisplay+0x13c>
			st7789_FillScreen(BLACK);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f004 fb4a 	bl	8005870 <st7789_FillScreen>
			snprintf(Buff, 50, "%9s%9s%9s", "AccX", "AccY", "AccZ");
 80011dc:	f107 000c 	add.w	r0, r7, #12
 80011e0:	4b2e      	ldr	r3, [pc, #184]	; (800129c <_Prepare_DrawDisplay+0x15c>)
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <_Prepare_DrawDisplay+0x160>)
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <_Prepare_DrawDisplay+0x164>)
 80011ea:	4a2f      	ldr	r2, [pc, #188]	; (80012a8 <_Prepare_DrawDisplay+0x168>)
 80011ec:	2132      	movs	r1, #50	; 0x32
 80011ee:	f00c fff5 	bl	800e1dc <sniprintf>
			st7789_DrawString(Display_Spacing, (Display_Spacing + DispRaw_FontH) * 0, Buff, DispRaw_Font, BLACK, RED);
 80011f2:	f107 020c 	add.w	r2, r7, #12
 80011f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	2300      	movs	r3, #0
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <_Prepare_DrawDisplay+0x16c>)
 8001202:	2100      	movs	r1, #0
 8001204:	2005      	movs	r0, #5
 8001206:	f004 fc03 	bl	8005a10 <st7789_DrawString>
			snprintf(Buff, 50, "%9s%9s%9s", "GyrX", "GyrY", "GyrZ");
 800120a:	f107 000c 	add.w	r0, r7, #12
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <_Prepare_DrawDisplay+0x170>)
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <_Prepare_DrawDisplay+0x174>)
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <_Prepare_DrawDisplay+0x178>)
 8001218:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <_Prepare_DrawDisplay+0x168>)
 800121a:	2132      	movs	r1, #50	; 0x32
 800121c:	f00c ffde 	bl	800e1dc <sniprintf>
			st7789_DrawString(Display_Spacing, (Display_Spacing + DispRaw_FontH) * 3, Buff, DispRaw_Font, BLACK, GREEN);
 8001220:	f107 020c 	add.w	r2, r7, #12
 8001224:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	2300      	movs	r3, #0
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <_Prepare_DrawDisplay+0x16c>)
 8001230:	2133      	movs	r1, #51	; 0x33
 8001232:	2005      	movs	r0, #5
 8001234:	f004 fbec 	bl	8005a10 <st7789_DrawString>
			snprintf(Buff, 50, "%9s%9s%9s", "MagX", "MagY", "MagZ");
 8001238:	f107 000c 	add.w	r0, r7, #12
 800123c:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <_Prepare_DrawDisplay+0x17c>)
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <_Prepare_DrawDisplay+0x180>)
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <_Prepare_DrawDisplay+0x184>)
 8001246:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <_Prepare_DrawDisplay+0x168>)
 8001248:	2132      	movs	r1, #50	; 0x32
 800124a:	f00c ffc7 	bl	800e1dc <sniprintf>
			st7789_DrawString(Display_Spacing, (Display_Spacing + DispRaw_FontH) * 6, Buff, DispRaw_Font, BLACK, BLUE);
 800124e:	f107 020c 	add.w	r2, r7, #12
 8001252:	231f      	movs	r3, #31
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	2300      	movs	r3, #0
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <_Prepare_DrawDisplay+0x16c>)
 800125c:	2166      	movs	r1, #102	; 0x66
 800125e:	2005      	movs	r0, #5
 8001260:	f004 fbd6 	bl	8005a10 <st7789_DrawString>
			st7789_DrawString(Display_Spacing, (Display_Spacing + DispRaw_FontH) * 9, "Temperature", DispRaw_Font, BLACK, YELLOW);
 8001264:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	2300      	movs	r3, #0
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <_Prepare_DrawDisplay+0x16c>)
 8001270:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <_Prepare_DrawDisplay+0x188>)
 8001272:	2199      	movs	r1, #153	; 0x99
 8001274:	2005      	movs	r0, #5
 8001276:	f004 fbcb 	bl	8005a10 <st7789_DrawString>
			break;
 800127a:	bf00      	nop
	}
}
 800127c:	bf00      	nop
 800127e:	3740      	adds	r7, #64	; 0x40
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000014 	.word	0x20000014
 8001288:	08011150 	.word	0x08011150
 800128c:	08011158 	.word	0x08011158
 8001290:	08011160 	.word	0x08011160
 8001294:	08011164 	.word	0x08011164
 8001298:	08011168 	.word	0x08011168
 800129c:	08011180 	.word	0x08011180
 80012a0:	08011188 	.word	0x08011188
 80012a4:	0801116c 	.word	0x0801116c
 80012a8:	08011174 	.word	0x08011174
 80012ac:	20000004 	.word	0x20000004
 80012b0:	08011198 	.word	0x08011198
 80012b4:	080111a0 	.word	0x080111a0
 80012b8:	08011190 	.word	0x08011190
 80012bc:	080111b0 	.word	0x080111b0
 80012c0:	080111b8 	.word	0x080111b8
 80012c4:	080111a8 	.word	0x080111a8
 80012c8:	080111c0 	.word	0x080111c0

080012cc <_DrawDisplay>:

//update the variable elements of the display
void _DrawDisplay(DisplayMode mode)
{
 80012cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012d0:	b0a8      	sub	sp, #160	; 0xa0
 80012d2:	af06      	add	r7, sp, #24
 80012d4:	4603      	mov	r3, r0
 80012d6:	71fb      	strb	r3, [r7, #7]
	switch(mode)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	f000 8092 	beq.w	8001404 <_DrawDisplay+0x138>
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	f000 80f3 	beq.w	80014cc <_DrawDisplay+0x200>
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d000      	beq.n	80012ec <_DrawDisplay+0x20>
			st7789_DrawString(Display_Spacing, (Display_Spacing + DispRaw_FontH) * 13, Buff, DispRaw_Font, BLACK, WHITE);
			break;
		}


		default: break;
 80012ea:	e1bb      	b.n	8001664 <_DrawDisplay+0x398>
			float GForce = ctx.GForce_LocalMax / ctx.GForce_Base;
 80012ec:	4b71      	ldr	r3, [pc, #452]	; (80014b4 <_DrawDisplay+0x1e8>)
 80012ee:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 80012f2:	edd3 6a00 	vldr	s13, [r3]
 80012f6:	4b6f      	ldr	r3, [pc, #444]	; (80014b4 <_DrawDisplay+0x1e8>)
 80012f8:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80012fc:	ed93 7a00 	vldr	s14, [r3]
 8001300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001304:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			if(GForce < GForce_Threashold_1)
 8001308:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800130c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80014b8 <_DrawDisplay+0x1ec>
 8001310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d504      	bpl.n	8001324 <_DrawDisplay+0x58>
				color = GREEN;
 800131a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800131e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001322:	e011      	b.n	8001348 <_DrawDisplay+0x7c>
			else if(GForce < GForce_Threashold_2)
 8001324:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001328:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80014bc <_DrawDisplay+0x1f0>
 800132c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001334:	d504      	bpl.n	8001340 <_DrawDisplay+0x74>
				color = YELLOW;
 8001336:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800133a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 800133e:	e003      	b.n	8001348 <_DrawDisplay+0x7c>
				color = RED;
 8001340:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001344:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			snprintf(Buff, 10, "%5.2f", GForce);
 8001348:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800134a:	f7ff f8fd 	bl	8000548 <__aeabi_f2d>
 800134e:	4603      	mov	r3, r0
 8001350:	460c      	mov	r4, r1
 8001352:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001356:	e9cd 3400 	strd	r3, r4, [sp]
 800135a:	4a59      	ldr	r2, [pc, #356]	; (80014c0 <_DrawDisplay+0x1f4>)
 800135c:	210a      	movs	r1, #10
 800135e:	f00c ff3d 	bl	800e1dc <sniprintf>
			st7789_DrawString(20 + 17*7, 50, Buff, &Font24, BLACK, color);
 8001362:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001366:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	2300      	movs	r3, #0
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	4b54      	ldr	r3, [pc, #336]	; (80014c4 <_DrawDisplay+0x1f8>)
 8001372:	2132      	movs	r1, #50	; 0x32
 8001374:	208b      	movs	r0, #139	; 0x8b
 8001376:	f004 fb4b 	bl	8005a10 <st7789_DrawString>
			if(ctx.Angle < Angle_Threashold_1)
 800137a:	4b4e      	ldr	r3, [pc, #312]	; (80014b4 <_DrawDisplay+0x1e8>)
 800137c:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800138c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001390:	d504      	bpl.n	800139c <_DrawDisplay+0xd0>
				color = GREEN;
 8001392:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001396:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 800139a:	e014      	b.n	80013c6 <_DrawDisplay+0xfa>
			else if(ctx.Angle < Angle_Threashold_2)
 800139c:	4b45      	ldr	r3, [pc, #276]	; (80014b4 <_DrawDisplay+0x1e8>)
 800139e:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80013aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b2:	d504      	bpl.n	80013be <_DrawDisplay+0xf2>
				color = YELLOW;
 80013b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80013b8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 80013bc:	e003      	b.n	80013c6 <_DrawDisplay+0xfa>
				color = RED;
 80013be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013c2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			snprintf(Buff, 10, "%5.2f", ctx.Angle);
 80013c6:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <_DrawDisplay+0x1e8>)
 80013c8:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8ba 	bl	8000548 <__aeabi_f2d>
 80013d4:	4603      	mov	r3, r0
 80013d6:	460c      	mov	r4, r1
 80013d8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80013dc:	e9cd 3400 	strd	r3, r4, [sp]
 80013e0:	4a37      	ldr	r2, [pc, #220]	; (80014c0 <_DrawDisplay+0x1f4>)
 80013e2:	210a      	movs	r1, #10
 80013e4:	f00c fefa 	bl	800e1dc <sniprintf>
			st7789_DrawString(20 + 17*7, 80, Buff, &Font24, BLACK, color);
 80013e8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80013ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	2300      	movs	r3, #0
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <_DrawDisplay+0x1f8>)
 80013f8:	2150      	movs	r1, #80	; 0x50
 80013fa:	208b      	movs	r0, #139	; 0x8b
 80013fc:	f004 fb08 	bl	8005a10 <st7789_DrawString>
			break;
 8001400:	bf00      	nop
 8001402:	e12f      	b.n	8001664 <_DrawDisplay+0x398>
			snprintf(Buff, 10, "%7.2f", ctx.PosX);
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <_DrawDisplay+0x1e8>)
 8001406:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f89b 	bl	8000548 <__aeabi_f2d>
 8001412:	4603      	mov	r3, r0
 8001414:	460c      	mov	r4, r1
 8001416:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800141a:	e9cd 3400 	strd	r3, r4, [sp]
 800141e:	4a2a      	ldr	r2, [pc, #168]	; (80014c8 <_DrawDisplay+0x1fc>)
 8001420:	210a      	movs	r1, #10
 8001422:	f00c fedb 	bl	800e1dc <sniprintf>
			st7789_DrawString(20 + 17*3, 30, Buff, &Font24, BLACK, RED);
 8001426:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800142a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	2300      	movs	r3, #0
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <_DrawDisplay+0x1f8>)
 8001436:	211e      	movs	r1, #30
 8001438:	2047      	movs	r0, #71	; 0x47
 800143a:	f004 fae9 	bl	8005a10 <st7789_DrawString>
			snprintf(Buff, 10, "%7.2f", ctx.PosY);
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <_DrawDisplay+0x1e8>)
 8001440:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f87e 	bl	8000548 <__aeabi_f2d>
 800144c:	4603      	mov	r3, r0
 800144e:	460c      	mov	r4, r1
 8001450:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001454:	e9cd 3400 	strd	r3, r4, [sp]
 8001458:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <_DrawDisplay+0x1fc>)
 800145a:	210a      	movs	r1, #10
 800145c:	f00c febe 	bl	800e1dc <sniprintf>
			st7789_DrawString(20 + 17*3, 60, Buff, &Font24, BLACK, GREEN);
 8001460:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001464:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	2300      	movs	r3, #0
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <_DrawDisplay+0x1f8>)
 8001470:	213c      	movs	r1, #60	; 0x3c
 8001472:	2047      	movs	r0, #71	; 0x47
 8001474:	f004 facc 	bl	8005a10 <st7789_DrawString>
			snprintf(Buff, 10, "%7.2f", ctx.PosZ);
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <_DrawDisplay+0x1e8>)
 800147a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f861 	bl	8000548 <__aeabi_f2d>
 8001486:	4603      	mov	r3, r0
 8001488:	460c      	mov	r4, r1
 800148a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800148e:	e9cd 3400 	strd	r3, r4, [sp]
 8001492:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <_DrawDisplay+0x1fc>)
 8001494:	210a      	movs	r1, #10
 8001496:	f00c fea1 	bl	800e1dc <sniprintf>
			st7789_DrawString(20 + 17*3, 90, Buff, &Font24, BLACK, BLUE);
 800149a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800149e:	231f      	movs	r3, #31
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	2300      	movs	r3, #0
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <_DrawDisplay+0x1f8>)
 80014a8:	215a      	movs	r1, #90	; 0x5a
 80014aa:	2047      	movs	r0, #71	; 0x47
 80014ac:	f004 fab0 	bl	8005a10 <st7789_DrawString>
			break;
 80014b0:	bf00      	nop
 80014b2:	e0d7      	b.n	8001664 <_DrawDisplay+0x398>
 80014b4:	20000474 	.word	0x20000474
 80014b8:	3f8ccccd 	.word	0x3f8ccccd
 80014bc:	3f99999a 	.word	0x3f99999a
 80014c0:	080111cc 	.word	0x080111cc
 80014c4:	20000014 	.word	0x20000014
 80014c8:	080111d4 	.word	0x080111d4
			const float AccX = MPU_getAccelX_mss();
 80014cc:	f001 fdd2 	bl	8003074 <MPU_getAccelX_mss>
 80014d0:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
			const float AccY = MPU_getAccelY_mss();
 80014d4:	f001 fddc 	bl	8003090 <MPU_getAccelY_mss>
 80014d8:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
			const float AccZ = MPU_getAccelZ_mss();
 80014dc:	f001 fde6 	bl	80030ac <MPU_getAccelZ_mss>
 80014e0:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
			snprintf(Buff, 50, "%+9.2f%+9.2f%+9.2f", AccX, AccY, AccZ);
 80014e4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80014e8:	f7ff f82e 	bl	8000548 <__aeabi_f2d>
 80014ec:	4604      	mov	r4, r0
 80014ee:	460d      	mov	r5, r1
 80014f0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80014f2:	f7ff f829 	bl	8000548 <__aeabi_f2d>
 80014f6:	4680      	mov	r8, r0
 80014f8:	4689      	mov	r9, r1
 80014fa:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80014fc:	f7ff f824 	bl	8000548 <__aeabi_f2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	f107 000c 	add.w	r0, r7, #12
 8001508:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800150c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001510:	e9cd 4500 	strd	r4, r5, [sp]
 8001514:	4a56      	ldr	r2, [pc, #344]	; (8001670 <_DrawDisplay+0x3a4>)
 8001516:	2132      	movs	r1, #50	; 0x32
 8001518:	f00c fe60 	bl	800e1dc <sniprintf>
			st7789_DrawString(Display_Spacing, (Display_Spacing + DispRaw_FontH) * 1, Buff, DispRaw_Font, BLACK, RED);
 800151c:	f107 020c 	add.w	r2, r7, #12
 8001520:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	2300      	movs	r3, #0
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	4b52      	ldr	r3, [pc, #328]	; (8001674 <_DrawDisplay+0x3a8>)
 800152c:	2111      	movs	r1, #17
 800152e:	2005      	movs	r0, #5
 8001530:	f004 fa6e 	bl	8005a10 <st7789_DrawString>
			const float GyrX = MPU_getGyroX_rads();
 8001534:	f001 fdc8 	bl	80030c8 <MPU_getGyroX_rads>
 8001538:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
			const float GyrY = MPU_getGyroY_rads();
 800153c:	f001 fdd2 	bl	80030e4 <MPU_getGyroY_rads>
 8001540:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
			const float GyrZ = MPU_getGyroZ_rads();
 8001544:	f001 fddc 	bl	8003100 <MPU_getGyroZ_rads>
 8001548:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
			snprintf(Buff, 50, "%+9.2f%+9.2f%+9.2f", GyrX, GyrY, GyrZ);
 800154c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800154e:	f7fe fffb 	bl	8000548 <__aeabi_f2d>
 8001552:	4604      	mov	r4, r0
 8001554:	460d      	mov	r5, r1
 8001556:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001558:	f7fe fff6 	bl	8000548 <__aeabi_f2d>
 800155c:	4680      	mov	r8, r0
 800155e:	4689      	mov	r9, r1
 8001560:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001562:	f7fe fff1 	bl	8000548 <__aeabi_f2d>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	f107 000c 	add.w	r0, r7, #12
 800156e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001572:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001576:	e9cd 4500 	strd	r4, r5, [sp]
 800157a:	4a3d      	ldr	r2, [pc, #244]	; (8001670 <_DrawDisplay+0x3a4>)
 800157c:	2132      	movs	r1, #50	; 0x32
 800157e:	f00c fe2d 	bl	800e1dc <sniprintf>
			st7789_DrawString(Display_Spacing, (Display_Spacing + DispRaw_FontH) * 4, Buff, DispRaw_Font, BLACK, GREEN);
 8001582:	f107 020c 	add.w	r2, r7, #12
 8001586:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	2300      	movs	r3, #0
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4b38      	ldr	r3, [pc, #224]	; (8001674 <_DrawDisplay+0x3a8>)
 8001592:	2144      	movs	r1, #68	; 0x44
 8001594:	2005      	movs	r0, #5
 8001596:	f004 fa3b 	bl	8005a10 <st7789_DrawString>
			const float MagX = MPU_getMagX_uT();
 800159a:	f001 fdbf 	bl	800311c <MPU_getMagX_uT>
 800159e:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
			const float MagY = MPU_getMagY_uT();
 80015a2:	f001 fdc9 	bl	8003138 <MPU_getMagY_uT>
 80015a6:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
			const float MagZ = MPU_getMagZ_uT();
 80015aa:	f001 fdd3 	bl	8003154 <MPU_getMagZ_uT>
 80015ae:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
			snprintf(Buff, 50, "%+9.2f%+9.2f%+9.2f", MagX, MagY, MagZ);
 80015b2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80015b4:	f7fe ffc8 	bl	8000548 <__aeabi_f2d>
 80015b8:	4604      	mov	r4, r0
 80015ba:	460d      	mov	r5, r1
 80015bc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80015be:	f7fe ffc3 	bl	8000548 <__aeabi_f2d>
 80015c2:	4680      	mov	r8, r0
 80015c4:	4689      	mov	r9, r1
 80015c6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80015c8:	f7fe ffbe 	bl	8000548 <__aeabi_f2d>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	f107 000c 	add.w	r0, r7, #12
 80015d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80015d8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015dc:	e9cd 4500 	strd	r4, r5, [sp]
 80015e0:	4a23      	ldr	r2, [pc, #140]	; (8001670 <_DrawDisplay+0x3a4>)
 80015e2:	2132      	movs	r1, #50	; 0x32
 80015e4:	f00c fdfa 	bl	800e1dc <sniprintf>
			st7789_DrawString(Display_Spacing, (Display_Spacing + DispRaw_FontH) * 7, Buff, DispRaw_Font, BLACK, BLUE);
 80015e8:	f107 020c 	add.w	r2, r7, #12
 80015ec:	231f      	movs	r3, #31
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	2300      	movs	r3, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <_DrawDisplay+0x3a8>)
 80015f6:	2177      	movs	r1, #119	; 0x77
 80015f8:	2005      	movs	r0, #5
 80015fa:	f004 fa09 	bl	8005a10 <st7789_DrawString>
			const float Temp = MPU_getTemperature_C();
 80015fe:	f001 fdb7 	bl	8003170 <MPU_getTemperature_C>
 8001602:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
			snprintf(Buff, 50, "%11.2f", Temp);
 8001606:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001608:	f7fe ff9e 	bl	8000548 <__aeabi_f2d>
 800160c:	4603      	mov	r3, r0
 800160e:	460c      	mov	r4, r1
 8001610:	f107 000c 	add.w	r0, r7, #12
 8001614:	e9cd 3400 	strd	r3, r4, [sp]
 8001618:	4a17      	ldr	r2, [pc, #92]	; (8001678 <_DrawDisplay+0x3ac>)
 800161a:	2132      	movs	r1, #50	; 0x32
 800161c:	f00c fdde 	bl	800e1dc <sniprintf>
			st7789_DrawString(Display_Spacing, (Display_Spacing + DispRaw_FontH) * 10, Buff, DispRaw_Font, BLACK, YELLOW);
 8001620:	f107 020c 	add.w	r2, r7, #12
 8001624:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	2300      	movs	r3, #0
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <_DrawDisplay+0x3a8>)
 8001630:	21aa      	movs	r1, #170	; 0xaa
 8001632:	2005      	movs	r0, #5
 8001634:	f004 f9ec 	bl	8005a10 <st7789_DrawString>
			snprintf(Buff, 50, "%5d", ctx.MeasureCount);
 8001638:	4b10      	ldr	r3, [pc, #64]	; (800167c <_DrawDisplay+0x3b0>)
 800163a:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
 800163e:	f107 000c 	add.w	r0, r7, #12
 8001642:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <_DrawDisplay+0x3b4>)
 8001644:	2132      	movs	r1, #50	; 0x32
 8001646:	f00c fdc9 	bl	800e1dc <sniprintf>
			st7789_DrawString(Display_Spacing, (Display_Spacing + DispRaw_FontH) * 13, Buff, DispRaw_Font, BLACK, WHITE);
 800164a:	f107 020c 	add.w	r2, r7, #12
 800164e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	2300      	movs	r3, #0
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <_DrawDisplay+0x3a8>)
 800165a:	21dd      	movs	r1, #221	; 0xdd
 800165c:	2005      	movs	r0, #5
 800165e:	f004 f9d7 	bl	8005a10 <st7789_DrawString>
			break;
 8001662:	bf00      	nop
	}
}
 8001664:	bf00      	nop
 8001666:	3788      	adds	r7, #136	; 0x88
 8001668:	46bd      	mov	sp, r7
 800166a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800166e:	bf00      	nop
 8001670:	080111dc 	.word	0x080111dc
 8001674:	20000004 	.word	0x20000004
 8001678:	080111f0 	.word	0x080111f0
 800167c:	20000474 	.word	0x20000474
 8001680:	080111f8 	.word	0x080111f8

08001684 <_Buzzer_Enable>:


void _Buzzer_Enable()
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001688:	2100      	movs	r1, #0
 800168a:	4804      	ldr	r0, [pc, #16]	; (800169c <_Buzzer_Enable+0x18>)
 800168c:	f006 ff62 	bl	8008554 <HAL_TIM_PWM_Start>
	ctx.status = Buzzer_Enabled;
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <_Buzzer_Enable+0x1c>)
 8001692:	2200      	movs	r2, #0
 8001694:	705a      	strb	r2, [r3, #1]
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000c34 	.word	0x20000c34
 80016a0:	20000474 	.word	0x20000474

080016a4 <_Buzzer_Disable>:

void _Buzzer_Disable()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80016a8:	2100      	movs	r1, #0
 80016aa:	4804      	ldr	r0, [pc, #16]	; (80016bc <_Buzzer_Disable+0x18>)
 80016ac:	f006 ffaa 	bl	8008604 <HAL_TIM_PWM_Stop>
	ctx.status = Buzzer_Disabled;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <_Buzzer_Disable+0x1c>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	705a      	strb	r2, [r3, #1]
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000c34 	.word	0x20000c34
 80016c0:	20000474 	.word	0x20000474

080016c4 <_Calculate_GForce>:

void _Calculate_GForce()
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
	//get the total GForce_Mean value
	const int32_t ax = MPU_getAccelX_raw();
 80016ca:	f001 fd5f 	bl	800318c <MPU_getAccelX_raw>
 80016ce:	4603      	mov	r3, r0
 80016d0:	60fb      	str	r3, [r7, #12]
	const int32_t ay = MPU_getAccelY_raw();
 80016d2:	f001 fd67 	bl	80031a4 <MPU_getAccelY_raw>
 80016d6:	4603      	mov	r3, r0
 80016d8:	60bb      	str	r3, [r7, #8]
	const int32_t az = MPU_getAccelZ_raw();
 80016da:	f001 fd6f 	bl	80031bc <MPU_getAccelZ_raw>
 80016de:	4603      	mov	r3, r0
 80016e0:	607b      	str	r3, [r7, #4]
	const float g = sqrt( (float)(ax*ax + ay*ay + az*az) );
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	fb02 f203 	mul.w	r2, r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	fb01 f303 	mul.w	r3, r1, r3
 80016f2:	441a      	add	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001706:	ee17 0a90 	vmov	r0, s15
 800170a:	f7fe ff1d 	bl	8000548 <__aeabi_f2d>
 800170e:	4603      	mov	r3, r0
 8001710:	460c      	mov	r4, r1
 8001712:	ec44 3b10 	vmov	d0, r3, r4
 8001716:	f00b f93b 	bl	800c990 <sqrt>
 800171a:	ec54 3b10 	vmov	r3, r4, d0
 800171e:	4618      	mov	r0, r3
 8001720:	4621      	mov	r1, r4
 8001722:	f7ff fa61 	bl	8000be8 <__aeabi_d2f>
 8001726:	4603      	mov	r3, r0
 8001728:	603b      	str	r3, [r7, #0]

	//Update the Mean GForce_Mean value based on last few results
	ctx.GForce_Mean -= ctx.GForce_Buffor[ctx.GForce_Buffor_Index];
 800172a:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <_Calculate_GForce+0x130>)
 800172c:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8001730:	4a30      	ldr	r2, [pc, #192]	; (80017f4 <_Calculate_GForce+0x130>)
 8001732:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	3304      	adds	r3, #4
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <_Calculate_GForce+0x130>)
 8001742:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8001746:	ed93 7a00 	vldr	s14, [r3]
 800174a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <_Calculate_GForce+0x130>)
 8001750:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8001754:	edc3 7a00 	vstr	s15, [r3]
	ctx.GForce_Buffor[ctx.GForce_Buffor_Index] = g;
 8001758:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <_Calculate_GForce+0x130>)
 800175a:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 800175e:	4a25      	ldr	r2, [pc, #148]	; (80017f4 <_Calculate_GForce+0x130>)
 8001760:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3304      	adds	r3, #4
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	601a      	str	r2, [r3, #0]
	ctx.GForce_Mean += ctx.GForce_Buffor[ctx.GForce_Buffor_Index];
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <_Calculate_GForce+0x130>)
 8001770:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8001774:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <_Calculate_GForce+0x130>)
 8001776:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	3304      	adds	r3, #4
 8001780:	ed93 7a00 	vldr	s14, [r3]
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <_Calculate_GForce+0x130>)
 8001786:	f203 4374 	addw	r3, r3, #1140	; 0x474
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <_Calculate_GForce+0x130>)
 8001794:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8001798:	edc3 7a00 	vstr	s15, [r3]

	//update the index of cyclic buffor
	ctx.GForce_Buffor_Index++;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <_Calculate_GForce+0x130>)
 800179e:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 80017a2:	3301      	adds	r3, #1
 80017a4:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <_Calculate_GForce+0x130>)
 80017a6:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
	if(ctx.GForce_Buffor_Index == GForce_BufforSize)
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <_Calculate_GForce+0x130>)
 80017ac:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 80017b0:	2b64      	cmp	r3, #100	; 0x64
 80017b2:	d103      	bne.n	80017bc <_Calculate_GForce+0xf8>
		ctx.GForce_Buffor_Index = 0;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <_Calculate_GForce+0x130>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c

	//update local maximum
	if(ctx.GForce_Mean > ctx.GForce_LocalMax)
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <_Calculate_GForce+0x130>)
 80017be:	f203 4374 	addw	r3, r3, #1140	; 0x474
 80017c2:	ed93 7a00 	vldr	s14, [r3]
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <_Calculate_GForce+0x130>)
 80017c8:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d8:	dc00      	bgt.n	80017dc <_Calculate_GForce+0x118>
		ctx.GForce_LocalMax = ctx.GForce_Mean;
}
 80017da:	e007      	b.n	80017ec <_Calculate_GForce+0x128>
		ctx.GForce_LocalMax = ctx.GForce_Mean;
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <_Calculate_GForce+0x130>)
 80017de:	f203 4374 	addw	r3, r3, #1140	; 0x474
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <_Calculate_GForce+0x130>)
 80017e6:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 80017ea:	601a      	str	r2, [r3, #0]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	20000474 	.word	0x20000474

080017f8 <_Calculate_Position>:

void _Calculate_Position()
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
	//get latest read values from sensors
	const float gx = MPU_getGyroX_rads();
 80017fe:	f001 fc63 	bl	80030c8 <MPU_getGyroX_rads>
 8001802:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	const float gy = MPU_getGyroY_rads();
 8001806:	f001 fc6d 	bl	80030e4 <MPU_getGyroY_rads>
 800180a:	ed87 0a08 	vstr	s0, [r7, #32]
	const float gz = MPU_getGyroZ_rads();
 800180e:	f001 fc77 	bl	8003100 <MPU_getGyroZ_rads>
 8001812:	ed87 0a07 	vstr	s0, [r7, #28]

	const float ax = MPU_getAccelX_mss();
 8001816:	f001 fc2d 	bl	8003074 <MPU_getAccelX_mss>
 800181a:	ed87 0a06 	vstr	s0, [r7, #24]
	const float ay = MPU_getAccelY_mss();
 800181e:	f001 fc37 	bl	8003090 <MPU_getAccelY_mss>
 8001822:	ed87 0a05 	vstr	s0, [r7, #20]
	const float az = MPU_getAccelZ_mss();
 8001826:	f001 fc41 	bl	80030ac <MPU_getAccelZ_mss>
 800182a:	ed87 0a04 	vstr	s0, [r7, #16]

	const float mx = MPU_getMagX_uT();
 800182e:	f001 fc75 	bl	800311c <MPU_getMagX_uT>
 8001832:	ed87 0a03 	vstr	s0, [r7, #12]
	const float my = MPU_getMagY_uT();
 8001836:	f001 fc7f 	bl	8003138 <MPU_getMagY_uT>
 800183a:	ed87 0a02 	vstr	s0, [r7, #8]
	const float mz = MPU_getMagZ_uT();
 800183e:	f001 fc89 	bl	8003154 <MPU_getMagZ_uT>
 8001842:	ed87 0a01 	vstr	s0, [r7, #4]

	//try doing the filter 5-10 times for the same data for best results
	MadgwickAHRSupdate(gx, gy, gz, ax, ay, az, mx, my, mz);
 8001846:	ed97 4a01 	vldr	s8, [r7, #4]
 800184a:	edd7 3a02 	vldr	s7, [r7, #8]
 800184e:	ed97 3a03 	vldr	s6, [r7, #12]
 8001852:	edd7 2a04 	vldr	s5, [r7, #16]
 8001856:	ed97 2a05 	vldr	s4, [r7, #20]
 800185a:	edd7 1a06 	vldr	s3, [r7, #24]
 800185e:	ed97 1a07 	vldr	s2, [r7, #28]
 8001862:	edd7 0a08 	vldr	s1, [r7, #32]
 8001866:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800186a:	f001 ff19 	bl	80036a0 <MadgwickAHRSupdate>
	//+MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
	//MahonyAHRSupdate(gx, gy, gz, ax, ay, az, mx, my, mz);
	//MahonyAHRSupdateIMU(gx, gy, gz, ax, ay, az);
}
 800186e:	bf00      	nop
 8001870:	3728      	adds	r7, #40	; 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <_PosToRadians>:

void _PosToRadians()
{
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
	// roll (x-axis rotation)
	const float sinr_cosp = 2 * (_ahrs.q0 * _ahrs.q1 + _ahrs.q2 * _ahrs.q3);
 800187e:	4b7c      	ldr	r3, [pc, #496]	; (8001a70 <_PosToRadians+0x1f8>)
 8001880:	ed93 7a00 	vldr	s14, [r3]
 8001884:	4b7a      	ldr	r3, [pc, #488]	; (8001a70 <_PosToRadians+0x1f8>)
 8001886:	edd3 7a01 	vldr	s15, [r3, #4]
 800188a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800188e:	4b78      	ldr	r3, [pc, #480]	; (8001a70 <_PosToRadians+0x1f8>)
 8001890:	edd3 6a02 	vldr	s13, [r3, #8]
 8001894:	4b76      	ldr	r3, [pc, #472]	; (8001a70 <_PosToRadians+0x1f8>)
 8001896:	edd3 7a03 	vldr	s15, [r3, #12]
 800189a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018a6:	edc7 7a05 	vstr	s15, [r7, #20]
	const float cosr_cosp = 1 - 2 * (_ahrs.q1 * _ahrs.q1 + _ahrs.q2 * _ahrs.q2);
 80018aa:	4b71      	ldr	r3, [pc, #452]	; (8001a70 <_PosToRadians+0x1f8>)
 80018ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80018b0:	4b6f      	ldr	r3, [pc, #444]	; (8001a70 <_PosToRadians+0x1f8>)
 80018b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80018b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ba:	4b6d      	ldr	r3, [pc, #436]	; (8001a70 <_PosToRadians+0x1f8>)
 80018bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80018c0:	4b6b      	ldr	r3, [pc, #428]	; (8001a70 <_PosToRadians+0x1f8>)
 80018c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80018c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018da:	edc7 7a04 	vstr	s15, [r7, #16]
	ctx.PosX = atan2(sinr_cosp, cosr_cosp) * RadToDeg;
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7fe fe32 	bl	8000548 <__aeabi_f2d>
 80018e4:	4604      	mov	r4, r0
 80018e6:	460d      	mov	r5, r1
 80018e8:	6938      	ldr	r0, [r7, #16]
 80018ea:	f7fe fe2d 	bl	8000548 <__aeabi_f2d>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	ec43 2b11 	vmov	d1, r2, r3
 80018f6:	ec45 4b10 	vmov	d0, r4, r5
 80018fa:	f00b f847 	bl	800c98c <atan2>
 80018fe:	ec51 0b10 	vmov	r0, r1, d0
 8001902:	a359      	add	r3, pc, #356	; (adr r3, 8001a68 <_PosToRadians+0x1f0>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe76 	bl	80005f8 <__aeabi_dmul>
 800190c:	4603      	mov	r3, r0
 800190e:	460c      	mov	r4, r1
 8001910:	4618      	mov	r0, r3
 8001912:	4621      	mov	r1, r4
 8001914:	f7ff f968 	bl	8000be8 <__aeabi_d2f>
 8001918:	4602      	mov	r2, r0
 800191a:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <_PosToRadians+0x1fc>)
 800191c:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8001920:	601a      	str	r2, [r3, #0]

	// pitch (y-axis rotation)
	float sinp = 2 * (_ahrs.q0 * _ahrs.q2 - _ahrs.q3 * _ahrs.q1);
 8001922:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <_PosToRadians+0x1f8>)
 8001924:	ed93 7a00 	vldr	s14, [r3]
 8001928:	4b51      	ldr	r3, [pc, #324]	; (8001a70 <_PosToRadians+0x1f8>)
 800192a:	edd3 7a02 	vldr	s15, [r3, #8]
 800192e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001932:	4b4f      	ldr	r3, [pc, #316]	; (8001a70 <_PosToRadians+0x1f8>)
 8001934:	edd3 6a03 	vldr	s13, [r3, #12]
 8001938:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <_PosToRadians+0x1f8>)
 800193a:	edd3 7a01 	vldr	s15, [r3, #4]
 800193e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001946:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800194a:	edc7 7a03 	vstr	s15, [r7, #12]
	sinp = sinp > 1.0 ? 1.0 : sinp;
 800194e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001952:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	dd02      	ble.n	8001966 <_PosToRadians+0xee>
 8001960:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001964:	e000      	b.n	8001968 <_PosToRadians+0xf0>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	60fb      	str	r3, [r7, #12]
	sinp = sinp < -1.0 ? -1.0 : sinp;
 800196a:	edd7 7a03 	vldr	s15, [r7, #12]
 800196e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	d501      	bpl.n	8001980 <_PosToRadians+0x108>
 800197c:	4b3e      	ldr	r3, [pc, #248]	; (8001a78 <_PosToRadians+0x200>)
 800197e:	e000      	b.n	8001982 <_PosToRadians+0x10a>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	60fb      	str	r3, [r7, #12]
	ctx.PosY = asin(sinp) * RadToDeg;
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7fe fddf 	bl	8000548 <__aeabi_f2d>
 800198a:	4603      	mov	r3, r0
 800198c:	460c      	mov	r4, r1
 800198e:	ec44 3b10 	vmov	d0, r3, r4
 8001992:	f00a ffa3 	bl	800c8dc <asin>
 8001996:	ec51 0b10 	vmov	r0, r1, d0
 800199a:	a333      	add	r3, pc, #204	; (adr r3, 8001a68 <_PosToRadians+0x1f0>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7fe fe2a 	bl	80005f8 <__aeabi_dmul>
 80019a4:	4603      	mov	r3, r0
 80019a6:	460c      	mov	r4, r1
 80019a8:	4618      	mov	r0, r3
 80019aa:	4621      	mov	r1, r4
 80019ac:	f7ff f91c 	bl	8000be8 <__aeabi_d2f>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <_PosToRadians+0x1fc>)
 80019b4:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 80019b8:	601a      	str	r2, [r3, #0]

	// yaw (z-axis rotation)
	const float siny_cosp = 2 * (_ahrs.q0 * _ahrs.q3 + _ahrs.q1 * _ahrs.q2);
 80019ba:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <_PosToRadians+0x1f8>)
 80019bc:	ed93 7a00 	vldr	s14, [r3]
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <_PosToRadians+0x1f8>)
 80019c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80019c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ca:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <_PosToRadians+0x1f8>)
 80019cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <_PosToRadians+0x1f8>)
 80019d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80019d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019e2:	edc7 7a02 	vstr	s15, [r7, #8]
	const float cosy_cosp = 1 - 2 * (_ahrs.q2 * _ahrs.q2 + _ahrs.q3 * _ahrs.q3);
 80019e6:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <_PosToRadians+0x1f8>)
 80019e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80019ec:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <_PosToRadians+0x1f8>)
 80019ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80019f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f6:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <_PosToRadians+0x1f8>)
 80019f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80019fc:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <_PosToRadians+0x1f8>)
 80019fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a16:	edc7 7a01 	vstr	s15, [r7, #4]
	ctx.PosZ = atan2(siny_cosp, cosy_cosp) * RadToDeg;
 8001a1a:	68b8      	ldr	r0, [r7, #8]
 8001a1c:	f7fe fd94 	bl	8000548 <__aeabi_f2d>
 8001a20:	4604      	mov	r4, r0
 8001a22:	460d      	mov	r5, r1
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7fe fd8f 	bl	8000548 <__aeabi_f2d>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	ec43 2b11 	vmov	d1, r2, r3
 8001a32:	ec45 4b10 	vmov	d0, r4, r5
 8001a36:	f00a ffa9 	bl	800c98c <atan2>
 8001a3a:	ec51 0b10 	vmov	r0, r1, d0
 8001a3e:	a30a      	add	r3, pc, #40	; (adr r3, 8001a68 <_PosToRadians+0x1f0>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fdd8 	bl	80005f8 <__aeabi_dmul>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	460c      	mov	r4, r1
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	4621      	mov	r1, r4
 8001a50:	f7ff f8ca 	bl	8000be8 <__aeabi_d2f>
 8001a54:	4602      	mov	r2, r0
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <_PosToRadians+0x1fc>)
 8001a58:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001a5c:	601a      	str	r2, [r3, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bdb0      	pop	{r4, r5, r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	404ca5dc 	.word	0x404ca5dc
 8001a70:	20000dd8 	.word	0x20000dd8
 8001a74:	20000474 	.word	0x20000474
 8001a78:	bf800000 	.word	0xbf800000

08001a7c <_Calculate_Angle>:

//convert Madgwick Quanternians to Eulers x, y, z coordinates and calculate angle between base vector
void _Calculate_Angle()
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
	_PosToRadians();
 8001a82:	f7ff fef9 	bl	8001878 <_PosToRadians>
	//float pY = fabs(ctx.PosY);
	//pY = pY > 90.0f ? 180.0f - pY : pY;
	//float bY = fabs(ctx.BaseY);
	//bY = bY > 90.0f ? 180.0f - bY : bY;

	float pX = ctx.PosX;
 8001a86:	4b3d      	ldr	r3, [pc, #244]	; (8001b7c <_Calculate_Angle+0x100>)
 8001a88:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	617b      	str	r3, [r7, #20]
	float pY = ctx.PosY;
 8001a90:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <_Calculate_Angle+0x100>)
 8001a92:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	613b      	str	r3, [r7, #16]
	float bX = ctx.BaseX;
 8001a9a:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <_Calculate_Angle+0x100>)
 8001a9c:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	60fb      	str	r3, [r7, #12]
	float bY = ctx.BaseY;
 8001aa4:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <_Calculate_Angle+0x100>)
 8001aa6:	f203 6314 	addw	r3, r3, #1556	; 0x614
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60bb      	str	r3, [r7, #8]

	float pitch = fabs(bX - pX);
 8001aae:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ab2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aba:	eef0 7ae7 	vabs.f32	s15, s15
 8001abe:	edc7 7a01 	vstr	s15, [r7, #4]
	float roll = fabs(bY - pY);
 8001ac2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ac6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ace:	eef0 7ae7 	vabs.f32	s15, s15
 8001ad2:	edc7 7a00 	vstr	s15, [r7]

	pitch = pitch > 180.0 ? 360.0 - pitch : pitch;
 8001ad6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ada:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001b80 <_Calculate_Angle+0x104>
 8001ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae6:	dd13      	ble.n	8001b10 <_Calculate_Angle+0x94>
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7fe fd2d 	bl	8000548 <__aeabi_f2d>
 8001aee:	4603      	mov	r3, r0
 8001af0:	460c      	mov	r4, r1
 8001af2:	461a      	mov	r2, r3
 8001af4:	4623      	mov	r3, r4
 8001af6:	f04f 0000 	mov.w	r0, #0
 8001afa:	4922      	ldr	r1, [pc, #136]	; (8001b84 <_Calculate_Angle+0x108>)
 8001afc:	f7fe fbc4 	bl	8000288 <__aeabi_dsub>
 8001b00:	4603      	mov	r3, r0
 8001b02:	460c      	mov	r4, r1
 8001b04:	4618      	mov	r0, r3
 8001b06:	4621      	mov	r1, r4
 8001b08:	f7ff f86e 	bl	8000be8 <__aeabi_d2f>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	e000      	b.n	8001b12 <_Calculate_Angle+0x96>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	607b      	str	r3, [r7, #4]
	roll = roll > 90.0 ? 180.0 - roll : roll;
 8001b14:	edd7 7a00 	vldr	s15, [r7]
 8001b18:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001b88 <_Calculate_Angle+0x10c>
 8001b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	dd13      	ble.n	8001b4e <_Calculate_Angle+0xd2>
 8001b26:	6838      	ldr	r0, [r7, #0]
 8001b28:	f7fe fd0e 	bl	8000548 <__aeabi_f2d>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	460c      	mov	r4, r1
 8001b30:	461a      	mov	r2, r3
 8001b32:	4623      	mov	r3, r4
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	4914      	ldr	r1, [pc, #80]	; (8001b8c <_Calculate_Angle+0x110>)
 8001b3a:	f7fe fba5 	bl	8000288 <__aeabi_dsub>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460c      	mov	r4, r1
 8001b42:	4618      	mov	r0, r3
 8001b44:	4621      	mov	r1, r4
 8001b46:	f7ff f84f 	bl	8000be8 <__aeabi_d2f>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	e000      	b.n	8001b50 <_Calculate_Angle+0xd4>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	603b      	str	r3, [r7, #0]

	ctx.Angle = pitch > roll ? pitch : roll;
 8001b52:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b56:	edd7 7a00 	vldr	s15, [r7]
 8001b5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b62:	dd01      	ble.n	8001b68 <_Calculate_Angle+0xec>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	e000      	b.n	8001b6a <_Calculate_Angle+0xee>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <_Calculate_Angle+0x100>)
 8001b6c:	f202 622c 	addw	r2, r2, #1580	; 0x62c
 8001b70:	6013      	str	r3, [r2, #0]
}
 8001b72:	bf00      	nop
 8001b74:	371c      	adds	r7, #28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd90      	pop	{r4, r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000474 	.word	0x20000474
 8001b80:	43340000 	.word	0x43340000
 8001b84:	40768000 	.word	0x40768000
 8001b88:	42b40000 	.word	0x42b40000
 8001b8c:	40668000 	.word	0x40668000

08001b90 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba6:	4b58      	ldr	r3, [pc, #352]	; (8001d08 <MX_GPIO_Init+0x178>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4a57      	ldr	r2, [pc, #348]	; (8001d08 <MX_GPIO_Init+0x178>)
 8001bac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bb0:	6153      	str	r3, [r2, #20]
 8001bb2:	4b55      	ldr	r3, [pc, #340]	; (8001d08 <MX_GPIO_Init+0x178>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bbe:	4b52      	ldr	r3, [pc, #328]	; (8001d08 <MX_GPIO_Init+0x178>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	4a51      	ldr	r2, [pc, #324]	; (8001d08 <MX_GPIO_Init+0x178>)
 8001bc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bc8:	6153      	str	r3, [r2, #20]
 8001bca:	4b4f      	ldr	r3, [pc, #316]	; (8001d08 <MX_GPIO_Init+0x178>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	4b4c      	ldr	r3, [pc, #304]	; (8001d08 <MX_GPIO_Init+0x178>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	4a4b      	ldr	r2, [pc, #300]	; (8001d08 <MX_GPIO_Init+0x178>)
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	6153      	str	r3, [r2, #20]
 8001be2:	4b49      	ldr	r3, [pc, #292]	; (8001d08 <MX_GPIO_Init+0x178>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <MX_GPIO_Init+0x178>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	4a45      	ldr	r2, [pc, #276]	; (8001d08 <MX_GPIO_Init+0x178>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6153      	str	r3, [r2, #20]
 8001bfa:	4b43      	ldr	r3, [pc, #268]	; (8001d08 <MX_GPIO_Init+0x178>)
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c0c:	483f      	ldr	r0, [pc, #252]	; (8001d0c <MX_GPIO_Init+0x17c>)
 8001c0e:	f004 fa85 	bl	800611c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_MPU_Pin|CS_SD_Pin, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1c:	f004 fa7e 	bl	800611c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin|RES_Pin, GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2150      	movs	r1, #80	; 0x50
 8001c24:	483a      	ldr	r0, [pc, #232]	; (8001d10 <MX_GPIO_Init+0x180>)
 8001c26:	f004 fa79 	bl	800611c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c30:	2301      	movs	r3, #1
 8001c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	4832      	ldr	r0, [pc, #200]	; (8001d0c <MX_GPIO_Init+0x17c>)
 8001c44:	f004 f8f0 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c48:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	482b      	ldr	r0, [pc, #172]	; (8001d0c <MX_GPIO_Init+0x17c>)
 8001c5e:	f004 f8e3 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 
                           PA5 PA6 PA7 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001c62:	f649 43fe 	movw	r3, #40190	; 0x9cfe
 8001c66:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7a:	f004 f8d5 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12 
 8001c7e:	f241 3387 	movw	r3, #4999	; 0x1387
 8001c82:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c84:	2303      	movs	r3, #3
 8001c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4619      	mov	r1, r3
 8001c92:	481f      	ldr	r0, [pc, #124]	; (8001d10 <MX_GPIO_Init+0x180>)
 8001c94:	f004 f8c8 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_MODE_Pin|BTN_ADJUST_Pin;
 8001c98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <MX_GPIO_Init+0x184>)
 8001ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	4818      	ldr	r0, [pc, #96]	; (8001d10 <MX_GPIO_Init+0x180>)
 8001cae:	f004 f8bb 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_MPU_Pin|CS_SD_Pin;
 8001cb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cce:	f004 f8ab 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DC_Pin|RES_Pin;
 8001cd2:	2350      	movs	r3, #80	; 0x50
 8001cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4809      	ldr	r0, [pc, #36]	; (8001d10 <MX_GPIO_Init+0x180>)
 8001cea:	f004 f89d 	bl	8005e28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	2028      	movs	r0, #40	; 0x28
 8001cf4:	f004 f861 	bl	8005dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cf8:	2028      	movs	r0, #40	; 0x28
 8001cfa:	f004 f87a 	bl	8005df2 <HAL_NVIC_EnableIRQ>

}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	; 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	48000400 	.word	0x48000400
 8001d14:	10210000 	.word	0x10210000

08001d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d1c:	f003 feea 	bl	8005af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d20:	f000 f815 	bl	8001d4e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d24:	f7ff ff34 	bl	8001b90 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001d28:	f000 f8f6 	bl	8001f18 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001d2c:	f000 faa4 	bl	8002278 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001d30:	f000 f8b4 	bl	8001e9c <MX_SPI1_Init>
  MX_TIM3_Init();
 8001d34:	f000 fb16 	bl	8002364 <MX_TIM3_Init>
  MX_FATFS_Init();
 8001d38:	f007 fcb0 	bl	800969c <MX_FATFS_Init>
  MX_TIM4_Init();
 8001d3c:	f000 fb60 	bl	8002400 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001d40:	f000 fbac 	bl	800249c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /*	Initialize hardware		*/
  ProgramInit();
 8001d44:	f7fe ffa0 	bl	8000c88 <ProgramInit>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  AwaitForSignal();
 8001d48:	f7ff f80c 	bl	8000d64 <AwaitForSignal>
 8001d4c:	e7fc      	b.n	8001d48 <main+0x30>

08001d4e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b09e      	sub	sp, #120	; 0x78
 8001d52:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d58:	2228      	movs	r2, #40	; 0x28
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f00b fbf1 	bl	800d544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d72:	463b      	mov	r3, r7
 8001d74:	223c      	movs	r2, #60	; 0x3c
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f00b fbe3 	bl	800d544 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d86:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d90:	2302      	movs	r3, #2
 8001d92:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d98:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d9e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001da4:	4618      	mov	r0, r3
 8001da6:	f004 fa03 	bl	80061b0 <HAL_RCC_OscConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001db0:	f000 f86c 	bl	8001e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db4:	230f      	movs	r3, #15
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db8:	2302      	movs	r3, #2
 8001dba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dce:	2102      	movs	r1, #2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f005 f8f5 	bl	8006fc0 <HAL_RCC_ClockConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ddc:	f000 f856 	bl	8001e8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM8;
 8001de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dea:	463b      	mov	r3, r7
 8001dec:	4618      	mov	r0, r3
 8001dee:	f005 facd 	bl	800738c <HAL_RCCEx_PeriphCLKConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001df8:	f000 f848 	bl	8001e8c <Error_Handler>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3778      	adds	r7, #120	; 0x78
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_EXTI_Callback+0x1a>
 8001e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_EXTI_Callback+0x20>
		{
			SetToCalibrate();
			break;
		}

		default: break;
 8001e1c:	e005      	b.n	8001e2a <HAL_GPIO_EXTI_Callback+0x26>
			SetToChangeDisplayMode();
 8001e1e:	f7fe ffdb 	bl	8000dd8 <SetToChangeDisplayMode>
			break;
 8001e22:	e002      	b.n	8001e2a <HAL_GPIO_EXTI_Callback+0x26>
			SetToCalibrate();
 8001e24:	f7fe fff0 	bl	8000e08 <SetToCalibrate>
			break;
 8001e28:	bf00      	nop
	}
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	//get the new readings from sensors
	if(htim->Instance == TIM4)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d102      	bne.n	8001e4c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		//reading the data should be consistant so we need to do it here instead of setting flag
		ProcessValues();
 8001e46:	f7fe ffb3 	bl	8000db0 <ProcessValues>
		SetToSaveData();
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	}

	else {}
}
 8001e4a:	e013      	b.n	8001e74 <HAL_TIM_PeriodElapsedCallback+0x40>
	else if( htim->Instance == TIM3)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d102      	bne.n	8001e5c <HAL_TIM_PeriodElapsedCallback+0x28>
		SetToUpdateDisplay();
 8001e56:	f7fe ffcb 	bl	8000df0 <SetToUpdateDisplay>
}
 8001e5a:	e00b      	b.n	8001e74 <HAL_TIM_PeriodElapsedCallback+0x40>
	else if( htim->Instance == TIM8)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d106      	bne.n	8001e74 <HAL_TIM_PeriodElapsedCallback+0x40>
		SetToSaveData();
 8001e66:	f7fe ffdb 	bl	8000e20 <SetToSaveData>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001e6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e6e:	4806      	ldr	r0, [pc, #24]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001e70:	f004 f96c 	bl	800614c <HAL_GPIO_TogglePin>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40000800 	.word	0x40000800
 8001e80:	40000400 	.word	0x40000400
 8001e84:	40013400 	.word	0x40013400
 8001e88:	48000800 	.word	0x48000800

08001e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <MX_SPI1_Init+0x74>)
 8001ea2:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <MX_SPI1_Init+0x78>)
 8001ea4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <MX_SPI1_Init+0x74>)
 8001ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eae:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <MX_SPI1_Init+0x74>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <MX_SPI1_Init+0x74>)
 8001eb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001eba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <MX_SPI1_Init+0x74>)
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <MX_SPI1_Init+0x74>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <MX_SPI1_Init+0x74>)
 8001eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ece:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <MX_SPI1_Init+0x74>)
 8001ed2:	2210      	movs	r2, #16
 8001ed4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <MX_SPI1_Init+0x74>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <MX_SPI1_Init+0x74>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <MX_SPI1_Init+0x74>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <MX_SPI1_Init+0x74>)
 8001eea:	2207      	movs	r2, #7
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <MX_SPI1_Init+0x74>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <MX_SPI1_Init+0x74>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001efa:	4805      	ldr	r0, [pc, #20]	; (8001f10 <MX_SPI1_Init+0x74>)
 8001efc:	f005 fbf6 	bl	80076ec <HAL_SPI_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f06:	f7ff ffc1 	bl	8001e8c <Error_Handler>
  }

}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000b10 	.word	0x20000b10
 8001f14:	40013000 	.word	0x40013000

08001f18 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <MX_SPI2_Init+0x74>)
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <MX_SPI2_Init+0x78>)
 8001f20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <MX_SPI2_Init+0x74>)
 8001f24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <MX_SPI2_Init+0x74>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <MX_SPI2_Init+0x74>)
 8001f32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f36:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <MX_SPI2_Init+0x74>)
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <MX_SPI2_Init+0x74>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <MX_SPI2_Init+0x74>)
 8001f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <MX_SPI2_Init+0x74>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <MX_SPI2_Init+0x74>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <MX_SPI2_Init+0x74>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <MX_SPI2_Init+0x74>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <MX_SPI2_Init+0x74>)
 8001f66:	2207      	movs	r2, #7
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <MX_SPI2_Init+0x74>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <MX_SPI2_Init+0x74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f76:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_SPI2_Init+0x74>)
 8001f78:	f005 fbb8 	bl	80076ec <HAL_SPI_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001f82:	f7ff ff83 	bl	8001e8c <Error_Handler>
  }

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000aac 	.word	0x20000aac
 8001f90:	40003800 	.word	0x40003800

08001f94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08c      	sub	sp, #48	; 0x30
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2e      	ldr	r2, [pc, #184]	; (800206c <HAL_SPI_MspInit+0xd8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d128      	bne.n	8002008 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <HAL_SPI_MspInit+0xdc>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	4a2d      	ldr	r2, [pc, #180]	; (8002070 <HAL_SPI_MspInit+0xdc>)
 8001fbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fc0:	6193      	str	r3, [r2, #24]
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <HAL_SPI_MspInit+0xdc>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_SPI_MspInit+0xdc>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	4a27      	ldr	r2, [pc, #156]	; (8002070 <HAL_SPI_MspInit+0xdc>)
 8001fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd8:	6153      	str	r3, [r2, #20]
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <HAL_SPI_MspInit+0xdc>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001fe6:	2328      	movs	r3, #40	; 0x28
 8001fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ff6:	2305      	movs	r3, #5
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffa:	f107 031c 	add.w	r3, r7, #28
 8001ffe:	4619      	mov	r1, r3
 8002000:	481c      	ldr	r0, [pc, #112]	; (8002074 <HAL_SPI_MspInit+0xe0>)
 8002002:	f003 ff11 	bl	8005e28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002006:	e02d      	b.n	8002064 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1a      	ldr	r2, [pc, #104]	; (8002078 <HAL_SPI_MspInit+0xe4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d128      	bne.n	8002064 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <HAL_SPI_MspInit+0xdc>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4a16      	ldr	r2, [pc, #88]	; (8002070 <HAL_SPI_MspInit+0xdc>)
 8002018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201c:	61d3      	str	r3, [r2, #28]
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_SPI_MspInit+0xdc>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_SPI_MspInit+0xdc>)
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	4a10      	ldr	r2, [pc, #64]	; (8002070 <HAL_SPI_MspInit+0xdc>)
 8002030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002034:	6153      	str	r3, [r2, #20]
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_SPI_MspInit+0xdc>)
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002042:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002054:	2305      	movs	r3, #5
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	4619      	mov	r1, r3
 800205e:	4805      	ldr	r0, [pc, #20]	; (8002074 <HAL_SPI_MspInit+0xe0>)
 8002060:	f003 fee2 	bl	8005e28 <HAL_GPIO_Init>
}
 8002064:	bf00      	nop
 8002066:	3730      	adds	r7, #48	; 0x30
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40013000 	.word	0x40013000
 8002070:	40021000 	.word	0x40021000
 8002074:	48000400 	.word	0x48000400
 8002078:	40003800 	.word	0x40003800

0800207c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_MspInit+0x88>)
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	4a1f      	ldr	r2, [pc, #124]	; (8002104 <HAL_MspInit+0x88>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6193      	str	r3, [r2, #24]
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_MspInit+0x88>)
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <HAL_MspInit+0x88>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a19      	ldr	r2, [pc, #100]	; (8002104 <HAL_MspInit+0x88>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	61d3      	str	r3, [r2, #28]
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <HAL_MspInit+0x88>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 2, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2102      	movs	r1, #2
 80020b6:	f06f 000b 	mvn.w	r0, #11
 80020ba:	f003 fe7e 	bl	8005dba <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2102      	movs	r1, #2
 80020c2:	f06f 000a 	mvn.w	r0, #10
 80020c6:	f003 fe78 	bl	8005dba <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 2, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2102      	movs	r1, #2
 80020ce:	f06f 0009 	mvn.w	r0, #9
 80020d2:	f003 fe72 	bl	8005dba <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2102      	movs	r1, #2
 80020da:	f06f 0004 	mvn.w	r0, #4
 80020de:	f003 fe6c 	bl	8005dba <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 2, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2102      	movs	r1, #2
 80020e6:	f06f 0003 	mvn.w	r0, #3
 80020ea:	f003 fe66 	bl	8005dba <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2102      	movs	r1, #2
 80020f2:	f06f 0001 	mvn.w	r0, #1
 80020f6:	f003 fe60 	bl	8005dba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000

08002108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800211a:	e7fe      	b.n	800211a <HardFault_Handler+0x4>

0800211c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <MemManage_Handler+0x4>

08002122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002126:	e7fe      	b.n	8002126 <BusFault_Handler+0x4>

08002128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800212c:	e7fe      	b.n	800212c <UsageFault_Handler+0x4>

0800212e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	//	FatFsCnt = 0;
	//	SDTimer_Handler();
	//}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215c:	f003 fd10 	bl	8005b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}

08002164 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <TIM3_IRQHandler+0x10>)
 800216a:	f006 fab9 	bl	80086e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000bf4 	.word	0x20000bf4

08002178 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <TIM4_IRQHandler+0x10>)
 800217e:	f006 faaf 	bl	80086e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000bb4 	.word	0x20000bb4

0800218c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002190:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002194:	f003 fff4 	bl	8006180 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002198:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800219c:	f003 fff0 	bl	8006180 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break global interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <TIM8_BRK_IRQHandler+0x10>)
 80021aa:	f006 fa99 	bl	80086e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000b74 	.word	0x20000b74

080021b8 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <TIM8_UP_IRQHandler+0x10>)
 80021be:	f006 fa8f 	bl	80086e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000b74 	.word	0x20000b74

080021cc <TIM8_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger com interrupt.
  */
void TIM8_TRG_COM_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <TIM8_TRG_COM_IRQHandler+0x10>)
 80021d2:	f006 fa85 	bl	80086e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000b74 	.word	0x20000b74

080021e0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <TIM8_CC_IRQHandler+0x10>)
 80021e6:	f006 fa7b 	bl	80086e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000b74 	.word	0x20000b74

080021f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <_sbrk+0x50>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d102      	bne.n	800220a <_sbrk+0x16>
		heap_end = &end;
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <_sbrk+0x50>)
 8002206:	4a10      	ldr	r2, [pc, #64]	; (8002248 <_sbrk+0x54>)
 8002208:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <_sbrk+0x50>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <_sbrk+0x50>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	466a      	mov	r2, sp
 800221a:	4293      	cmp	r3, r2
 800221c:	d907      	bls.n	800222e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800221e:	f00b f967 	bl	800d4f0 <__errno>
 8002222:	4602      	mov	r2, r0
 8002224:	230c      	movs	r3, #12
 8002226:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002228:	f04f 33ff 	mov.w	r3, #4294967295
 800222c:	e006      	b.n	800223c <_sbrk+0x48>
	}

	heap_end += incr;
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <_sbrk+0x50>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	4a03      	ldr	r2, [pc, #12]	; (8002244 <_sbrk+0x50>)
 8002238:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800223a:	68fb      	ldr	r3, [r7, #12]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000234 	.word	0x20000234
 8002248:	20001278 	.word	0x20001278

0800224c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <SystemInit+0x28>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	4a07      	ldr	r2, [pc, #28]	; (8002274 <SystemInit+0x28>)
 8002258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800225c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <SystemInit+0x28>)
 8002262:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002266:	609a      	str	r2, [r3, #8]
#endif
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08e      	sub	sp, #56	; 0x38
 800227c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800227e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002298:	463b      	mov	r3, r7
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]
 80022a6:	615a      	str	r2, [r3, #20]
 80022a8:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <MX_TIM2_Init+0xe8>)
 80022ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 580;
 80022b2:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <MX_TIM2_Init+0xe8>)
 80022b4:	f44f 7211 	mov.w	r2, #580	; 0x244
 80022b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <MX_TIM2_Init+0xe8>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <MX_TIM2_Init+0xe8>)
 80022c2:	22ff      	movs	r2, #255	; 0xff
 80022c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c6:	4b26      	ldr	r3, [pc, #152]	; (8002360 <MX_TIM2_Init+0xe8>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <MX_TIM2_Init+0xe8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022d2:	4823      	ldr	r0, [pc, #140]	; (8002360 <MX_TIM2_Init+0xe8>)
 80022d4:	f006 f8b2 	bl	800843c <HAL_TIM_Base_Init>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80022de:	f7ff fdd5 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ec:	4619      	mov	r1, r3
 80022ee:	481c      	ldr	r0, [pc, #112]	; (8002360 <MX_TIM2_Init+0xe8>)
 80022f0:	f006 fc2e 	bl	8008b50 <HAL_TIM_ConfigClockSource>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80022fa:	f7ff fdc7 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022fe:	4818      	ldr	r0, [pc, #96]	; (8002360 <MX_TIM2_Init+0xe8>)
 8002300:	f006 f8f2 	bl	80084e8 <HAL_TIM_PWM_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800230a:	f7ff fdbf 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002316:	f107 031c 	add.w	r3, r7, #28
 800231a:	4619      	mov	r1, r3
 800231c:	4810      	ldr	r0, [pc, #64]	; (8002360 <MX_TIM2_Init+0xe8>)
 800231e:	f007 f91f 	bl	8009560 <HAL_TIMEx_MasterConfigSynchronization>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002328:	f7ff fdb0 	bl	8001e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800232c:	2360      	movs	r3, #96	; 0x60
 800232e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800233c:	463b      	mov	r3, r7
 800233e:	2200      	movs	r2, #0
 8002340:	4619      	mov	r1, r3
 8002342:	4807      	ldr	r0, [pc, #28]	; (8002360 <MX_TIM2_Init+0xe8>)
 8002344:	f006 faec 	bl	8008920 <HAL_TIM_PWM_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800234e:	f7ff fd9d 	bl	8001e8c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002352:	4803      	ldr	r0, [pc, #12]	; (8002360 <MX_TIM2_Init+0xe8>)
 8002354:	f000 f97e 	bl	8002654 <HAL_TIM_MspPostInit>

}
 8002358:	bf00      	nop
 800235a:	3738      	adds	r7, #56	; 0x38
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000c34 	.word	0x20000c34

08002364 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236a:	f107 0310 	add.w	r3, r7, #16
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <MX_TIM3_Init+0x94>)
 8002384:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <MX_TIM3_Init+0x98>)
 8002386:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000-1;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <MX_TIM3_Init+0x94>)
 800238a:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800238e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <MX_TIM3_Init+0x94>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2*(50)-1;
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <MX_TIM3_Init+0x94>)
 8002398:	2263      	movs	r2, #99	; 0x63
 800239a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <MX_TIM3_Init+0x94>)
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <MX_TIM3_Init+0x94>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023a8:	4813      	ldr	r0, [pc, #76]	; (80023f8 <MX_TIM3_Init+0x94>)
 80023aa:	f006 f847 	bl	800843c <HAL_TIM_Base_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80023b4:	f7ff fd6a 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023be:	f107 0310 	add.w	r3, r7, #16
 80023c2:	4619      	mov	r1, r3
 80023c4:	480c      	ldr	r0, [pc, #48]	; (80023f8 <MX_TIM3_Init+0x94>)
 80023c6:	f006 fbc3 	bl	8008b50 <HAL_TIM_ConfigClockSource>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80023d0:	f7ff fd5c 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d4:	2300      	movs	r3, #0
 80023d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	4619      	mov	r1, r3
 80023e0:	4805      	ldr	r0, [pc, #20]	; (80023f8 <MX_TIM3_Init+0x94>)
 80023e2:	f007 f8bd 	bl	8009560 <HAL_TIMEx_MasterConfigSynchronization>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80023ec:	f7ff fd4e 	bl	8001e8c <Error_Handler>
  }

}
 80023f0:	bf00      	nop
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000bf4 	.word	0x20000bf4
 80023fc:	40000400 	.word	0x40000400

08002400 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002406:	f107 0310 	add.w	r3, r7, #16
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <MX_TIM4_Init+0x94>)
 8002420:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <MX_TIM4_Init+0x98>)
 8002422:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <MX_TIM4_Init+0x94>)
 8002426:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800242a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <MX_TIM4_Init+0x94>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2*(2)-1;
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <MX_TIM4_Init+0x94>)
 8002434:	2203      	movs	r2, #3
 8002436:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <MX_TIM4_Init+0x94>)
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243e:	4b15      	ldr	r3, [pc, #84]	; (8002494 <MX_TIM4_Init+0x94>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002444:	4813      	ldr	r0, [pc, #76]	; (8002494 <MX_TIM4_Init+0x94>)
 8002446:	f005 fff9 	bl	800843c <HAL_TIM_Base_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002450:	f7ff fd1c 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002458:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800245a:	f107 0310 	add.w	r3, r7, #16
 800245e:	4619      	mov	r1, r3
 8002460:	480c      	ldr	r0, [pc, #48]	; (8002494 <MX_TIM4_Init+0x94>)
 8002462:	f006 fb75 	bl	8008b50 <HAL_TIM_ConfigClockSource>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800246c:	f7ff fd0e 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002470:	2300      	movs	r3, #0
 8002472:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	4619      	mov	r1, r3
 800247c:	4805      	ldr	r0, [pc, #20]	; (8002494 <MX_TIM4_Init+0x94>)
 800247e:	f007 f86f 	bl	8009560 <HAL_TIMEx_MasterConfigSynchronization>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002488:	f7ff fd00 	bl	8001e8c <Error_Handler>
  }

}
 800248c:	bf00      	nop
 800248e:	3720      	adds	r7, #32
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000bb4 	.word	0x20000bb4
 8002498:	40000800 	.word	0x40000800

0800249c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024a2:	f107 0310 	add.w	r3, r7, #16
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]

  htim8.Instance = TIM8;
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <MX_TIM8_Init+0xa0>)
 80024bc:	4a20      	ldr	r2, [pc, #128]	; (8002540 <MX_TIM8_Init+0xa4>)
 80024be:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 36000-1;
 80024c0:	4b1e      	ldr	r3, [pc, #120]	; (800253c <MX_TIM8_Init+0xa0>)
 80024c2:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80024c6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c8:	4b1c      	ldr	r3, [pc, #112]	; (800253c <MX_TIM8_Init+0xa0>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2*(1000)-1;
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <MX_TIM8_Init+0xa0>)
 80024d0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80024d4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <MX_TIM8_Init+0xa0>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <MX_TIM8_Init+0xa0>)
 80024de:	2200      	movs	r2, #0
 80024e0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <MX_TIM8_Init+0xa0>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80024e8:	4814      	ldr	r0, [pc, #80]	; (800253c <MX_TIM8_Init+0xa0>)
 80024ea:	f005 ffa7 	bl	800843c <HAL_TIM_Base_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 80024f4:	f7ff fcca 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80024fe:	f107 0310 	add.w	r3, r7, #16
 8002502:	4619      	mov	r1, r3
 8002504:	480d      	ldr	r0, [pc, #52]	; (800253c <MX_TIM8_Init+0xa0>)
 8002506:	f006 fb23 	bl	8008b50 <HAL_TIM_ConfigClockSource>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8002510:	f7ff fcbc 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002514:	2300      	movs	r3, #0
 8002516:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002518:	2300      	movs	r3, #0
 800251a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	4619      	mov	r1, r3
 8002524:	4805      	ldr	r0, [pc, #20]	; (800253c <MX_TIM8_Init+0xa0>)
 8002526:	f007 f81b 	bl	8009560 <HAL_TIMEx_MasterConfigSynchronization>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002530:	f7ff fcac 	bl	8001e8c <Error_Handler>
  }

}
 8002534:	bf00      	nop
 8002536:	3720      	adds	r7, #32
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000b74 	.word	0x20000b74
 8002540:	40013400 	.word	0x40013400

08002544 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002554:	d10c      	bne.n	8002570 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002556:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <HAL_TIM_Base_MspInit+0x100>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a3a      	ldr	r2, [pc, #232]	; (8002644 <HAL_TIM_Base_MspInit+0x100>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	61d3      	str	r3, [r2, #28]
 8002562:	4b38      	ldr	r3, [pc, #224]	; (8002644 <HAL_TIM_Base_MspInit+0x100>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800256e:	e064      	b.n	800263a <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM3)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a34      	ldr	r2, [pc, #208]	; (8002648 <HAL_TIM_Base_MspInit+0x104>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d114      	bne.n	80025a4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800257a:	4b32      	ldr	r3, [pc, #200]	; (8002644 <HAL_TIM_Base_MspInit+0x100>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4a31      	ldr	r2, [pc, #196]	; (8002644 <HAL_TIM_Base_MspInit+0x100>)
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	61d3      	str	r3, [r2, #28]
 8002586:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <HAL_TIM_Base_MspInit+0x100>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	201d      	movs	r0, #29
 8002598:	f003 fc0f 	bl	8005dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800259c:	201d      	movs	r0, #29
 800259e:	f003 fc28 	bl	8005df2 <HAL_NVIC_EnableIRQ>
}
 80025a2:	e04a      	b.n	800263a <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM4)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a28      	ldr	r2, [pc, #160]	; (800264c <HAL_TIM_Base_MspInit+0x108>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d114      	bne.n	80025d8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025ae:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_TIM_Base_MspInit+0x100>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	4a24      	ldr	r2, [pc, #144]	; (8002644 <HAL_TIM_Base_MspInit+0x100>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	61d3      	str	r3, [r2, #28]
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <HAL_TIM_Base_MspInit+0x100>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2100      	movs	r1, #0
 80025ca:	201e      	movs	r0, #30
 80025cc:	f003 fbf5 	bl	8005dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025d0:	201e      	movs	r0, #30
 80025d2:	f003 fc0e 	bl	8005df2 <HAL_NVIC_EnableIRQ>
}
 80025d6:	e030      	b.n	800263a <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM8)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1c      	ldr	r2, [pc, #112]	; (8002650 <HAL_TIM_Base_MspInit+0x10c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d12b      	bne.n	800263a <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025e2:	4b18      	ldr	r3, [pc, #96]	; (8002644 <HAL_TIM_Base_MspInit+0x100>)
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	4a17      	ldr	r2, [pc, #92]	; (8002644 <HAL_TIM_Base_MspInit+0x100>)
 80025e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025ec:	6193      	str	r3, [r2, #24]
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <HAL_TIM_Base_MspInit+0x100>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	202b      	movs	r0, #43	; 0x2b
 8002600:	f003 fbdb 	bl	8005dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 8002604:	202b      	movs	r0, #43	; 0x2b
 8002606:	f003 fbf4 	bl	8005df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	202c      	movs	r0, #44	; 0x2c
 8002610:	f003 fbd3 	bl	8005dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8002614:	202c      	movs	r0, #44	; 0x2c
 8002616:	f003 fbec 	bl	8005df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	202d      	movs	r0, #45	; 0x2d
 8002620:	f003 fbcb 	bl	8005dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_IRQn);
 8002624:	202d      	movs	r0, #45	; 0x2d
 8002626:	f003 fbe4 	bl	8005df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	202e      	movs	r0, #46	; 0x2e
 8002630:	f003 fbc3 	bl	8005dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002634:	202e      	movs	r0, #46	; 0x2e
 8002636:	f003 fbdc 	bl	8005df2 <HAL_NVIC_EnableIRQ>
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	40000400 	.word	0x40000400
 800264c:	40000800 	.word	0x40000800
 8002650:	40013400 	.word	0x40013400

08002654 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 030c 	add.w	r3, r7, #12
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002674:	d11c      	bne.n	80026b0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <HAL_TIM_MspPostInit+0x64>)
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	4a0f      	ldr	r2, [pc, #60]	; (80026b8 <HAL_TIM_MspPostInit+0x64>)
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	6153      	str	r3, [r2, #20]
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <HAL_TIM_MspPostInit+0x64>)
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800268e:	2301      	movs	r3, #1
 8002690:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800269e:	2301      	movs	r3, #1
 80026a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80026a2:	f107 030c 	add.w	r3, r7, #12
 80026a6:	4619      	mov	r1, r3
 80026a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ac:	f003 fbbc 	bl	8005e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80026b0:	bf00      	nop
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000

080026bc <MPU_Init>:

	//volatile MPU_TypeDef MPUType;
MPU_TypeDef MPUType;

void MPU_Init()
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
	MPUType.SPI_READ = 0x80;
 80026c0:	4b25      	ldr	r3, [pc, #148]	; (8002758 <MPU_Init+0x9c>)
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	701a      	strb	r2, [r3, #0]
	MPUType.SPI_LS_CLOCK = 1000000;
 80026c6:	4b24      	ldr	r3, [pc, #144]	; (8002758 <MPU_Init+0x9c>)
 80026c8:	4a24      	ldr	r2, [pc, #144]	; (800275c <MPU_Init+0xa0>)
 80026ca:	605a      	str	r2, [r3, #4]
	MPUType.SPI_HS_CLOCK = 1500000;
 80026cc:	4b22      	ldr	r3, [pc, #136]	; (8002758 <MPU_Init+0x9c>)
 80026ce:	4a24      	ldr	r2, [pc, #144]	; (8002760 <MPU_Init+0xa4>)
 80026d0:	609a      	str	r2, [r3, #8]

	MPUType._tempScale = 333.87f;
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <MPU_Init+0x9c>)
 80026d4:	4a23      	ldr	r2, [pc, #140]	; (8002764 <MPU_Init+0xa8>)
 80026d6:	67da      	str	r2, [r3, #124]	; 0x7c
	MPUType._tempOffset = 21.0f;
 80026d8:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <MPU_Init+0x9c>)
 80026da:	4a23      	ldr	r2, [pc, #140]	; (8002768 <MPU_Init+0xac>)
 80026dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	MPUType._numSamples = 100;
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <MPU_Init+0x9c>)
 80026e2:	2264      	movs	r2, #100	; 0x64
 80026e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	MPUType._axs = 1.0f;
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <MPU_Init+0x9c>)
 80026ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026ee:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	MPUType._ays = 1.0f;
 80026f2:	4b19      	ldr	r3, [pc, #100]	; (8002758 <MPU_Init+0x9c>)
 80026f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026f8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	MPUType._azs = 1.0f;
 80026fc:	4b16      	ldr	r3, [pc, #88]	; (8002758 <MPU_Init+0x9c>)
 80026fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002702:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	MPUType._maxCounts = 1000;
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <MPU_Init+0x9c>)
 8002708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800270c:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	MPUType._deltaThresh = 0.3f;
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <MPU_Init+0x9c>)
 8002712:	4a16      	ldr	r2, [pc, #88]	; (800276c <MPU_Init+0xb0>)
 8002714:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	MPUType._coeff = 8;
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <MPU_Init+0x9c>)
 800271a:	2208      	movs	r2, #8
 800271c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

	MPUType._hxs = 1.0f;
 8002720:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <MPU_Init+0x9c>)
 8002722:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002726:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	MPUType._hys = 1.0f;
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <MPU_Init+0x9c>)
 800272c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002730:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	MPUType._hzs = 1.0f;
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <MPU_Init+0x9c>)
 8002736:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800273a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

	//MPUType.tX[0] = 0; MPUType.tX[1] = 1; MPUType.tX[2] = 0;
	//MPUType.tY[0] = 1; MPUType.tY[1] = 0; MPUType.tY[2] = 0;
	//MPUType.tZ[0] = 0; MPUType.tZ[1] = 0; MPUType.tZ[2] = -1;

	MPUType.G = 9.807f;
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <MPU_Init+0x9c>)
 8002740:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <MPU_Init+0xb4>)
 8002742:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	MPUType._d2r = 3.14159265359f/180.0f;
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <MPU_Init+0x9c>)
 8002748:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <MPU_Init+0xb8>)
 800274a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	20000c78 	.word	0x20000c78
 800275c:	000f4240 	.word	0x000f4240
 8002760:	0016e360 	.word	0x0016e360
 8002764:	43a6ef5c 	.word	0x43a6ef5c
 8002768:	41a80000 	.word	0x41a80000
 800276c:	3e99999a 	.word	0x3e99999a
 8002770:	411ce979 	.word	0x411ce979
 8002774:	3c8efa35 	.word	0x3c8efa35

08002778 <MPU_begin>:


/* starts communication with the MPU-9250 */
int MPU_begin()
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0

  // select clock source to gyro
  if(_MPU_writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
 800277c:	2101      	movs	r1, #1
 800277e:	206b      	movs	r0, #107	; 0x6b
 8002780:	f000 fe3a 	bl	80033f8 <_MPU_writeRegister>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	da02      	bge.n	8002790 <MPU_begin+0x18>
    return -1;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	e15e      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  // enable I2C master mode
  if(_MPU_writeRegister(USER_CTRL,I2C_MST_EN) < 0){
 8002790:	2120      	movs	r1, #32
 8002792:	206a      	movs	r0, #106	; 0x6a
 8002794:	f000 fe30 	bl	80033f8 <_MPU_writeRegister>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	da02      	bge.n	80027a4 <MPU_begin+0x2c>
    return -2;
 800279e:	f06f 0301 	mvn.w	r3, #1
 80027a2:	e154      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  // set the I2C bus speed to 400 kHz
  if(_MPU_writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
 80027a4:	210d      	movs	r1, #13
 80027a6:	2024      	movs	r0, #36	; 0x24
 80027a8:	f000 fe26 	bl	80033f8 <_MPU_writeRegister>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	da02      	bge.n	80027b8 <MPU_begin+0x40>
    return -3;
 80027b2:	f06f 0302 	mvn.w	r3, #2
 80027b6:	e14a      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  // set AK8963 to Power Down
  _MPU_writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80027b8:	2100      	movs	r1, #0
 80027ba:	200a      	movs	r0, #10
 80027bc:	f000 fe7c 	bl	80034b8 <_MPU_writeAK8963Register>
  // reset the MPU9250
  _MPU_writeRegister(PWR_MGMNT_1,PWR_RESET);
 80027c0:	2180      	movs	r1, #128	; 0x80
 80027c2:	206b      	movs	r0, #107	; 0x6b
 80027c4:	f000 fe18 	bl	80033f8 <_MPU_writeRegister>
  // wait for MPU-9250 to come back up
  HAL_Delay(1);
 80027c8:	2001      	movs	r0, #1
 80027ca:	f003 f9f9 	bl	8005bc0 <HAL_Delay>
  // reset the AK8963
  _MPU_writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 80027ce:	2101      	movs	r1, #1
 80027d0:	200b      	movs	r0, #11
 80027d2:	f000 fe71 	bl	80034b8 <_MPU_writeAK8963Register>
  // select clock source to gyro
  if(_MPU_writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
 80027d6:	2101      	movs	r1, #1
 80027d8:	206b      	movs	r0, #107	; 0x6b
 80027da:	f000 fe0d 	bl	80033f8 <_MPU_writeRegister>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	da02      	bge.n	80027ea <MPU_begin+0x72>
    return -4;
 80027e4:	f06f 0303 	mvn.w	r3, #3
 80027e8:	e131      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  // check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
  if((_MPU_whoAmI() != 113)&&(_MPU_whoAmI() != 115)){
 80027ea:	f000 fef5 	bl	80035d8 <_MPU_whoAmI>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b71      	cmp	r3, #113	; 0x71
 80027f2:	d007      	beq.n	8002804 <MPU_begin+0x8c>
 80027f4:	f000 fef0 	bl	80035d8 <_MPU_whoAmI>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b73      	cmp	r3, #115	; 0x73
 80027fc:	d002      	beq.n	8002804 <MPU_begin+0x8c>
    return -5;
 80027fe:	f06f 0304 	mvn.w	r3, #4
 8002802:	e124      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  // enable accelerometer and gyro
  if(_MPU_writeRegister(PWR_MGMNT_2,SEN_ENABLE) < 0){
 8002804:	2100      	movs	r1, #0
 8002806:	206c      	movs	r0, #108	; 0x6c
 8002808:	f000 fdf6 	bl	80033f8 <_MPU_writeRegister>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	da02      	bge.n	8002818 <MPU_begin+0xa0>
    return -6;
 8002812:	f06f 0305 	mvn.w	r3, #5
 8002816:	e11a      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  // setting accel range to 16G as default
  if(_MPU_writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G) < 0){
 8002818:	2118      	movs	r1, #24
 800281a:	201c      	movs	r0, #28
 800281c:	f000 fdec 	bl	80033f8 <_MPU_writeRegister>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	da02      	bge.n	800282c <MPU_begin+0xb4>
    return -7;
 8002826:	f06f 0306 	mvn.w	r3, #6
 800282a:	e110      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  MPUType._accelScale = MPUType.G * 16.0f/32767.5f; // setting the accel scale to 16G
 800282c:	4b89      	ldr	r3, [pc, #548]	; (8002a54 <MPU_begin+0x2dc>)
 800282e:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8002832:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002836:	ee27 7a87 	vmul.f32	s14, s15, s14
 800283a:	eddf 6a87 	vldr	s13, [pc, #540]	; 8002a58 <MPU_begin+0x2e0>
 800283e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002842:	4b84      	ldr	r3, [pc, #528]	; (8002a54 <MPU_begin+0x2dc>)
 8002844:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
  MPUType._accelRange = ACCEL_RANGE_16G;
 8002848:	4b82      	ldr	r3, [pc, #520]	; (8002a54 <MPU_begin+0x2dc>)
 800284a:	2203      	movs	r2, #3
 800284c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  // setting the gyro range to 2000DPS as default
  if(_MPU_writeRegister(GYRO_CONFIG,GYRO_FS_SEL_2000DPS) < 0){
 8002850:	2118      	movs	r1, #24
 8002852:	201b      	movs	r0, #27
 8002854:	f000 fdd0 	bl	80033f8 <_MPU_writeRegister>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	da02      	bge.n	8002864 <MPU_begin+0xec>
    return -8;
 800285e:	f06f 0307 	mvn.w	r3, #7
 8002862:	e0f4      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  MPUType._gyroScale = 2000.0f/32767.5f * MPUType._d2r; // setting the gyro scale to 2000DPS
 8002864:	4b7b      	ldr	r3, [pc, #492]	; (8002a54 <MPU_begin+0x2dc>)
 8002866:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 800286a:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002a5c <MPU_begin+0x2e4>
 800286e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002872:	4b78      	ldr	r3, [pc, #480]	; (8002a54 <MPU_begin+0x2dc>)
 8002874:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
  MPUType._gyroRange = GYRO_RANGE_2000DPS;
 8002878:	4b76      	ldr	r3, [pc, #472]	; (8002a54 <MPU_begin+0x2dc>)
 800287a:	2203      	movs	r2, #3
 800287c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  // setting bandwidth to 184Hz as default
  if(_MPU_writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_184) < 0){
 8002880:	2101      	movs	r1, #1
 8002882:	201d      	movs	r0, #29
 8002884:	f000 fdb8 	bl	80033f8 <_MPU_writeRegister>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	da02      	bge.n	8002894 <MPU_begin+0x11c>
    return -9;
 800288e:	f06f 0308 	mvn.w	r3, #8
 8002892:	e0dc      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  if(_MPU_writeRegister(CONFIG,GYRO_DLPF_184) < 0){ // setting gyro bandwidth to 184Hz
 8002894:	2101      	movs	r1, #1
 8002896:	201a      	movs	r0, #26
 8002898:	f000 fdae 	bl	80033f8 <_MPU_writeRegister>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	da02      	bge.n	80028a8 <MPU_begin+0x130>
    return -10;
 80028a2:	f06f 0309 	mvn.w	r3, #9
 80028a6:	e0d2      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  MPUType._bandwidth = DLPF_BANDWIDTH_184HZ;
 80028a8:	4b6a      	ldr	r3, [pc, #424]	; (8002a54 <MPU_begin+0x2dc>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  // setting the sample rate divider to 0 as default
  if(_MPU_writeRegister(SMPDIV,0x00) < 0){
 80028b0:	2100      	movs	r1, #0
 80028b2:	2019      	movs	r0, #25
 80028b4:	f000 fda0 	bl	80033f8 <_MPU_writeRegister>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	da02      	bge.n	80028c4 <MPU_begin+0x14c>
    return -11;
 80028be:	f06f 030a 	mvn.w	r3, #10
 80028c2:	e0c4      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  MPUType._srd = 0;
 80028c4:	4b63      	ldr	r3, [pc, #396]	; (8002a54 <MPU_begin+0x2dc>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  // enable I2C master mode
  if(_MPU_writeRegister(USER_CTRL,I2C_MST_EN) < 0){
 80028cc:	2120      	movs	r1, #32
 80028ce:	206a      	movs	r0, #106	; 0x6a
 80028d0:	f000 fd92 	bl	80033f8 <_MPU_writeRegister>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	da02      	bge.n	80028e0 <MPU_begin+0x168>
  	return -12;
 80028da:	f06f 030b 	mvn.w	r3, #11
 80028de:	e0b6      	b.n	8002a4e <MPU_begin+0x2d6>
  }
	// set the I2C bus speed to 400 kHz
	if( _MPU_writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
 80028e0:	210d      	movs	r1, #13
 80028e2:	2024      	movs	r0, #36	; 0x24
 80028e4:	f000 fd88 	bl	80033f8 <_MPU_writeRegister>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	da02      	bge.n	80028f4 <MPU_begin+0x17c>
		return -13;
 80028ee:	f06f 030c 	mvn.w	r3, #12
 80028f2:	e0ac      	b.n	8002a4e <MPU_begin+0x2d6>
	}
	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( _MPU_whoAmIAK8963() != 72 ){
 80028f4:	f000 fe86 	bl	8003604 <_MPU_whoAmIAK8963>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b48      	cmp	r3, #72	; 0x48
 80028fc:	d002      	beq.n	8002904 <MPU_begin+0x18c>
    return -14;
 80028fe:	f06f 030d 	mvn.w	r3, #13
 8002902:	e0a4      	b.n	8002a4e <MPU_begin+0x2d6>
	}
  /* get the magnetometer calibration */
  // set AK8963 to Power Down
  if(_MPU_writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 8002904:	2100      	movs	r1, #0
 8002906:	200a      	movs	r0, #10
 8002908:	f000 fdd6 	bl	80034b8 <_MPU_writeAK8963Register>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	da02      	bge.n	8002918 <MPU_begin+0x1a0>
    return -15;
 8002912:	f06f 030e 	mvn.w	r3, #14
 8002916:	e09a      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  	  	  //HAL_Delay(100); // long wait between AK8963 mode changes
  // set AK8963 to FUSE ROM access
  if(_MPU_writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM) < 0){
 8002918:	210f      	movs	r1, #15
 800291a:	200a      	movs	r0, #10
 800291c:	f000 fdcc 	bl	80034b8 <_MPU_writeAK8963Register>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	da02      	bge.n	800292c <MPU_begin+0x1b4>
    return -16;
 8002926:	f06f 030f 	mvn.w	r3, #15
 800292a:	e090      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 800292c:	2064      	movs	r0, #100	; 0x64
 800292e:	f003 f947 	bl	8005bc0 <HAL_Delay>
  // read the AK8963 ASA registers and compute magnetometer scale factors
  _MPU_readAK8963Registers(AK8963_ASA, 3, MPUType._buffer);
 8002932:	4a4b      	ldr	r2, [pc, #300]	; (8002a60 <MPU_begin+0x2e8>)
 8002934:	2103      	movs	r1, #3
 8002936:	2010      	movs	r0, #16
 8002938:	f000 fe0e 	bl	8003558 <_MPU_readAK8963Registers>
  MPUType._magScaleX = ((((float)MPUType._buffer[0]) - 128.0f)/(256.0f) + 1.0f) * 4912.0f / 32760.0f; // micro Tesla
 800293c:	4b45      	ldr	r3, [pc, #276]	; (8002a54 <MPU_begin+0x2dc>)
 800293e:	7c1b      	ldrb	r3, [r3, #16]
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002948:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002a64 <MPU_begin+0x2ec>
 800294c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002950:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002a68 <MPU_begin+0x2f0>
 8002954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800295c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002960:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002a6c <MPU_begin+0x2f4>
 8002964:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002968:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002a70 <MPU_begin+0x2f8>
 800296c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002970:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <MPU_begin+0x2dc>)
 8002972:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
  MPUType._magScaleY = ((((float)MPUType._buffer[1]) - 128.0f)/(256.0f) + 1.0f) * 4912.0f / 32760.0f; // micro Tesla
 8002976:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <MPU_begin+0x2dc>)
 8002978:	7c5b      	ldrb	r3, [r3, #17]
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002982:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002a64 <MPU_begin+0x2ec>
 8002986:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800298a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002a68 <MPU_begin+0x2f0>
 800298e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002996:	ee77 7a87 	vadd.f32	s15, s15, s14
 800299a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002a6c <MPU_begin+0x2f4>
 800299e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029a2:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002a70 <MPU_begin+0x2f8>
 80029a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029aa:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <MPU_begin+0x2dc>)
 80029ac:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
  MPUType._magScaleZ = ((((float)MPUType._buffer[2]) - 128.0f)/(256.0f) + 1.0f) * 4912.0f / 32760.0f; // micro Tesla
 80029b0:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <MPU_begin+0x2dc>)
 80029b2:	7c9b      	ldrb	r3, [r3, #18]
 80029b4:	ee07 3a90 	vmov	s15, r3
 80029b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029bc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002a64 <MPU_begin+0x2ec>
 80029c0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029c4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8002a68 <MPU_begin+0x2f0>
 80029c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029d4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002a6c <MPU_begin+0x2f4>
 80029d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029dc:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002a70 <MPU_begin+0x2f8>
 80029e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <MPU_begin+0x2dc>)
 80029e6:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
  // set AK8963 to Power Down
  if(_MPU_writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 80029ea:	2100      	movs	r1, #0
 80029ec:	200a      	movs	r0, #10
 80029ee:	f000 fd63 	bl	80034b8 <_MPU_writeAK8963Register>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	da02      	bge.n	80029fe <MPU_begin+0x286>
    return -17;
 80029f8:	f06f 0310 	mvn.w	r3, #16
 80029fc:	e027      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 80029fe:	2064      	movs	r0, #100	; 0x64
 8002a00:	f003 f8de 	bl	8005bc0 <HAL_Delay>
  // set AK8963 to 16 bit resolution, 100 Hz update rate
  if(_MPU_writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2) < 0){
 8002a04:	2116      	movs	r1, #22
 8002a06:	200a      	movs	r0, #10
 8002a08:	f000 fd56 	bl	80034b8 <_MPU_writeAK8963Register>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	da02      	bge.n	8002a18 <MPU_begin+0x2a0>
    return -18;
 8002a12:	f06f 0311 	mvn.w	r3, #17
 8002a16:	e01a      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 8002a18:	2064      	movs	r0, #100	; 0x64
 8002a1a:	f003 f8d1 	bl	8005bc0 <HAL_Delay>
  // select clock source to gyro
  if(_MPU_writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
 8002a1e:	2101      	movs	r1, #1
 8002a20:	206b      	movs	r0, #107	; 0x6b
 8002a22:	f000 fce9 	bl	80033f8 <_MPU_writeRegister>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	da02      	bge.n	8002a32 <MPU_begin+0x2ba>
    return -19;
 8002a2c:	f06f 0312 	mvn.w	r3, #18
 8002a30:	e00d      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
  _MPU_readAK8963Registers(AK8963_HXL,7,MPUType._buffer);
 8002a32:	4a0b      	ldr	r2, [pc, #44]	; (8002a60 <MPU_begin+0x2e8>)
 8002a34:	2107      	movs	r1, #7
 8002a36:	2003      	movs	r0, #3
 8002a38:	f000 fd8e 	bl	8003558 <_MPU_readAK8963Registers>
  // estimate gyro bias
  if (MPU_calibrateGyro() < 0) {
 8002a3c:	f000 fbca 	bl	80031d4 <MPU_calibrateGyro>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	da02      	bge.n	8002a4c <MPU_begin+0x2d4>
    return -20;
 8002a46:	f06f 0313 	mvn.w	r3, #19
 8002a4a:	e000      	b.n	8002a4e <MPU_begin+0x2d6>
  }
  // successful init, return 1
  return 1;
 8002a4c:	2301      	movs	r3, #1
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000c78 	.word	0x20000c78
 8002a58:	46ffff00 	.word	0x46ffff00
 8002a5c:	3d7a00fa 	.word	0x3d7a00fa
 8002a60:	20000c88 	.word	0x20000c88
 8002a64:	43000000 	.word	0x43000000
 8002a68:	43800000 	.word	0x43800000
 8002a6c:	45998000 	.word	0x45998000
 8002a70:	46fff000 	.word	0x46fff000

08002a74 <MPU_setGyroRange>:
  MPUType._accelRange = range;
  return 1;
}

/* sets the gyro full scale range to values other than default */
int MPU_setGyroRange(MPU_GyroRange range) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
  // use low speed SPI for register setting
  //_useSPIHS = false;
  switch(range) {
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d85f      	bhi.n	8002b44 <MPU_setGyroRange+0xd0>
 8002a84:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <MPU_setGyroRange+0x18>)
 8002a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8a:	bf00      	nop
 8002a8c:	08002a9d 	.word	0x08002a9d
 8002a90:	08002ac7 	.word	0x08002ac7
 8002a94:	08002af1 	.word	0x08002af1
 8002a98:	08002b1b 	.word	0x08002b1b
    case GYRO_RANGE_250DPS: {
      // setting the gyro range to 250DPS
      if(_MPU_writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS) < 0){
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	201b      	movs	r0, #27
 8002aa0:	f000 fcaa 	bl	80033f8 <_MPU_writeRegister>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	da02      	bge.n	8002ab0 <MPU_setGyroRange+0x3c>
        return -1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	e04e      	b.n	8002b4e <MPU_setGyroRange+0xda>
      }
      MPUType._gyroScale = 250.0f/32767.5f * MPUType._d2r; // setting the gyro scale to 250DPS
 8002ab0:	4b29      	ldr	r3, [pc, #164]	; (8002b58 <MPU_setGyroRange+0xe4>)
 8002ab2:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8002ab6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002b5c <MPU_setGyroRange+0xe8>
 8002aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002abe:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <MPU_setGyroRange+0xe4>)
 8002ac0:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
      break;
 8002ac4:	e03e      	b.n	8002b44 <MPU_setGyroRange+0xd0>
    }
    case GYRO_RANGE_500DPS: {
      // setting the gyro range to 500DPS
      if(_MPU_writeRegister(GYRO_CONFIG,GYRO_FS_SEL_500DPS) < 0){
 8002ac6:	2108      	movs	r1, #8
 8002ac8:	201b      	movs	r0, #27
 8002aca:	f000 fc95 	bl	80033f8 <_MPU_writeRegister>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	da02      	bge.n	8002ada <MPU_setGyroRange+0x66>
        return -1;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad8:	e039      	b.n	8002b4e <MPU_setGyroRange+0xda>
      }
      MPUType._gyroScale = 500.0f/32767.5f * MPUType._d2r; // setting the gyro scale to 500DPS
 8002ada:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <MPU_setGyroRange+0xe4>)
 8002adc:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8002ae0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002b60 <MPU_setGyroRange+0xec>
 8002ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <MPU_setGyroRange+0xe4>)
 8002aea:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
      break;
 8002aee:	e029      	b.n	8002b44 <MPU_setGyroRange+0xd0>
    }
    case GYRO_RANGE_1000DPS: {
      // setting the gyro range to 1000DPS
      if(_MPU_writeRegister(GYRO_CONFIG,GYRO_FS_SEL_1000DPS) < 0){
 8002af0:	2110      	movs	r1, #16
 8002af2:	201b      	movs	r0, #27
 8002af4:	f000 fc80 	bl	80033f8 <_MPU_writeRegister>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	da02      	bge.n	8002b04 <MPU_setGyroRange+0x90>
        return -1;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	e024      	b.n	8002b4e <MPU_setGyroRange+0xda>
      }
      MPUType._gyroScale = 1000.0f/32767.5f * MPUType._d2r; // setting the gyro scale to 1000DPS
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <MPU_setGyroRange+0xe4>)
 8002b06:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8002b0a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002b64 <MPU_setGyroRange+0xf0>
 8002b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <MPU_setGyroRange+0xe4>)
 8002b14:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
      break;
 8002b18:	e014      	b.n	8002b44 <MPU_setGyroRange+0xd0>
    }
    case GYRO_RANGE_2000DPS: {
      // setting the gyro range to 2000DPS
      if(_MPU_writeRegister(GYRO_CONFIG,GYRO_FS_SEL_2000DPS) < 0){
 8002b1a:	2118      	movs	r1, #24
 8002b1c:	201b      	movs	r0, #27
 8002b1e:	f000 fc6b 	bl	80033f8 <_MPU_writeRegister>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	da02      	bge.n	8002b2e <MPU_setGyroRange+0xba>
        return -1;
 8002b28:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2c:	e00f      	b.n	8002b4e <MPU_setGyroRange+0xda>
      }
      MPUType._gyroScale = 2000.0f/32767.5f * MPUType._d2r; // setting the gyro scale to 2000DPS
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <MPU_setGyroRange+0xe4>)
 8002b30:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8002b34:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002b68 <MPU_setGyroRange+0xf4>
 8002b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <MPU_setGyroRange+0xe4>)
 8002b3e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
      break;
 8002b42:	bf00      	nop
    }
  }
  MPUType._gyroRange = range;
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <MPU_setGyroRange+0xe4>)
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	f882 3085 	strb.w	r3, [r2, #133]	; 0x85
  return 1;
 8002b4c:	2301      	movs	r3, #1
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000c78 	.word	0x20000c78
 8002b5c:	3bfa00fa 	.word	0x3bfa00fa
 8002b60:	3c7a00fa 	.word	0x3c7a00fa
 8002b64:	3cfa00fa 	.word	0x3cfa00fa
 8002b68:	3d7a00fa 	.word	0x3d7a00fa

08002b6c <MPU_setDlpfBandwidth>:

/* sets the DLPF bandwidth to values other than default */
int MPU_setDlpfBandwidth(MPU_DlpfBandwidth bandwidth) {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
  // use low speed SPI for register setting
  //_useSPIHS = false;
  switch(bandwidth) {
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	2b05      	cmp	r3, #5
 8002b7a:	f200 8092 	bhi.w	8002ca2 <MPU_setDlpfBandwidth+0x136>
 8002b7e:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <MPU_setDlpfBandwidth+0x18>)
 8002b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b84:	08002b9d 	.word	0x08002b9d
 8002b88:	08002bc5 	.word	0x08002bc5
 8002b8c:	08002bed 	.word	0x08002bed
 8002b90:	08002c15 	.word	0x08002c15
 8002b94:	08002c3d 	.word	0x08002c3d
 8002b98:	08002c65 	.word	0x08002c65
    case DLPF_BANDWIDTH_184HZ: {
      if(_MPU_writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_184) < 0){ // setting accel bandwidth to 184Hz
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	201d      	movs	r0, #29
 8002ba0:	f000 fc2a 	bl	80033f8 <_MPU_writeRegister>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	da02      	bge.n	8002bb0 <MPU_setDlpfBandwidth+0x44>
        return -1;
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bae:	e07d      	b.n	8002cac <MPU_setDlpfBandwidth+0x140>
      }
      if(_MPU_writeRegister(CONFIG,GYRO_DLPF_184) < 0){ // setting gyro bandwidth to 184Hz
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	201a      	movs	r0, #26
 8002bb4:	f000 fc20 	bl	80033f8 <_MPU_writeRegister>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	da66      	bge.n	8002c8c <MPU_setDlpfBandwidth+0x120>
        return -2;
 8002bbe:	f06f 0301 	mvn.w	r3, #1
 8002bc2:	e073      	b.n	8002cac <MPU_setDlpfBandwidth+0x140>
      }
      break;
    }
    case DLPF_BANDWIDTH_92HZ: {
      if(_MPU_writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_92) < 0){ // setting accel bandwidth to 92Hz
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	201d      	movs	r0, #29
 8002bc8:	f000 fc16 	bl	80033f8 <_MPU_writeRegister>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	da02      	bge.n	8002bd8 <MPU_setDlpfBandwidth+0x6c>
        return -1;
 8002bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd6:	e069      	b.n	8002cac <MPU_setDlpfBandwidth+0x140>
      }
      if(_MPU_writeRegister(CONFIG,GYRO_DLPF_92) < 0){ // setting gyro bandwidth to 92Hz
 8002bd8:	2102      	movs	r1, #2
 8002bda:	201a      	movs	r0, #26
 8002bdc:	f000 fc0c 	bl	80033f8 <_MPU_writeRegister>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	da54      	bge.n	8002c90 <MPU_setDlpfBandwidth+0x124>
        return -2;
 8002be6:	f06f 0301 	mvn.w	r3, #1
 8002bea:	e05f      	b.n	8002cac <MPU_setDlpfBandwidth+0x140>
      }
      break;
    }
    case DLPF_BANDWIDTH_41HZ: {
      if(_MPU_writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_41) < 0){ // setting accel bandwidth to 41Hz
 8002bec:	2103      	movs	r1, #3
 8002bee:	201d      	movs	r0, #29
 8002bf0:	f000 fc02 	bl	80033f8 <_MPU_writeRegister>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	da02      	bge.n	8002c00 <MPU_setDlpfBandwidth+0x94>
        return -1;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	e055      	b.n	8002cac <MPU_setDlpfBandwidth+0x140>
      }
      if(_MPU_writeRegister(CONFIG,GYRO_DLPF_41) < 0){ // setting gyro bandwidth to 41Hz
 8002c00:	2103      	movs	r1, #3
 8002c02:	201a      	movs	r0, #26
 8002c04:	f000 fbf8 	bl	80033f8 <_MPU_writeRegister>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	da42      	bge.n	8002c94 <MPU_setDlpfBandwidth+0x128>
        return -2;
 8002c0e:	f06f 0301 	mvn.w	r3, #1
 8002c12:	e04b      	b.n	8002cac <MPU_setDlpfBandwidth+0x140>
      }
      break;
    }
    case DLPF_BANDWIDTH_20HZ: {
      if(_MPU_writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_20) < 0){ // setting accel bandwidth to 20Hz
 8002c14:	2104      	movs	r1, #4
 8002c16:	201d      	movs	r0, #29
 8002c18:	f000 fbee 	bl	80033f8 <_MPU_writeRegister>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	da02      	bge.n	8002c28 <MPU_setDlpfBandwidth+0xbc>
        return -1;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
 8002c26:	e041      	b.n	8002cac <MPU_setDlpfBandwidth+0x140>
      }
      if(_MPU_writeRegister(CONFIG,GYRO_DLPF_20) < 0){ // setting gyro bandwidth to 20Hz
 8002c28:	2104      	movs	r1, #4
 8002c2a:	201a      	movs	r0, #26
 8002c2c:	f000 fbe4 	bl	80033f8 <_MPU_writeRegister>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	da30      	bge.n	8002c98 <MPU_setDlpfBandwidth+0x12c>
        return -2;
 8002c36:	f06f 0301 	mvn.w	r3, #1
 8002c3a:	e037      	b.n	8002cac <MPU_setDlpfBandwidth+0x140>
      }
      break;
    }
    case DLPF_BANDWIDTH_10HZ: {
      if(_MPU_writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_10) < 0){ // setting accel bandwidth to 10Hz
 8002c3c:	2105      	movs	r1, #5
 8002c3e:	201d      	movs	r0, #29
 8002c40:	f000 fbda 	bl	80033f8 <_MPU_writeRegister>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	da02      	bge.n	8002c50 <MPU_setDlpfBandwidth+0xe4>
        return -1;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4e:	e02d      	b.n	8002cac <MPU_setDlpfBandwidth+0x140>
      }
      if(_MPU_writeRegister(CONFIG,GYRO_DLPF_10) < 0){ // setting gyro bandwidth to 10Hz
 8002c50:	2105      	movs	r1, #5
 8002c52:	201a      	movs	r0, #26
 8002c54:	f000 fbd0 	bl	80033f8 <_MPU_writeRegister>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	da1e      	bge.n	8002c9c <MPU_setDlpfBandwidth+0x130>
        return -2;
 8002c5e:	f06f 0301 	mvn.w	r3, #1
 8002c62:	e023      	b.n	8002cac <MPU_setDlpfBandwidth+0x140>
      }
      break;
    }
    case DLPF_BANDWIDTH_5HZ: {
      if(_MPU_writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_5) < 0){ // setting accel bandwidth to 5Hz
 8002c64:	2106      	movs	r1, #6
 8002c66:	201d      	movs	r0, #29
 8002c68:	f000 fbc6 	bl	80033f8 <_MPU_writeRegister>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	da02      	bge.n	8002c78 <MPU_setDlpfBandwidth+0x10c>
        return -1;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
 8002c76:	e019      	b.n	8002cac <MPU_setDlpfBandwidth+0x140>
      }
      if(_MPU_writeRegister(CONFIG,GYRO_DLPF_5) < 0){ // setting gyro bandwidth to 5Hz
 8002c78:	2106      	movs	r1, #6
 8002c7a:	201a      	movs	r0, #26
 8002c7c:	f000 fbbc 	bl	80033f8 <_MPU_writeRegister>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	da0c      	bge.n	8002ca0 <MPU_setDlpfBandwidth+0x134>
        return -2;
 8002c86:	f06f 0301 	mvn.w	r3, #1
 8002c8a:	e00f      	b.n	8002cac <MPU_setDlpfBandwidth+0x140>
      break;
 8002c8c:	bf00      	nop
 8002c8e:	e008      	b.n	8002ca2 <MPU_setDlpfBandwidth+0x136>
      break;
 8002c90:	bf00      	nop
 8002c92:	e006      	b.n	8002ca2 <MPU_setDlpfBandwidth+0x136>
      break;
 8002c94:	bf00      	nop
 8002c96:	e004      	b.n	8002ca2 <MPU_setDlpfBandwidth+0x136>
      break;
 8002c98:	bf00      	nop
 8002c9a:	e002      	b.n	8002ca2 <MPU_setDlpfBandwidth+0x136>
      break;
 8002c9c:	bf00      	nop
 8002c9e:	e000      	b.n	8002ca2 <MPU_setDlpfBandwidth+0x136>
      }
      break;
 8002ca0:	bf00      	nop
    }
  }
  MPUType._bandwidth = bandwidth;
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <MPU_setDlpfBandwidth+0x148>)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	f882 3086 	strb.w	r3, [r2, #134]	; 0x86
  return 1;
 8002caa:	2301      	movs	r3, #1
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000c78 	.word	0x20000c78

08002cb8 <MPU_setSrd>:

/* sets the sample rate divider to values other than default */
int MPU_setSrd(uint8_t srd) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
  // use low speed SPI for register setting
  //_useSPIHS = false;
  /* setting the sample rate divider to 19 to facilitate setting up magnetometer */
  if(_MPU_writeRegister(SMPDIV,19) < 0){ // setting the sample rate divider
 8002cc2:	2113      	movs	r1, #19
 8002cc4:	2019      	movs	r0, #25
 8002cc6:	f000 fb97 	bl	80033f8 <_MPU_writeRegister>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	da02      	bge.n	8002cd6 <MPU_setSrd+0x1e>
    return -1;
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd4:	e051      	b.n	8002d7a <MPU_setSrd+0xc2>
  }
  if(srd > 9){
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	2b09      	cmp	r3, #9
 8002cda:	d91f      	bls.n	8002d1c <MPU_setSrd+0x64>
    // set AK8963 to Power Down
    if(_MPU_writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 8002cdc:	2100      	movs	r1, #0
 8002cde:	200a      	movs	r0, #10
 8002ce0:	f000 fbea 	bl	80034b8 <_MPU_writeAK8963Register>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	da02      	bge.n	8002cf0 <MPU_setSrd+0x38>
      return -2;
 8002cea:	f06f 0301 	mvn.w	r3, #1
 8002cee:	e044      	b.n	8002d7a <MPU_setSrd+0xc2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 8002cf0:	2064      	movs	r0, #100	; 0x64
 8002cf2:	f002 ff65 	bl	8005bc0 <HAL_Delay>
    // set AK8963 to 16 bit resolution, 8 Hz update rate
    if(_MPU_writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS1) < 0){
 8002cf6:	2112      	movs	r1, #18
 8002cf8:	200a      	movs	r0, #10
 8002cfa:	f000 fbdd 	bl	80034b8 <_MPU_writeAK8963Register>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	da02      	bge.n	8002d0a <MPU_setSrd+0x52>
      return -3;
 8002d04:	f06f 0302 	mvn.w	r3, #2
 8002d08:	e037      	b.n	8002d7a <MPU_setSrd+0xc2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 8002d0a:	2064      	movs	r0, #100	; 0x64
 8002d0c:	f002 ff58 	bl	8005bc0 <HAL_Delay>
    // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
    _MPU_readAK8963Registers(AK8963_HXL,7,MPUType._buffer);
 8002d10:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <MPU_setSrd+0xcc>)
 8002d12:	2107      	movs	r1, #7
 8002d14:	2003      	movs	r0, #3
 8002d16:	f000 fc1f 	bl	8003558 <_MPU_readAK8963Registers>
 8002d1a:	e01e      	b.n	8002d5a <MPU_setSrd+0xa2>
  } else {
    // set AK8963 to Power Down
    if(_MPU_writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	200a      	movs	r0, #10
 8002d20:	f000 fbca 	bl	80034b8 <_MPU_writeAK8963Register>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	da02      	bge.n	8002d30 <MPU_setSrd+0x78>
      return -2;
 8002d2a:	f06f 0301 	mvn.w	r3, #1
 8002d2e:	e024      	b.n	8002d7a <MPU_setSrd+0xc2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 8002d30:	2064      	movs	r0, #100	; 0x64
 8002d32:	f002 ff45 	bl	8005bc0 <HAL_Delay>
    // set AK8963 to 16 bit resolution, 100 Hz update rate
    if(_MPU_writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2) < 0){
 8002d36:	2116      	movs	r1, #22
 8002d38:	200a      	movs	r0, #10
 8002d3a:	f000 fbbd 	bl	80034b8 <_MPU_writeAK8963Register>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	da02      	bge.n	8002d4a <MPU_setSrd+0x92>
      return -3;
 8002d44:	f06f 0302 	mvn.w	r3, #2
 8002d48:	e017      	b.n	8002d7a <MPU_setSrd+0xc2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 8002d4a:	2064      	movs	r0, #100	; 0x64
 8002d4c:	f002 ff38 	bl	8005bc0 <HAL_Delay>
    // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
    _MPU_readAK8963Registers(AK8963_HXL,7,MPUType._buffer);
 8002d50:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <MPU_setSrd+0xcc>)
 8002d52:	2107      	movs	r1, #7
 8002d54:	2003      	movs	r0, #3
 8002d56:	f000 fbff 	bl	8003558 <_MPU_readAK8963Registers>
  }
  /* setting the sample rate divider */
  if(_MPU_writeRegister(SMPDIV,srd) < 0){ // setting the sample rate divider
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	2019      	movs	r0, #25
 8002d60:	f000 fb4a 	bl	80033f8 <_MPU_writeRegister>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	da02      	bge.n	8002d70 <MPU_setSrd+0xb8>
    return -4;
 8002d6a:	f06f 0303 	mvn.w	r3, #3
 8002d6e:	e004      	b.n	8002d7a <MPU_setSrd+0xc2>
  }
  MPUType._srd = srd;
 8002d70:	4a05      	ldr	r2, [pc, #20]	; (8002d88 <MPU_setSrd+0xd0>)
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	f882 3087 	strb.w	r3, [r2, #135]	; 0x87
  return 1;
 8002d78:	2301      	movs	r3, #1
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000c88 	.word	0x20000c88
 8002d88:	20000c78 	.word	0x20000c78

08002d8c <MPU_readSensor>:
  }
  return 1;
}

/* reads the most current data from MPU9250 and stores in buffer */
int MPU_readSensor() {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  //_useSPIHS = true; // use the high speed SPI for data readout
  // grab the data from the MPU9250
  if (_MPU_readRegisters(ACCEL_OUT, 21, MPUType._buffer) < 0) {
 8002d90:	4ab6      	ldr	r2, [pc, #728]	; (800306c <MPU_readSensor+0x2e0>)
 8002d92:	2115      	movs	r1, #21
 8002d94:	203b      	movs	r0, #59	; 0x3b
 8002d96:	f000 fb5b 	bl	8003450 <_MPU_readRegisters>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	da02      	bge.n	8002da6 <MPU_readSensor+0x1a>
    return -1;
 8002da0:	f04f 33ff 	mov.w	r3, #4294967295
 8002da4:	e15f      	b.n	8003066 <MPU_readSensor+0x2da>
  }
  // combine into 16 bit values
  MPUType._axcounts = (((int16_t)MPUType._buffer[0]) << 8) | MPUType._buffer[1];
 8002da6:	4bb2      	ldr	r3, [pc, #712]	; (8003070 <MPU_readSensor+0x2e4>)
 8002da8:	7c1b      	ldrb	r3, [r3, #16]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	b21a      	sxth	r2, r3
 8002dae:	4bb0      	ldr	r3, [pc, #704]	; (8003070 <MPU_readSensor+0x2e4>)
 8002db0:	7c5b      	ldrb	r3, [r3, #17]
 8002db2:	b21b      	sxth	r3, r3
 8002db4:	4313      	orrs	r3, r2
 8002db6:	b21a      	sxth	r2, r3
 8002db8:	4bad      	ldr	r3, [pc, #692]	; (8003070 <MPU_readSensor+0x2e4>)
 8002dba:	84da      	strh	r2, [r3, #38]	; 0x26
  MPUType._aycounts = (((int16_t)MPUType._buffer[2]) << 8) | MPUType._buffer[3];
 8002dbc:	4bac      	ldr	r3, [pc, #688]	; (8003070 <MPU_readSensor+0x2e4>)
 8002dbe:	7c9b      	ldrb	r3, [r3, #18]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	b21a      	sxth	r2, r3
 8002dc4:	4baa      	ldr	r3, [pc, #680]	; (8003070 <MPU_readSensor+0x2e4>)
 8002dc6:	7cdb      	ldrb	r3, [r3, #19]
 8002dc8:	b21b      	sxth	r3, r3
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	b21a      	sxth	r2, r3
 8002dce:	4ba8      	ldr	r3, [pc, #672]	; (8003070 <MPU_readSensor+0x2e4>)
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
  MPUType._azcounts = (((int16_t)MPUType._buffer[4]) << 8) | MPUType._buffer[5];
 8002dd2:	4ba7      	ldr	r3, [pc, #668]	; (8003070 <MPU_readSensor+0x2e4>)
 8002dd4:	7d1b      	ldrb	r3, [r3, #20]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	b21a      	sxth	r2, r3
 8002dda:	4ba5      	ldr	r3, [pc, #660]	; (8003070 <MPU_readSensor+0x2e4>)
 8002ddc:	7d5b      	ldrb	r3, [r3, #21]
 8002dde:	b21b      	sxth	r3, r3
 8002de0:	4313      	orrs	r3, r2
 8002de2:	b21a      	sxth	r2, r3
 8002de4:	4ba2      	ldr	r3, [pc, #648]	; (8003070 <MPU_readSensor+0x2e4>)
 8002de6:	855a      	strh	r2, [r3, #42]	; 0x2a
  MPUType._tcounts =  (((int16_t)MPUType._buffer[6]) << 8) | MPUType._buffer[7];
 8002de8:	4ba1      	ldr	r3, [pc, #644]	; (8003070 <MPU_readSensor+0x2e4>)
 8002dea:	7d9b      	ldrb	r3, [r3, #22]
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	b21a      	sxth	r2, r3
 8002df0:	4b9f      	ldr	r3, [pc, #636]	; (8003070 <MPU_readSensor+0x2e4>)
 8002df2:	7ddb      	ldrb	r3, [r3, #23]
 8002df4:	b21b      	sxth	r3, r3
 8002df6:	4313      	orrs	r3, r2
 8002df8:	b21a      	sxth	r2, r3
 8002dfa:	4b9d      	ldr	r3, [pc, #628]	; (8003070 <MPU_readSensor+0x2e4>)
 8002dfc:	871a      	strh	r2, [r3, #56]	; 0x38
  MPUType._gxcounts = (((int16_t)MPUType._buffer[8]) << 8) | MPUType._buffer[9];
 8002dfe:	4b9c      	ldr	r3, [pc, #624]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e00:	7e1b      	ldrb	r3, [r3, #24]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	b21a      	sxth	r2, r3
 8002e06:	4b9a      	ldr	r3, [pc, #616]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e08:	7e5b      	ldrb	r3, [r3, #25]
 8002e0a:	b21b      	sxth	r3, r3
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	b21a      	sxth	r2, r3
 8002e10:	4b97      	ldr	r3, [pc, #604]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e12:	859a      	strh	r2, [r3, #44]	; 0x2c
  MPUType._gycounts = (((int16_t)MPUType._buffer[10]) << 8) | MPUType._buffer[11];
 8002e14:	4b96      	ldr	r3, [pc, #600]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e16:	7e9b      	ldrb	r3, [r3, #26]
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	b21a      	sxth	r2, r3
 8002e1c:	4b94      	ldr	r3, [pc, #592]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e1e:	7edb      	ldrb	r3, [r3, #27]
 8002e20:	b21b      	sxth	r3, r3
 8002e22:	4313      	orrs	r3, r2
 8002e24:	b21a      	sxth	r2, r3
 8002e26:	4b92      	ldr	r3, [pc, #584]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e28:	85da      	strh	r2, [r3, #46]	; 0x2e
  MPUType._gzcounts = (((int16_t)MPUType._buffer[12]) << 8) | MPUType._buffer[13];
 8002e2a:	4b91      	ldr	r3, [pc, #580]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e2c:	7f1b      	ldrb	r3, [r3, #28]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	b21a      	sxth	r2, r3
 8002e32:	4b8f      	ldr	r3, [pc, #572]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e34:	7f5b      	ldrb	r3, [r3, #29]
 8002e36:	b21b      	sxth	r3, r3
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	b21a      	sxth	r2, r3
 8002e3c:	4b8c      	ldr	r3, [pc, #560]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e3e:	861a      	strh	r2, [r3, #48]	; 0x30
  MPUType._hxcounts = (((int16_t)MPUType._buffer[15]) << 8) | MPUType._buffer[14];
 8002e40:	4b8b      	ldr	r3, [pc, #556]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e42:	7fdb      	ldrb	r3, [r3, #31]
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	b21a      	sxth	r2, r3
 8002e48:	4b89      	ldr	r3, [pc, #548]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e4a:	7f9b      	ldrb	r3, [r3, #30]
 8002e4c:	b21b      	sxth	r3, r3
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	b21a      	sxth	r2, r3
 8002e52:	4b87      	ldr	r3, [pc, #540]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e54:	865a      	strh	r2, [r3, #50]	; 0x32
  MPUType._hycounts = (((int16_t)MPUType._buffer[17]) << 8) | MPUType._buffer[16];
 8002e56:	4b86      	ldr	r3, [pc, #536]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	b21a      	sxth	r2, r3
 8002e60:	4b83      	ldr	r3, [pc, #524]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e66:	b21b      	sxth	r3, r3
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	b21a      	sxth	r2, r3
 8002e6c:	4b80      	ldr	r3, [pc, #512]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e6e:	869a      	strh	r2, [r3, #52]	; 0x34
  MPUType._hzcounts = (((int16_t)MPUType._buffer[19]) << 8) | MPUType._buffer[18];
 8002e70:	4b7f      	ldr	r3, [pc, #508]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e72:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002e76:	021b      	lsls	r3, r3, #8
 8002e78:	b21a      	sxth	r2, r3
 8002e7a:	4b7d      	ldr	r3, [pc, #500]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e7c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002e80:	b21b      	sxth	r3, r3
 8002e82:	4313      	orrs	r3, r2
 8002e84:	b21a      	sxth	r2, r3
 8002e86:	4b7a      	ldr	r3, [pc, #488]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e88:	86da      	strh	r2, [r3, #54]	; 0x36

  // transform and convert to float values
  MPUType._ax = (( (float)(MPUType._aycounts) ) * MPUType._accelScale - MPUType._axb) * MPUType._axs;
 8002e8a:	4b79      	ldr	r3, [pc, #484]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e8c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002e90:	ee07 3a90 	vmov	s15, r3
 8002e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e98:	4b75      	ldr	r3, [pc, #468]	; (8003070 <MPU_readSensor+0x2e4>)
 8002e9a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002e9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ea2:	4b73      	ldr	r3, [pc, #460]	; (8003070 <MPU_readSensor+0x2e4>)
 8002ea4:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8002ea8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002eac:	4b70      	ldr	r3, [pc, #448]	; (8003070 <MPU_readSensor+0x2e4>)
 8002eae:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8002eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb6:	4b6e      	ldr	r3, [pc, #440]	; (8003070 <MPU_readSensor+0x2e4>)
 8002eb8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  MPUType._ay = (( (float)(MPUType._axcounts) ) * MPUType._accelScale - MPUType._ayb) * MPUType._ays;
 8002ebc:	4b6c      	ldr	r3, [pc, #432]	; (8003070 <MPU_readSensor+0x2e4>)
 8002ebe:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002ec2:	ee07 3a90 	vmov	s15, r3
 8002ec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eca:	4b69      	ldr	r3, [pc, #420]	; (8003070 <MPU_readSensor+0x2e4>)
 8002ecc:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002ed0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ed4:	4b66      	ldr	r3, [pc, #408]	; (8003070 <MPU_readSensor+0x2e4>)
 8002ed6:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8002eda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ede:	4b64      	ldr	r3, [pc, #400]	; (8003070 <MPU_readSensor+0x2e4>)
 8002ee0:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8002ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee8:	4b61      	ldr	r3, [pc, #388]	; (8003070 <MPU_readSensor+0x2e4>)
 8002eea:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  MPUType._az = (( (float)(-MPUType._azcounts)) * MPUType._accelScale - MPUType._azb) * MPUType._azs;
 8002eee:	4b60      	ldr	r3, [pc, #384]	; (8003070 <MPU_readSensor+0x2e4>)
 8002ef0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002ef4:	425b      	negs	r3, r3
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002efe:	4b5c      	ldr	r3, [pc, #368]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f00:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002f04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f08:	4b59      	ldr	r3, [pc, #356]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f0a:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8002f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f12:	4b57      	ldr	r3, [pc, #348]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f14:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8002f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f1c:	4b54      	ldr	r3, [pc, #336]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f1e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

  MPUType._gx = ( (float)(MPUType._gycounts) * MPUType._gyroScale) - MPUType._gxb;
 8002f22:	4b53      	ldr	r3, [pc, #332]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f24:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002f28:	ee07 3a90 	vmov	s15, r3
 8002f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f30:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f32:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f3a:	4b4d      	ldr	r3, [pc, #308]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f3c:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8002f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f44:	4b4a      	ldr	r3, [pc, #296]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f46:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  MPUType._gy = ( (float)(MPUType._gxcounts) * MPUType._gyroScale) - MPUType._gyb;
 8002f4a:	4b49      	ldr	r3, [pc, #292]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f4c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002f50:	ee07 3a90 	vmov	s15, r3
 8002f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f58:	4b45      	ldr	r3, [pc, #276]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f5a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f62:	4b43      	ldr	r3, [pc, #268]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f64:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8002f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6c:	4b40      	ldr	r3, [pc, #256]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f6e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  MPUType._gz = ( (float)(-MPUType._gzcounts) * MPUType._gyroScale) - MPUType._gzb;
 8002f72:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002f78:	425b      	negs	r3, r3
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f82:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f84:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f8c:	4b38      	ldr	r3, [pc, #224]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f8e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f96:	4b36      	ldr	r3, [pc, #216]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f98:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  MPUType._hx = (( (float)(MPUType._hxcounts) * MPUType._magScaleX) - MPUType._hxb) * MPUType._hxs;
 8002f9c:	4b34      	ldr	r3, [pc, #208]	; (8003070 <MPU_readSensor+0x2e4>)
 8002f9e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <MPU_readSensor+0x2e4>)
 8002fac:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fb4:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <MPU_readSensor+0x2e4>)
 8002fb6:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8002fba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fbe:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <MPU_readSensor+0x2e4>)
 8002fc0:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8002fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc8:	4b29      	ldr	r3, [pc, #164]	; (8003070 <MPU_readSensor+0x2e4>)
 8002fca:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
  MPUType._hy = (( (float)(MPUType._hycounts) * MPUType._magScaleY) - MPUType._hyb) * MPUType._hys;
 8002fce:	4b28      	ldr	r3, [pc, #160]	; (8003070 <MPU_readSensor+0x2e4>)
 8002fd0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fdc:	4b24      	ldr	r3, [pc, #144]	; (8003070 <MPU_readSensor+0x2e4>)
 8002fde:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002fe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fe6:	4b22      	ldr	r3, [pc, #136]	; (8003070 <MPU_readSensor+0x2e4>)
 8002fe8:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 8002fec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ff0:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <MPU_readSensor+0x2e4>)
 8002ff2:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8002ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <MPU_readSensor+0x2e4>)
 8002ffc:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
  MPUType._hz = (( (float)(MPUType._hzcounts) * MPUType._magScaleZ) - MPUType._hzb) * MPUType._hzs;
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <MPU_readSensor+0x2e4>)
 8003002:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8003006:	ee07 3a90 	vmov	s15, r3
 800300a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800300e:	4b18      	ldr	r3, [pc, #96]	; (8003070 <MPU_readSensor+0x2e4>)
 8003010:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <MPU_readSensor+0x2e4>)
 800301a:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800301e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003022:	4b13      	ldr	r3, [pc, #76]	; (8003070 <MPU_readSensor+0x2e4>)
 8003024:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8003028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302c:	4b10      	ldr	r3, [pc, #64]	; (8003070 <MPU_readSensor+0x2e4>)
 800302e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

  MPUType._t = ((((float) MPUType._tcounts) - MPUType._tempOffset)/MPUType._tempScale) + MPUType._tempOffset;
 8003032:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <MPU_readSensor+0x2e4>)
 8003034:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8003038:	ee07 3a90 	vmov	s15, r3
 800303c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <MPU_readSensor+0x2e4>)
 8003042:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003046:	ee77 6a67 	vsub.f32	s13, s14, s15
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <MPU_readSensor+0x2e4>)
 800304c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <MPU_readSensor+0x2e4>)
 8003056:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800305a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <MPU_readSensor+0x2e4>)
 8003060:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
  return 1;
 8003064:	2301      	movs	r3, #1
}
 8003066:	4618      	mov	r0, r3
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000c88 	.word	0x20000c88
 8003070:	20000c78 	.word	0x20000c78

08003074 <MPU_getAccelX_mss>:
  MPUType._t = ((((float) MPUType._tcounts) - MPUType._tempOffset)/MPUType._tempScale) + MPUType._tempOffset;
  return 1;
}

/* returns the accelerometer measurement in the x direction, m/s/s */
float MPU_getAccelX_mss() {
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return MPUType._ax;
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <MPU_getAccelX_mss+0x18>)
 800307a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307c:	ee07 3a90 	vmov	s15, r3
}
 8003080:	eeb0 0a67 	vmov.f32	s0, s15
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	20000c78 	.word	0x20000c78

08003090 <MPU_getAccelY_mss>:

/* returns the accelerometer measurement in the y direction, m/s/s */
float MPU_getAccelY_mss() {
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return MPUType._ay;
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <MPU_getAccelY_mss+0x18>)
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	ee07 3a90 	vmov	s15, r3
}
 800309c:	eeb0 0a67 	vmov.f32	s0, s15
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	20000c78 	.word	0x20000c78

080030ac <MPU_getAccelZ_mss>:

/* returns the accelerometer measurement in the z direction, m/s/s */
float MPU_getAccelZ_mss() {
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return MPUType._az;
 80030b0:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <MPU_getAccelZ_mss+0x18>)
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	ee07 3a90 	vmov	s15, r3
}
 80030b8:	eeb0 0a67 	vmov.f32	s0, s15
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	20000c78 	.word	0x20000c78

080030c8 <MPU_getGyroX_rads>:

/* returns the gyroscope measurement in the x direction, rad/s */
float MPU_getGyroX_rads() {
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return MPUType._gx;
 80030cc:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <MPU_getGyroX_rads+0x18>)
 80030ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d0:	ee07 3a90 	vmov	s15, r3
}
 80030d4:	eeb0 0a67 	vmov.f32	s0, s15
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	20000c78 	.word	0x20000c78

080030e4 <MPU_getGyroY_rads>:

/* returns the gyroscope measurement in the y direction, rad/s */
float MPU_getGyroY_rads() {
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return MPUType._gy;
 80030e8:	4b04      	ldr	r3, [pc, #16]	; (80030fc <MPU_getGyroY_rads+0x18>)
 80030ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ec:	ee07 3a90 	vmov	s15, r3
}
 80030f0:	eeb0 0a67 	vmov.f32	s0, s15
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	20000c78 	.word	0x20000c78

08003100 <MPU_getGyroZ_rads>:

/* returns the gyroscope measurement in the z direction, rad/s */
float MPU_getGyroZ_rads() {
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return MPUType._gz;
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <MPU_getGyroZ_rads+0x18>)
 8003106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003108:	ee07 3a90 	vmov	s15, r3
}
 800310c:	eeb0 0a67 	vmov.f32	s0, s15
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	20000c78 	.word	0x20000c78

0800311c <MPU_getMagX_uT>:

/* returns the magnetometer measurement in the x direction, uT */
float MPU_getMagX_uT() {
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return MPUType._hx;
 8003120:	4b04      	ldr	r3, [pc, #16]	; (8003134 <MPU_getMagX_uT+0x18>)
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	ee07 3a90 	vmov	s15, r3
}
 8003128:	eeb0 0a67 	vmov.f32	s0, s15
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	20000c78 	.word	0x20000c78

08003138 <MPU_getMagY_uT>:

/* returns the magnetometer measurement in the y direction, uT */
float MPU_getMagY_uT() {
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return MPUType._hy;
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <MPU_getMagY_uT+0x18>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	ee07 3a90 	vmov	s15, r3
}
 8003144:	eeb0 0a67 	vmov.f32	s0, s15
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	20000c78 	.word	0x20000c78

08003154 <MPU_getMagZ_uT>:

/* returns the magnetometer measurement in the z direction, uT */
float MPU_getMagZ_uT() {
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return MPUType._hz;
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <MPU_getMagZ_uT+0x18>)
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	ee07 3a90 	vmov	s15, r3
}
 8003160:	eeb0 0a67 	vmov.f32	s0, s15
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	20000c78 	.word	0x20000c78

08003170 <MPU_getTemperature_C>:

/* returns the die temperature, C */
float MPU_getTemperature_C() {
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return MPUType._t;
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <MPU_getTemperature_C+0x18>)
 8003176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003178:	ee07 3a90 	vmov	s15, r3
}
 800317c:	eeb0 0a67 	vmov.f32	s0, s15
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	20000c78 	.word	0x20000c78

0800318c <MPU_getAccelX_raw>:


int16_t MPU_getAccelX_raw() {
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return MPUType._axcounts;
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <MPU_getAccelX_raw+0x14>)
 8003192:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
}
 8003196:	4618      	mov	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	20000c78 	.word	0x20000c78

080031a4 <MPU_getAccelY_raw>:

/* returns the accelerometer measurement in the y direction, m/s/s */
int16_t MPU_getAccelY_raw() {
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return MPUType._aycounts;
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <MPU_getAccelY_raw+0x14>)
 80031aa:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	20000c78 	.word	0x20000c78

080031bc <MPU_getAccelZ_raw>:

/* returns the accelerometer measurement in the z direction, m/s/s */
int16_t MPU_getAccelZ_raw() {
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return MPUType._azcounts;
 80031c0:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <MPU_getAccelZ_raw+0x14>)
 80031c2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	20000c78 	.word	0x20000c78

080031d4 <MPU_calibrateGyro>:
  return MPUType._hzcounts;
}


/* estimates the gyro biases */
int MPU_calibrateGyro() {
 80031d4:	b5b0      	push	{r4, r5, r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
  // set the range, bandwidth, and srd
  if (MPU_setGyroRange(GYRO_RANGE_250DPS) < 0) {
 80031da:	2000      	movs	r0, #0
 80031dc:	f7ff fc4a 	bl	8002a74 <MPU_setGyroRange>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	da02      	bge.n	80031ec <MPU_calibrateGyro+0x18>
    return -1;
 80031e6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ea:	e0ff      	b.n	80033ec <MPU_calibrateGyro+0x218>
  }
  if (MPU_setDlpfBandwidth(DLPF_BANDWIDTH_20HZ) < 0) {
 80031ec:	2003      	movs	r0, #3
 80031ee:	f7ff fcbd 	bl	8002b6c <MPU_setDlpfBandwidth>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da02      	bge.n	80031fe <MPU_calibrateGyro+0x2a>
    return -2;
 80031f8:	f06f 0301 	mvn.w	r3, #1
 80031fc:	e0f6      	b.n	80033ec <MPU_calibrateGyro+0x218>
  }
  if (MPU_setSrd(19) < 0) {
 80031fe:	2013      	movs	r0, #19
 8003200:	f7ff fd5a 	bl	8002cb8 <MPU_setSrd>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	da02      	bge.n	8003210 <MPU_calibrateGyro+0x3c>
    return -3;
 800320a:	f06f 0302 	mvn.w	r3, #2
 800320e:	e0ed      	b.n	80033ec <MPU_calibrateGyro+0x218>
  }

  // take samples and find bias
  MPUType._gxbD = 0;
 8003210:	4a78      	ldr	r2, [pc, #480]	; (80033f4 <MPU_calibrateGyro+0x220>)
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	f04f 0400 	mov.w	r4, #0
 800321a:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
  MPUType._gybD = 0;
 800321e:	4a75      	ldr	r2, [pc, #468]	; (80033f4 <MPU_calibrateGyro+0x220>)
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	f04f 0400 	mov.w	r4, #0
 8003228:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
  MPUType._gzbD = 0;
 800322c:	4a71      	ldr	r2, [pc, #452]	; (80033f4 <MPU_calibrateGyro+0x220>)
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	f04f 0400 	mov.w	r4, #0
 8003236:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
  for (size_t i=0; i < MPUType._numSamples; i++) {
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	e088      	b.n	8003352 <MPU_calibrateGyro+0x17e>
    MPU_readSensor();
 8003240:	f7ff fda4 	bl	8002d8c <MPU_readSensor>
    MPUType._gxbD += (MPU_getGyroX_rads() + MPUType._gxb)/((double)MPUType._numSamples);
 8003244:	f7ff ff40 	bl	80030c8 <MPU_getGyroX_rads>
 8003248:	eeb0 7a40 	vmov.f32	s14, s0
 800324c:	4b69      	ldr	r3, [pc, #420]	; (80033f4 <MPU_calibrateGyro+0x220>)
 800324e:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8003252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003256:	ee17 0a90 	vmov	r0, s15
 800325a:	f7fd f975 	bl	8000548 <__aeabi_f2d>
 800325e:	4604      	mov	r4, r0
 8003260:	460d      	mov	r5, r1
 8003262:	4b64      	ldr	r3, [pc, #400]	; (80033f4 <MPU_calibrateGyro+0x220>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd f94b 	bl	8000504 <__aeabi_ui2d>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4620      	mov	r0, r4
 8003274:	4629      	mov	r1, r5
 8003276:	f7fd fae9 	bl	800084c <__aeabi_ddiv>
 800327a:	4603      	mov	r3, r0
 800327c:	460c      	mov	r4, r1
 800327e:	4618      	mov	r0, r3
 8003280:	4621      	mov	r1, r4
 8003282:	4b5c      	ldr	r3, [pc, #368]	; (80033f4 <MPU_calibrateGyro+0x220>)
 8003284:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8003288:	461a      	mov	r2, r3
 800328a:	4623      	mov	r3, r4
 800328c:	f7fc fffe 	bl	800028c <__adddf3>
 8003290:	4603      	mov	r3, r0
 8003292:	460c      	mov	r4, r1
 8003294:	4a57      	ldr	r2, [pc, #348]	; (80033f4 <MPU_calibrateGyro+0x220>)
 8003296:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
    MPUType._gybD += (MPU_getGyroY_rads() + MPUType._gyb)/((double)MPUType._numSamples);
 800329a:	f7ff ff23 	bl	80030e4 <MPU_getGyroY_rads>
 800329e:	eeb0 7a40 	vmov.f32	s14, s0
 80032a2:	4b54      	ldr	r3, [pc, #336]	; (80033f4 <MPU_calibrateGyro+0x220>)
 80032a4:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80032a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ac:	ee17 0a90 	vmov	r0, s15
 80032b0:	f7fd f94a 	bl	8000548 <__aeabi_f2d>
 80032b4:	4604      	mov	r4, r0
 80032b6:	460d      	mov	r5, r1
 80032b8:	4b4e      	ldr	r3, [pc, #312]	; (80033f4 <MPU_calibrateGyro+0x220>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd f920 	bl	8000504 <__aeabi_ui2d>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4620      	mov	r0, r4
 80032ca:	4629      	mov	r1, r5
 80032cc:	f7fd fabe 	bl	800084c <__aeabi_ddiv>
 80032d0:	4603      	mov	r3, r0
 80032d2:	460c      	mov	r4, r1
 80032d4:	4618      	mov	r0, r3
 80032d6:	4621      	mov	r1, r4
 80032d8:	4b46      	ldr	r3, [pc, #280]	; (80033f4 <MPU_calibrateGyro+0x220>)
 80032da:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 80032de:	461a      	mov	r2, r3
 80032e0:	4623      	mov	r3, r4
 80032e2:	f7fc ffd3 	bl	800028c <__adddf3>
 80032e6:	4603      	mov	r3, r0
 80032e8:	460c      	mov	r4, r1
 80032ea:	4a42      	ldr	r2, [pc, #264]	; (80033f4 <MPU_calibrateGyro+0x220>)
 80032ec:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
    MPUType._gzbD += (MPU_getGyroZ_rads() + MPUType._gzb)/((double)MPUType._numSamples);
 80032f0:	f7ff ff06 	bl	8003100 <MPU_getGyroZ_rads>
 80032f4:	eeb0 7a40 	vmov.f32	s14, s0
 80032f8:	4b3e      	ldr	r3, [pc, #248]	; (80033f4 <MPU_calibrateGyro+0x220>)
 80032fa:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80032fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003302:	ee17 0a90 	vmov	r0, s15
 8003306:	f7fd f91f 	bl	8000548 <__aeabi_f2d>
 800330a:	4604      	mov	r4, r0
 800330c:	460d      	mov	r5, r1
 800330e:	4b39      	ldr	r3, [pc, #228]	; (80033f4 <MPU_calibrateGyro+0x220>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd f8f5 	bl	8000504 <__aeabi_ui2d>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4620      	mov	r0, r4
 8003320:	4629      	mov	r1, r5
 8003322:	f7fd fa93 	bl	800084c <__aeabi_ddiv>
 8003326:	4603      	mov	r3, r0
 8003328:	460c      	mov	r4, r1
 800332a:	4618      	mov	r0, r3
 800332c:	4621      	mov	r1, r4
 800332e:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <MPU_calibrateGyro+0x220>)
 8003330:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 8003334:	461a      	mov	r2, r3
 8003336:	4623      	mov	r3, r4
 8003338:	f7fc ffa8 	bl	800028c <__adddf3>
 800333c:	4603      	mov	r3, r0
 800333e:	460c      	mov	r4, r1
 8003340:	4a2c      	ldr	r2, [pc, #176]	; (80033f4 <MPU_calibrateGyro+0x220>)
 8003342:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
    HAL_Delay(2);
 8003346:	2002      	movs	r0, #2
 8003348:	f002 fc3a 	bl	8005bc0 <HAL_Delay>
  for (size_t i=0; i < MPUType._numSamples; i++) {
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3301      	adds	r3, #1
 8003350:	607b      	str	r3, [r7, #4]
 8003352:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <MPU_calibrateGyro+0x220>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	429a      	cmp	r2, r3
 800335c:	f4ff af70 	bcc.w	8003240 <MPU_calibrateGyro+0x6c>
  }
  MPUType._gxb = (float)MPUType._gxbD;
 8003360:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <MPU_calibrateGyro+0x220>)
 8003362:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8003366:	4618      	mov	r0, r3
 8003368:	4621      	mov	r1, r4
 800336a:	f7fd fc3d 	bl	8000be8 <__aeabi_d2f>
 800336e:	4602      	mov	r2, r0
 8003370:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <MPU_calibrateGyro+0x220>)
 8003372:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  MPUType._gyb = (float)MPUType._gybD;
 8003376:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <MPU_calibrateGyro+0x220>)
 8003378:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 800337c:	4618      	mov	r0, r3
 800337e:	4621      	mov	r1, r4
 8003380:	f7fd fc32 	bl	8000be8 <__aeabi_d2f>
 8003384:	4602      	mov	r2, r0
 8003386:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <MPU_calibrateGyro+0x220>)
 8003388:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  MPUType._gzb = (float)MPUType._gzbD;
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <MPU_calibrateGyro+0x220>)
 800338e:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 8003392:	4618      	mov	r0, r3
 8003394:	4621      	mov	r1, r4
 8003396:	f7fd fc27 	bl	8000be8 <__aeabi_d2f>
 800339a:	4602      	mov	r2, r0
 800339c:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <MPU_calibrateGyro+0x220>)
 800339e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  // set the range, bandwidth, and srd back to what they were
  if (MPU_setGyroRange(MPUType._gyroRange) < 0) {
 80033a2:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <MPU_calibrateGyro+0x220>)
 80033a4:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fb63 	bl	8002a74 <MPU_setGyroRange>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	da02      	bge.n	80033ba <MPU_calibrateGyro+0x1e6>
    return -4;
 80033b4:	f06f 0303 	mvn.w	r3, #3
 80033b8:	e018      	b.n	80033ec <MPU_calibrateGyro+0x218>
  }
  if (MPU_setDlpfBandwidth(MPUType._bandwidth) < 0) {
 80033ba:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <MPU_calibrateGyro+0x220>)
 80033bc:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fbd3 	bl	8002b6c <MPU_setDlpfBandwidth>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	da02      	bge.n	80033d2 <MPU_calibrateGyro+0x1fe>
    return -5;
 80033cc:	f06f 0304 	mvn.w	r3, #4
 80033d0:	e00c      	b.n	80033ec <MPU_calibrateGyro+0x218>
  }
  if (MPU_setSrd(MPUType._srd) < 0) {
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <MPU_calibrateGyro+0x220>)
 80033d4:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fc6d 	bl	8002cb8 <MPU_setSrd>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	da02      	bge.n	80033ea <MPU_calibrateGyro+0x216>
    return -6;
 80033e4:	f06f 0305 	mvn.w	r3, #5
 80033e8:	e000      	b.n	80033ec <MPU_calibrateGyro+0x218>
  }
  return 1;
 80033ea:	2301      	movs	r3, #1
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bdb0      	pop	{r4, r5, r7, pc}
 80033f4:	20000c78 	.word	0x20000c78

080033f8 <_MPU_writeRegister>:


//Private
/* writes a byte to MPU9250 register given a register address and data */
int _MPU_writeRegister(uint8_t subAddress, uint8_t data)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	460a      	mov	r2, r1
 8003402:	71fb      	strb	r3, [r7, #7]
 8003404:	4613      	mov	r3, r2
 8003406:	71bb      	strb	r3, [r7, #6]
	/* write data to device */
    //_spi->beginTransaction(SPISettings(SPI_LS_CLOCK, MSBFIRST, SPI_MODE3)); // begin the transaction
	HAL_GPIO_WritePin(MPU_CS, GPIO_PIN_RESET); 	// select the MPU9250 chip
 8003408:	2200      	movs	r2, #0
 800340a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800340e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003412:	f002 fe83 	bl	800611c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(MPU_SPI, &subAddress, 1, 10);
 8003416:	1df9      	adds	r1, r7, #7
 8003418:	230a      	movs	r3, #10
 800341a:	2201      	movs	r2, #1
 800341c:	480b      	ldr	r0, [pc, #44]	; (800344c <_MPU_writeRegister+0x54>)
 800341e:	f004 f9f7 	bl	8007810 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(MPU_SPI, &data, 1, 10);
 8003422:	1db9      	adds	r1, r7, #6
 8003424:	230a      	movs	r3, #10
 8003426:	2201      	movs	r2, #1
 8003428:	4808      	ldr	r0, [pc, #32]	; (800344c <_MPU_writeRegister+0x54>)
 800342a:	f004 f9f1 	bl	8007810 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(MPU_CS, GPIO_PIN_SET);  		// deselect the MPU9250 chip
 800342e:	2201      	movs	r2, #1
 8003430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003438:	f002 fe70 	bl	800611c <HAL_GPIO_WritePin>
    //_spi->endTransaction(); // end the transaction

    HAL_Delay(10);
 800343c:	200a      	movs	r0, #10
 800343e:	f002 fbbf 	bl	8005bc0 <HAL_Delay>
	//	return 1;
	//}
	//else{
	//	return -1;
	//}
    return 1;
 8003442:	2301      	movs	r3, #1
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000aac 	.word	0x20000aac

08003450 <_MPU_readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
int _MPU_readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	603a      	str	r2, [r7, #0]
 800345a:	71fb      	strb	r3, [r7, #7]
 800345c:	460b      	mov	r3, r1
 800345e:	71bb      	strb	r3, [r7, #6]

    // begin the transaction
	HAL_GPIO_WritePin(MPU_CS, GPIO_PIN_RESET); 	// select the MPU9250 chip
 8003460:	2200      	movs	r2, #0
 8003462:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800346a:	f002 fe57 	bl	800611c <HAL_GPIO_WritePin>
	uint8_t data = subAddress | MPUType.SPI_READ;
 800346e:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <_MPU_readRegisters+0x60>)
 8003470:	781a      	ldrb	r2, [r3, #0]
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	4313      	orrs	r3, r2
 8003476:	b2db      	uxtb	r3, r3
 8003478:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(MPU_SPI, &data, 1, 10);
 800347a:	f107 010f 	add.w	r1, r7, #15
 800347e:	230a      	movs	r3, #10
 8003480:	2201      	movs	r2, #1
 8003482:	480c      	ldr	r0, [pc, #48]	; (80034b4 <_MPU_readRegisters+0x64>)
 8003484:	f004 f9c4 	bl	8007810 <HAL_SPI_Transmit>
    HAL_SPI_Receive(MPU_SPI, dest, count, 10); // read the data
 8003488:	79bb      	ldrb	r3, [r7, #6]
 800348a:	b29a      	uxth	r2, r3
 800348c:	230a      	movs	r3, #10
 800348e:	6839      	ldr	r1, [r7, #0]
 8003490:	4808      	ldr	r0, [pc, #32]	; (80034b4 <_MPU_readRegisters+0x64>)
 8003492:	f004 fb23 	bl	8007adc <HAL_SPI_Receive>
    HAL_GPIO_WritePin(MPU_CS, GPIO_PIN_SET);
 8003496:	2201      	movs	r2, #1
 8003498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800349c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034a0:	f002 fe3c 	bl	800611c <HAL_GPIO_WritePin>
    //_spi->endTransaction(); // end the transaction
    return 1;
 80034a4:	2301      	movs	r3, #1

}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000c78 	.word	0x20000c78
 80034b4:	20000aac 	.word	0x20000aac

080034b8 <_MPU_writeAK8963Register>:


/* writes a register to the AK8963 given a register address and data */
int _MPU_writeAK8963Register(uint8_t subAddress, uint8_t data){
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	460a      	mov	r2, r1
 80034c2:	71fb      	strb	r3, [r7, #7]
 80034c4:	4613      	mov	r3, r2
 80034c6:	71bb      	strb	r3, [r7, #6]
  // set slave 0 to the AK8963 and set for write
	if (_MPU_writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR) < 0) {
 80034c8:	210c      	movs	r1, #12
 80034ca:	2025      	movs	r0, #37	; 0x25
 80034cc:	f7ff ff94 	bl	80033f8 <_MPU_writeRegister>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	da02      	bge.n	80034dc <_MPU_writeAK8963Register+0x24>
    return -1;
 80034d6:	f04f 33ff 	mov.w	r3, #4294967295
 80034da:	e034      	b.n	8003546 <_MPU_writeAK8963Register+0x8e>
  }
  // set the register to the desired AK8963 sub address
	if (_MPU_writeRegister(I2C_SLV0_REG,subAddress) < 0) {
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	4619      	mov	r1, r3
 80034e0:	2026      	movs	r0, #38	; 0x26
 80034e2:	f7ff ff89 	bl	80033f8 <_MPU_writeRegister>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	da02      	bge.n	80034f2 <_MPU_writeAK8963Register+0x3a>
    return -2;
 80034ec:	f06f 0301 	mvn.w	r3, #1
 80034f0:	e029      	b.n	8003546 <_MPU_writeAK8963Register+0x8e>
  }
  // store the data for write
	if (_MPU_writeRegister(I2C_SLV0_DO,data) < 0) {
 80034f2:	79bb      	ldrb	r3, [r7, #6]
 80034f4:	4619      	mov	r1, r3
 80034f6:	2063      	movs	r0, #99	; 0x63
 80034f8:	f7ff ff7e 	bl	80033f8 <_MPU_writeRegister>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	da02      	bge.n	8003508 <_MPU_writeAK8963Register+0x50>
    return -3;
 8003502:	f06f 0302 	mvn.w	r3, #2
 8003506:	e01e      	b.n	8003546 <_MPU_writeAK8963Register+0x8e>
  }
  // enable I2C and send 1 byte
	if (_MPU_writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1) < 0) {
 8003508:	2181      	movs	r1, #129	; 0x81
 800350a:	2027      	movs	r0, #39	; 0x27
 800350c:	f7ff ff74 	bl	80033f8 <_MPU_writeRegister>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	da02      	bge.n	800351c <_MPU_writeAK8963Register+0x64>
    return -4;
 8003516:	f06f 0303 	mvn.w	r3, #3
 800351a:	e014      	b.n	8003546 <_MPU_writeAK8963Register+0x8e>
  }
	// read the register and confirm
	if (_MPU_readAK8963Registers(subAddress,1,MPUType._buffer) < 0) {
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <_MPU_writeAK8963Register+0x98>)
 8003520:	2101      	movs	r1, #1
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f818 	bl	8003558 <_MPU_readAK8963Registers>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	da02      	bge.n	8003534 <_MPU_writeAK8963Register+0x7c>
    return -5;
 800352e:	f06f 0304 	mvn.w	r3, #4
 8003532:	e008      	b.n	8003546 <_MPU_writeAK8963Register+0x8e>
  }
	if(MPUType._buffer[0] == data) {
 8003534:	4b07      	ldr	r3, [pc, #28]	; (8003554 <_MPU_writeAK8963Register+0x9c>)
 8003536:	7c1b      	ldrb	r3, [r3, #16]
 8003538:	79ba      	ldrb	r2, [r7, #6]
 800353a:	429a      	cmp	r2, r3
 800353c:	d101      	bne.n	8003542 <_MPU_writeAK8963Register+0x8a>
  	return 1;
 800353e:	2301      	movs	r3, #1
 8003540:	e001      	b.n	8003546 <_MPU_writeAK8963Register+0x8e>
  } else{
  	return -6;
 8003542:	f06f 0305 	mvn.w	r3, #5
  }
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000c88 	.word	0x20000c88
 8003554:	20000c78 	.word	0x20000c78

08003558 <_MPU_readAK8963Registers>:

/* reads registers from the AK8963 */
int _MPU_readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	603a      	str	r2, [r7, #0]
 8003562:	71fb      	strb	r3, [r7, #7]
 8003564:	460b      	mov	r3, r1
 8003566:	71bb      	strb	r3, [r7, #6]
  // set slave 0 to the AK8963 and set for read
	if (_MPU_writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR | I2C_READ_FLAG) < 0) {
 8003568:	218c      	movs	r1, #140	; 0x8c
 800356a:	2025      	movs	r0, #37	; 0x25
 800356c:	f7ff ff44 	bl	80033f8 <_MPU_writeRegister>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	da02      	bge.n	800357c <_MPU_readAK8963Registers+0x24>
    return -1;
 8003576:	f04f 33ff 	mov.w	r3, #4294967295
 800357a:	e026      	b.n	80035ca <_MPU_readAK8963Registers+0x72>
  }
  // set the register to the desired AK8963 sub address
	if (_MPU_writeRegister(I2C_SLV0_REG,subAddress) < 0) {
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	4619      	mov	r1, r3
 8003580:	2026      	movs	r0, #38	; 0x26
 8003582:	f7ff ff39 	bl	80033f8 <_MPU_writeRegister>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	da02      	bge.n	8003592 <_MPU_readAK8963Registers+0x3a>
    return -2;
 800358c:	f06f 0301 	mvn.w	r3, #1
 8003590:	e01b      	b.n	80035ca <_MPU_readAK8963Registers+0x72>
  }
  // enable I2C and request the bytes
	if (_MPU_writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count) < 0) {
 8003592:	79bb      	ldrb	r3, [r7, #6]
 8003594:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003598:	b2db      	uxtb	r3, r3
 800359a:	4619      	mov	r1, r3
 800359c:	2027      	movs	r0, #39	; 0x27
 800359e:	f7ff ff2b 	bl	80033f8 <_MPU_writeRegister>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	da02      	bge.n	80035ae <_MPU_readAK8963Registers+0x56>
    return -3;
 80035a8:	f06f 0302 	mvn.w	r3, #2
 80035ac:	e00d      	b.n	80035ca <_MPU_readAK8963Registers+0x72>
  }
	HAL_Delay(1); // takes some time for these registers to fill
 80035ae:	2001      	movs	r0, #1
 80035b0:	f002 fb06 	bl	8005bc0 <HAL_Delay>
  // read the bytes off the MPU9250 EXT_SENS_DATA registers
	MPUType._status = _MPU_readRegisters(EXT_SENS_DATA_00,count,dest);
 80035b4:	79bb      	ldrb	r3, [r7, #6]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	4619      	mov	r1, r3
 80035ba:	2049      	movs	r0, #73	; 0x49
 80035bc:	f7ff ff48 	bl	8003450 <_MPU_readRegisters>
 80035c0:	4602      	mov	r2, r0
 80035c2:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <_MPU_readAK8963Registers+0x7c>)
 80035c4:	60da      	str	r2, [r3, #12]
  return MPUType._status;
 80035c6:	4b03      	ldr	r3, [pc, #12]	; (80035d4 <_MPU_readAK8963Registers+0x7c>)
 80035c8:	68db      	ldr	r3, [r3, #12]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000c78 	.word	0x20000c78

080035d8 <_MPU_whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
int _MPU_whoAmI(){
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  // read the WHO AM I register
  if (_MPU_readRegisters(WHO_AM_I,1,MPUType._buffer) < 0) {
 80035dc:	4a07      	ldr	r2, [pc, #28]	; (80035fc <_MPU_whoAmI+0x24>)
 80035de:	2101      	movs	r1, #1
 80035e0:	2075      	movs	r0, #117	; 0x75
 80035e2:	f7ff ff35 	bl	8003450 <_MPU_readRegisters>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	da02      	bge.n	80035f2 <_MPU_whoAmI+0x1a>
    return -1;
 80035ec:	f04f 33ff 	mov.w	r3, #4294967295
 80035f0:	e001      	b.n	80035f6 <_MPU_whoAmI+0x1e>
  }
  // return the register value
  return MPUType._buffer[0];
 80035f2:	4b03      	ldr	r3, [pc, #12]	; (8003600 <_MPU_whoAmI+0x28>)
 80035f4:	7c1b      	ldrb	r3, [r3, #16]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000c88 	.word	0x20000c88
 8003600:	20000c78 	.word	0x20000c78

08003604 <_MPU_whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
int _MPU_whoAmIAK8963(){
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  // read the WHO AM I register
  if (_MPU_readAK8963Registers(AK8963_WHO_AM_I,1,MPUType._buffer) < 0) {
 8003608:	4a07      	ldr	r2, [pc, #28]	; (8003628 <_MPU_whoAmIAK8963+0x24>)
 800360a:	2101      	movs	r1, #1
 800360c:	2000      	movs	r0, #0
 800360e:	f7ff ffa3 	bl	8003558 <_MPU_readAK8963Registers>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	da02      	bge.n	800361e <_MPU_whoAmIAK8963+0x1a>
    return -1;
 8003618:	f04f 33ff 	mov.w	r3, #4294967295
 800361c:	e001      	b.n	8003622 <_MPU_whoAmIAK8963+0x1e>
  }
  // return the register value
  return MPUType._buffer[0];
 800361e:	4b03      	ldr	r3, [pc, #12]	; (800362c <_MPU_whoAmIAK8963+0x28>)
 8003620:	7c1b      	ldrb	r3, [r3, #16]
}
 8003622:	4618      	mov	r0, r3
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000c88 	.word	0x20000c88
 800362c:	20000c78 	.word	0x20000c78

08003630 <AHRS_Init>:

//volatile MadgwickData _AHRS;
volatile AHRS _ahrs;

void AHRS_Init()
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
	_ahrs.q0 = 1.0f;
 8003634:	4b17      	ldr	r3, [pc, #92]	; (8003694 <AHRS_Init+0x64>)
 8003636:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800363a:	601a      	str	r2, [r3, #0]
	_ahrs.q1 = 0.0f;
 800363c:	4b15      	ldr	r3, [pc, #84]	; (8003694 <AHRS_Init+0x64>)
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	605a      	str	r2, [r3, #4]
	_ahrs.q2 = 0.0f;
 8003644:	4b13      	ldr	r3, [pc, #76]	; (8003694 <AHRS_Init+0x64>)
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	609a      	str	r2, [r3, #8]
	_ahrs.q3 = 0.0f;
 800364c:	4b11      	ldr	r3, [pc, #68]	; (8003694 <AHRS_Init+0x64>)
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	60da      	str	r2, [r3, #12]
	_ahrs.SampleFrequency = BaseSampleRate;
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <AHRS_Init+0x64>)
 8003656:	4a10      	ldr	r2, [pc, #64]	; (8003698 <AHRS_Init+0x68>)
 8003658:	611a      	str	r2, [r3, #16]

	_ahrs.Beta = BetaFactor;
 800365a:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <AHRS_Init+0x64>)
 800365c:	4a0f      	ldr	r2, [pc, #60]	; (800369c <AHRS_Init+0x6c>)
 800365e:	615a      	str	r2, [r3, #20]
	_ahrs.twoKp = BasetwoKp;
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <AHRS_Init+0x64>)
 8003662:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003666:	619a      	str	r2, [r3, #24]
	_ahrs.twoKi = BasetwoKi;
 8003668:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <AHRS_Init+0x64>)
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	61da      	str	r2, [r3, #28]

	_ahrs.integralFBx = 0.0f;
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <AHRS_Init+0x64>)
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	621a      	str	r2, [r3, #32]
	_ahrs.integralFBy = 0.0f;
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <AHRS_Init+0x64>)
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	625a      	str	r2, [r3, #36]	; 0x24
	_ahrs.integralFBz = 0.0f;
 8003680:	4b04      	ldr	r3, [pc, #16]	; (8003694 <AHRS_Init+0x64>)
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000dd8 	.word	0x20000dd8
 8003698:	43fa0000 	.word	0x43fa0000
 800369c:	3e4ccccd 	.word	0x3e4ccccd

080036a0 <MadgwickAHRSupdate>:
	_ahrs.q1 *= recipNorm;
	_ahrs.q2 *= recipNorm;
	_ahrs.q3 *= recipNorm;
}

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 80036a0:	b590      	push	{r4, r7, lr}
 80036a2:	b0af      	sub	sp, #188	; 0xbc
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80036aa:	edc7 0a08 	vstr	s1, [r7, #32]
 80036ae:	ed87 1a07 	vstr	s2, [r7, #28]
 80036b2:	edc7 1a06 	vstr	s3, [r7, #24]
 80036b6:	ed87 2a05 	vstr	s4, [r7, #20]
 80036ba:	edc7 2a04 	vstr	s5, [r7, #16]
 80036be:	ed87 3a03 	vstr	s6, [r7, #12]
 80036c2:	edc7 3a02 	vstr	s7, [r7, #8]
 80036c6:	ed87 4a01 	vstr	s8, [r7, #4]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80036ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80036ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80036d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d6:	d11d      	bne.n	8003714 <MadgwickAHRSupdate+0x74>
 80036d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80036dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80036e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e4:	d116      	bne.n	8003714 <MadgwickAHRSupdate+0x74>
 80036e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80036ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80036ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f2:	d10f      	bne.n	8003714 <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 80036f4:	edd7 2a04 	vldr	s5, [r7, #16]
 80036f8:	ed97 2a05 	vldr	s4, [r7, #20]
 80036fc:	edd7 1a06 	vldr	s3, [r7, #24]
 8003700:	ed97 1a07 	vldr	s2, [r7, #28]
 8003704:	edd7 0a08 	vldr	s1, [r7, #32]
 8003708:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800370c:	f000 feee 	bl	80044ec <MadgwickAHRSupdateIMU>
		return;
 8003710:	f000 bee6 	b.w	80044e0 <MadgwickAHRSupdate+0xe40>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-_ahrs.q1 * gx - _ahrs.q2 * gy - _ahrs.q3 * gz);
 8003714:	4be6      	ldr	r3, [pc, #920]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003716:	edd3 7a01 	vldr	s15, [r3, #4]
 800371a:	eeb1 7a67 	vneg.f32	s14, s15
 800371e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003722:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003726:	4be2      	ldr	r3, [pc, #904]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003728:	edd3 6a02 	vldr	s13, [r3, #8]
 800372c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003734:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003738:	4bdd      	ldr	r3, [pc, #884]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 800373a:	edd3 6a03 	vldr	s13, [r3, #12]
 800373e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800374a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800374e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003752:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (_ahrs.q0 * gx + _ahrs.q2 * gz - _ahrs.q3 * gy);
 8003756:	4bd6      	ldr	r3, [pc, #856]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003758:	ed93 7a00 	vldr	s14, [r3]
 800375c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003760:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003764:	4bd2      	ldr	r3, [pc, #840]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003766:	edd3 6a02 	vldr	s13, [r3, #8]
 800376a:	edd7 7a07 	vldr	s15, [r7, #28]
 800376e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003772:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003776:	4bce      	ldr	r3, [pc, #824]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003778:	edd3 6a03 	vldr	s13, [r3, #12]
 800377c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003788:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800378c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003790:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (_ahrs.q0 * gy - _ahrs.q1 * gz + _ahrs.q3 * gx);
 8003794:	4bc6      	ldr	r3, [pc, #792]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003796:	ed93 7a00 	vldr	s14, [r3]
 800379a:	edd7 7a08 	vldr	s15, [r7, #32]
 800379e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037a2:	4bc3      	ldr	r3, [pc, #780]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 80037a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80037a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80037ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037b4:	4bbe      	ldr	r3, [pc, #760]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 80037b6:	edd3 6a03 	vldr	s13, [r3, #12]
 80037ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80037be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80037ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ce:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (_ahrs.q0 * gz + _ahrs.q1 * gy - _ahrs.q2 * gx);
 80037d2:	4bb7      	ldr	r3, [pc, #732]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 80037d4:	ed93 7a00 	vldr	s14, [r3]
 80037d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80037dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037e0:	4bb3      	ldr	r3, [pc, #716]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 80037e2:	edd3 6a01 	vldr	s13, [r3, #4]
 80037e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80037ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037f2:	4baf      	ldr	r3, [pc, #700]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 80037f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80037f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80037fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003804:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003808:	ee67 7a87 	vmul.f32	s15, s15, s14
 800380c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8003810:	edd7 7a06 	vldr	s15, [r7, #24]
 8003814:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381c:	d10e      	bne.n	800383c <MadgwickAHRSupdate+0x19c>
 800381e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003822:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382a:	d107      	bne.n	800383c <MadgwickAHRSupdate+0x19c>
 800382c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003830:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003838:	f000 85b2 	beq.w	80043a0 <MadgwickAHRSupdate+0xd00>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800383c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003840:	edd7 7a06 	vldr	s15, [r7, #24]
 8003844:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003848:	edd7 6a05 	vldr	s13, [r7, #20]
 800384c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003854:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003858:	edd7 6a04 	vldr	s13, [r7, #16]
 800385c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003868:	eeb0 0a67 	vmov.f32	s0, s15
 800386c:	f001 f974 	bl	8004b58 <invSqrt>
 8003870:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 8003874:	ed97 7a06 	vldr	s14, [r7, #24]
 8003878:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800387c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003880:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8003884:	ed97 7a05 	vldr	s14, [r7, #20]
 8003888:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800388c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003890:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;
 8003894:	ed97 7a04 	vldr	s14, [r7, #16]
 8003898:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800389c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a0:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80038a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80038a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80038ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038b0:	edd7 6a02 	vldr	s13, [r7, #8]
 80038b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80038b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038c0:	edd7 6a01 	vldr	s13, [r7, #4]
 80038c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80038c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d0:	eeb0 0a67 	vmov.f32	s0, s15
 80038d4:	f001 f940 	bl	8004b58 <invSqrt>
 80038d8:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 80038dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80038e0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80038e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e8:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 80038ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80038f0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80038f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f8:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 80038fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8003900:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003908:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * _ahrs.q0 * mx;
 800390c:	4b68      	ldr	r3, [pc, #416]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 800390e:	edd3 7a00 	vldr	s15, [r3]
 8003912:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003916:	ed97 7a03 	vldr	s14, [r7, #12]
 800391a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * _ahrs.q0 * my;
 8003922:	4b63      	ldr	r3, [pc, #396]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003924:	edd3 7a00 	vldr	s15, [r3]
 8003928:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800392c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003934:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * _ahrs.q0 * mz;
 8003938:	4b5d      	ldr	r3, [pc, #372]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 800393a:	edd3 7a00 	vldr	s15, [r3]
 800393e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003942:	ed97 7a01 	vldr	s14, [r7, #4]
 8003946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * _ahrs.q1 * mx;
 800394e:	4b58      	ldr	r3, [pc, #352]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003950:	edd3 7a01 	vldr	s15, [r3, #4]
 8003954:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003958:	ed97 7a03 	vldr	s14, [r7, #12]
 800395c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003960:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * _ahrs.q0;
 8003964:	4b52      	ldr	r3, [pc, #328]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003966:	edd3 7a00 	vldr	s15, [r3]
 800396a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800396e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * _ahrs.q1;
 8003972:	4b4f      	ldr	r3, [pc, #316]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003974:	edd3 7a01 	vldr	s15, [r3, #4]
 8003978:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800397c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * _ahrs.q2;
 8003980:	4b4b      	ldr	r3, [pc, #300]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003982:	edd3 7a02 	vldr	s15, [r3, #8]
 8003986:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800398a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * _ahrs.q3;
 800398e:	4b48      	ldr	r3, [pc, #288]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003990:	edd3 7a03 	vldr	s15, [r3, #12]
 8003994:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003998:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * _ahrs.q0 * _ahrs.q2;
 800399c:	4b44      	ldr	r3, [pc, #272]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 800399e:	edd3 7a00 	vldr	s15, [r3]
 80039a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80039a6:	4b42      	ldr	r3, [pc, #264]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 80039a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80039ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * _ahrs.q2 * _ahrs.q3;
 80039b4:	4b3e      	ldr	r3, [pc, #248]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 80039b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80039ba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80039be:	4b3c      	ldr	r3, [pc, #240]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 80039c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80039c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = _ahrs.q0 * _ahrs.q0;
 80039cc:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 80039ce:	ed93 7a00 	vldr	s14, [r3]
 80039d2:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 80039d4:	edd3 7a00 	vldr	s15, [r3]
 80039d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039dc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = _ahrs.q0 * _ahrs.q1;
 80039e0:	4b33      	ldr	r3, [pc, #204]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 80039e2:	ed93 7a00 	vldr	s14, [r3]
 80039e6:	4b32      	ldr	r3, [pc, #200]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 80039e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80039ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = _ahrs.q0 * _ahrs.q2;
 80039f4:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 80039f6:	ed93 7a00 	vldr	s14, [r3]
 80039fa:	4b2d      	ldr	r3, [pc, #180]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 80039fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a04:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = _ahrs.q0 * _ahrs.q3;
 8003a08:	4b29      	ldr	r3, [pc, #164]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003a0a:	ed93 7a00 	vldr	s14, [r3]
 8003a0e:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003a10:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a18:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = _ahrs.q1 * _ahrs.q1;
 8003a1c:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003a1e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a22:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003a24:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = _ahrs.q1 * _ahrs.q2;
 8003a30:	4b1f      	ldr	r3, [pc, #124]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003a32:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a36:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003a38:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a40:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = _ahrs.q1 * _ahrs.q3;
 8003a44:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003a46:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a4a:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003a4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a54:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = _ahrs.q2 * _ahrs.q2;
 8003a58:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003a5a:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a5e:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003a60:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a68:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = _ahrs.q2 * _ahrs.q3;
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003a6e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a72:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003a74:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = _ahrs.q3 * _ahrs.q3;
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003a82:	ed93 7a03 	vldr	s14, [r3, #12]
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003a88:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a90:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * _ahrs.q3 + _2q0mz * _ahrs.q2 + mx * q1q1 + _2q1 * my * _ahrs.q2 + _2q1 * mz * _ahrs.q3 - mx * q2q2 - mx * q3q3;
 8003a94:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a98:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003aa0:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <MadgwickAHRSupdate+0x410>)
 8003aa2:	edd3 6a03 	vldr	s13, [r3, #12]
 8003aa6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aae:	e001      	b.n	8003ab4 <MadgwickAHRSupdate+0x414>
 8003ab0:	20000dd8 	.word	0x20000dd8
 8003ab4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ab8:	4bf4      	ldr	r3, [pc, #976]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003aba:	edd3 6a02 	vldr	s13, [r3, #8]
 8003abe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003aca:	edd7 6a03 	vldr	s13, [r7, #12]
 8003ace:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ad6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ada:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8003ade:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ae2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ae6:	4be9      	ldr	r3, [pc, #932]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003ae8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003af4:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8003af8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003afc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b00:	4be2      	ldr	r3, [pc, #904]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003b02:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b0e:	edd7 6a03 	vldr	s13, [r7, #12]
 8003b12:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b1e:	edd7 6a03 	vldr	s13, [r7, #12]
 8003b22:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003b26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b2e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * _ahrs.q3 + my * q0q0 - _2q0mz * _ahrs.q1 + _2q1mx * _ahrs.q2 - my * q1q1 + my * q2q2 + _2q2 * mz * _ahrs.q3 - my * q3q3;
 8003b32:	4bd6      	ldr	r3, [pc, #856]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003b34:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b38:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b40:	edd7 6a02 	vldr	s13, [r7, #8]
 8003b44:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b50:	4bce      	ldr	r3, [pc, #824]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003b52:	edd3 6a01 	vldr	s13, [r3, #4]
 8003b56:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b62:	4bca      	ldr	r3, [pc, #808]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003b64:	edd3 6a02 	vldr	s13, [r3, #8]
 8003b68:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b74:	edd7 6a02 	vldr	s13, [r7, #8]
 8003b78:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b84:	edd7 6a02 	vldr	s13, [r7, #8]
 8003b88:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003b8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b94:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8003b98:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ba0:	4bba      	ldr	r3, [pc, #744]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003ba2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bae:	edd7 6a02 	vldr	s13, [r7, #8]
 8003bb2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bbe:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8003bc2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003bc6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bce:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8003bd2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bde:	ee17 0a90 	vmov	r0, s15
 8003be2:	f7fc fcb1 	bl	8000548 <__aeabi_f2d>
 8003be6:	4603      	mov	r3, r0
 8003be8:	460c      	mov	r4, r1
 8003bea:	ec44 3b10 	vmov	d0, r3, r4
 8003bee:	f008 fecf 	bl	800c990 <sqrt>
 8003bf2:	ec54 3b10 	vmov	r3, r4, d0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	f7fc fff5 	bl	8000be8 <__aeabi_d2f>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * _ahrs.q2 + _2q0my * _ahrs.q1 + mz * q0q0 + _2q1mx * _ahrs.q3 - mz * q1q1 + _2q2 * my * _ahrs.q3 - mz * q2q2 + mz * q3q3;
 8003c02:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003c06:	eeb1 7a67 	vneg.f32	s14, s15
 8003c0a:	4ba0      	ldr	r3, [pc, #640]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003c0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c14:	4b9d      	ldr	r3, [pc, #628]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003c16:	edd3 6a01 	vldr	s13, [r3, #4]
 8003c1a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003c1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c26:	edd7 6a01 	vldr	s13, [r7, #4]
 8003c2a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c36:	4b95      	ldr	r3, [pc, #596]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003c38:	edd3 6a03 	vldr	s13, [r3, #12]
 8003c3c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c48:	edd7 6a01 	vldr	s13, [r7, #4]
 8003c4c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c58:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8003c5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c64:	4b89      	ldr	r3, [pc, #548]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003c66:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c72:	edd7 6a01 	vldr	s13, [r7, #4]
 8003c76:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c82:	edd7 6a01 	vldr	s13, [r7, #4]
 8003c86:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003c8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c92:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8003c96:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003c9a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c9e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 8003ca2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003ca6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003caa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * _ahrs.q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * _ahrs.q3 + _2bz * _ahrs.q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * _ahrs.q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8003cae:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003cb2:	eeb1 7a67 	vneg.f32	s14, s15
 8003cb6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003cba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003cbe:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003cc2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003cc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003cce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cd2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003cd6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003cda:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003cde:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003ce2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ce6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003cea:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003cee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cf6:	4b65      	ldr	r3, [pc, #404]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003cf8:	edd3 6a02 	vldr	s13, [r3, #8]
 8003cfc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d04:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003d08:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003d0c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003d10:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003d14:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003d18:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003d1c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003d20:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8003d24:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003d28:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003d2c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d30:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003d34:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003d38:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d3c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d48:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003d4c:	eef1 6a67 	vneg.f32	s13, s15
 8003d50:	4b4e      	ldr	r3, [pc, #312]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003d52:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d56:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d5a:	4b4c      	ldr	r3, [pc, #304]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003d5c:	ed93 6a01 	vldr	s12, [r3, #4]
 8003d60:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d64:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003d68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003d6c:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8003d70:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003d74:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003d78:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003d7c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003d80:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8003d84:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003d88:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003d8c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d90:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003d94:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003d98:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d9c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003da4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003da8:	4b38      	ldr	r3, [pc, #224]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003daa:	edd3 6a02 	vldr	s13, [r3, #8]
 8003dae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003db2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003db6:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8003dba:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003dbe:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003dc2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003dc6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003dca:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8003dce:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003dd2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003dd6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003dda:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003dde:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003de2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003de6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003dea:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dee:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfa:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * _ahrs.q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * _ahrs.q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * _ahrs.q2 + _2bz * _ahrs.q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * _ahrs.q3 - _4bz * _ahrs.q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8003dfe:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003e02:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003e06:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003e0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e16:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003e1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e1e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003e22:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003e26:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003e2a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003e2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e32:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e36:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003e3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003e44:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e48:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003e4c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003e50:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003e54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e58:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003e5c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003e60:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003e64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e68:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003e6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e70:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <MadgwickAHRSupdate+0x7ec>)
 8003e7e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003e82:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003e86:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e8a:	e001      	b.n	8003e90 <MadgwickAHRSupdate+0x7f0>
 8003e8c:	20000dd8 	.word	0x20000dd8
 8003e90:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003e94:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003e98:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003e9c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003ea0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003ea4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003ea8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003eac:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8003eb0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003eb4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003eb8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003ebc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003ec0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003ec4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ec8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ed4:	4bf6      	ldr	r3, [pc, #984]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 8003ed6:	edd3 6a02 	vldr	s13, [r3, #8]
 8003eda:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003ede:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ee2:	4bf3      	ldr	r3, [pc, #972]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 8003ee4:	ed93 6a00 	vldr	s12, [r3]
 8003ee8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003eec:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003ef0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003ef4:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8003ef8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003efc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003f00:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003f04:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003f08:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8003f0c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003f10:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003f14:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003f18:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003f1c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003f20:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f24:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f30:	4bdf      	ldr	r3, [pc, #892]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 8003f32:	edd3 6a03 	vldr	s13, [r3, #12]
 8003f36:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003f3a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f3e:	4bdc      	ldr	r3, [pc, #880]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 8003f40:	ed93 6a01 	vldr	s12, [r3, #4]
 8003f44:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003f48:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003f4c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003f50:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8003f54:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003f58:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003f5c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003f60:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003f64:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8003f68:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003f6c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003f70:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003f74:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003f78:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003f7c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003f80:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003f84:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f88:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003f8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f94:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * _ahrs.q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * _ahrs.q2 - _2bz * _ahrs.q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * _ahrs.q1 + _2bz * _ahrs.q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * _ahrs.q0 - _4bz * _ahrs.q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8003f98:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003f9c:	eeb1 7a67 	vneg.f32	s14, s15
 8003fa0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003fa4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003fa8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003fac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003fb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fb4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fbc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003fc0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003fc4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003fc8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003fcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fd0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003fd4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fe0:	4bb3      	ldr	r3, [pc, #716]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 8003fe2:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fe6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003fea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003fee:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003ff2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ff6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003ffa:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003ffe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004002:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004006:	ee36 6a67 	vsub.f32	s12, s12, s15
 800400a:	edd7 7a04 	vldr	s15, [r7, #16]
 800400e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004016:	ee37 7a67 	vsub.f32	s14, s14, s15
 800401a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800401e:	eef1 6a67 	vneg.f32	s13, s15
 8004022:	4ba3      	ldr	r3, [pc, #652]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 8004024:	edd3 7a02 	vldr	s15, [r3, #8]
 8004028:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800402c:	4ba0      	ldr	r3, [pc, #640]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 800402e:	ed93 6a00 	vldr	s12, [r3]
 8004032:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004036:	ee66 7a27 	vmul.f32	s15, s12, s15
 800403a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800403e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004042:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004046:	ee36 6a67 	vsub.f32	s12, s12, s15
 800404a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800404e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004052:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004056:	ee26 6a27 	vmul.f32	s12, s12, s15
 800405a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800405e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8004062:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004066:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800406a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800406e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004072:	edd7 7a03 	vldr	s15, [r7, #12]
 8004076:	ee76 7a67 	vsub.f32	s15, s12, s15
 800407a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800407e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004082:	4b8b      	ldr	r3, [pc, #556]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 8004084:	edd3 6a01 	vldr	s13, [r3, #4]
 8004088:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800408c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004090:	4b87      	ldr	r3, [pc, #540]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 8004092:	ed93 6a03 	vldr	s12, [r3, #12]
 8004096:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800409a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800409e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80040a2:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80040a6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80040aa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80040ae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80040b2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80040b6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80040ba:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80040be:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80040c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80040c6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80040ca:	ee36 6a27 	vadd.f32	s12, s12, s15
 80040ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80040d2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80040d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040de:	4b74      	ldr	r3, [pc, #464]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 80040e0:	edd3 6a00 	vldr	s13, [r3]
 80040e4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80040e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040ec:	4b70      	ldr	r3, [pc, #448]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 80040ee:	ed93 6a02 	vldr	s12, [r3, #8]
 80040f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80040f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80040fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80040fe:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8004102:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004106:	ee36 6a27 	vadd.f32	s12, s12, s15
 800410a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800410e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004112:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8004116:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800411a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800411e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004122:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004126:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800412a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800412e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004132:	edd7 7a01 	vldr	s15, [r7, #4]
 8004136:	ee76 7a67 	vsub.f32	s15, s12, s15
 800413a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800413e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004142:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * _ahrs.q3 + _2bz * _ahrs.q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * _ahrs.q0 + _2bz * _ahrs.q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * _ahrs.q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8004146:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800414a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800414e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004152:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004156:	edd7 7a06 	vldr	s15, [r7, #24]
 800415a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800415e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004166:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800416a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800416e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8004172:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004176:	edd7 7a05 	vldr	s15, [r7, #20]
 800417a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800417e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8004182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800418a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800418e:	eef1 6a67 	vneg.f32	s13, s15
 8004192:	4b47      	ldr	r3, [pc, #284]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 8004194:	edd3 7a03 	vldr	s15, [r3, #12]
 8004198:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800419c:	4b44      	ldr	r3, [pc, #272]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 800419e:	ed93 6a01 	vldr	s12, [r3, #4]
 80041a2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80041a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80041aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80041ae:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80041b2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80041b6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80041ba:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80041be:	ee36 6a67 	vsub.f32	s12, s12, s15
 80041c2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80041c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80041ca:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80041ce:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80041d2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80041d6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80041da:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80041de:	ee36 6a27 	vadd.f32	s12, s12, s15
 80041e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80041e6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80041ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041f2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80041f6:	eef1 6a67 	vneg.f32	s13, s15
 80041fa:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 80041fc:	edd3 7a00 	vldr	s15, [r3]
 8004200:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004204:	4b2a      	ldr	r3, [pc, #168]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 8004206:	ed93 6a02 	vldr	s12, [r3, #8]
 800420a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800420e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004212:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004216:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800421a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800421e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004222:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004226:	ee26 6a27 	vmul.f32	s12, s12, s15
 800422a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800422e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004232:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004236:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800423a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800423e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004242:	edd7 7a02 	vldr	s15, [r7, #8]
 8004246:	ee76 7a67 	vsub.f32	s15, s12, s15
 800424a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800424e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004252:	4b17      	ldr	r3, [pc, #92]	; (80042b0 <MadgwickAHRSupdate+0xc10>)
 8004254:	edd3 6a01 	vldr	s13, [r3, #4]
 8004258:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800425c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004260:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8004264:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004268:	ee36 6a27 	vadd.f32	s12, s12, s15
 800426c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004270:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004274:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8004278:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800427c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004280:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004284:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004288:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800428c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004290:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004294:	edd7 7a01 	vldr	s15, [r7, #4]
 8004298:	ee76 7a67 	vsub.f32	s15, s12, s15
 800429c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042a4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80042a8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80042ac:	e002      	b.n	80042b4 <MadgwickAHRSupdate+0xc14>
 80042ae:	bf00      	nop
 80042b0:	20000dd8 	.word	0x20000dd8
 80042b4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80042b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042bc:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80042c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80042c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042cc:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80042d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80042d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042dc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80042e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80042e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ec:	eeb0 0a67 	vmov.f32	s0, s15
 80042f0:	f000 fc32 	bl	8004b58 <invSqrt>
 80042f4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 80042f8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80042fc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004304:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8004308:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800430c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004314:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8004318:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800431c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004324:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8004328:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800432c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004334:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= _ahrs.Beta * s0;
 8004338:	4b6b      	ldr	r3, [pc, #428]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 800433a:	ed93 7a05 	vldr	s14, [r3, #20]
 800433e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800434a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800434e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= _ahrs.Beta * s1;
 8004352:	4b65      	ldr	r3, [pc, #404]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 8004354:	ed93 7a05 	vldr	s14, [r3, #20]
 8004358:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800435c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004360:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004368:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= _ahrs.Beta * s2;
 800436c:	4b5e      	ldr	r3, [pc, #376]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 800436e:	ed93 7a05 	vldr	s14, [r3, #20]
 8004372:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800437e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004382:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= _ahrs.Beta * s3;
 8004386:	4b58      	ldr	r3, [pc, #352]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 8004388:	ed93 7a05 	vldr	s14, [r3, #20]
 800438c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004394:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8004398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800439c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	_ahrs.q0 += qDot1 * (1.0f / _ahrs.SampleFrequency);
 80043a0:	4b51      	ldr	r3, [pc, #324]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 80043a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80043a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ae:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80043b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043b6:	4b4c      	ldr	r3, [pc, #304]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 80043b8:	edd3 7a00 	vldr	s15, [r3]
 80043bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043c0:	4b49      	ldr	r3, [pc, #292]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 80043c2:	edc3 7a00 	vstr	s15, [r3]
	_ahrs.q1 += qDot2 * (1.0f / _ahrs.SampleFrequency);
 80043c6:	4b48      	ldr	r3, [pc, #288]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 80043c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80043cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80043d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043dc:	4b42      	ldr	r3, [pc, #264]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 80043de:	edd3 7a01 	vldr	s15, [r3, #4]
 80043e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043e6:	4b40      	ldr	r3, [pc, #256]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 80043e8:	edc3 7a01 	vstr	s15, [r3, #4]
	_ahrs.q2 += qDot3 * (1.0f / _ahrs.SampleFrequency);
 80043ec:	4b3e      	ldr	r3, [pc, #248]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 80043ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80043f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fa:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80043fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004402:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 8004404:	edd3 7a02 	vldr	s15, [r3, #8]
 8004408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800440c:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 800440e:	edc3 7a02 	vstr	s15, [r3, #8]
	_ahrs.q3 += qDot4 * (1.0f / _ahrs.SampleFrequency);
 8004412:	4b35      	ldr	r3, [pc, #212]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 8004414:	edd3 7a04 	vldr	s15, [r3, #16]
 8004418:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800441c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004420:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004424:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004428:	4b2f      	ldr	r3, [pc, #188]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 800442a:	edd3 7a03 	vldr	s15, [r3, #12]
 800442e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004432:	4b2d      	ldr	r3, [pc, #180]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 8004434:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(_ahrs.q0 * _ahrs.q0 + _ahrs.q1 * _ahrs.q1 + _ahrs.q2 * _ahrs.q2 + _ahrs.q3 * _ahrs.q3);
 8004438:	4b2b      	ldr	r3, [pc, #172]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 800443a:	ed93 7a00 	vldr	s14, [r3]
 800443e:	4b2a      	ldr	r3, [pc, #168]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 8004440:	edd3 7a00 	vldr	s15, [r3]
 8004444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004448:	4b27      	ldr	r3, [pc, #156]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 800444a:	edd3 6a01 	vldr	s13, [r3, #4]
 800444e:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 8004450:	edd3 7a01 	vldr	s15, [r3, #4]
 8004454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800445c:	4b22      	ldr	r3, [pc, #136]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 800445e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004462:	4b21      	ldr	r3, [pc, #132]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 8004464:	edd3 7a02 	vldr	s15, [r3, #8]
 8004468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800446c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004470:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 8004472:	edd3 6a03 	vldr	s13, [r3, #12]
 8004476:	4b1c      	ldr	r3, [pc, #112]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 8004478:	edd3 7a03 	vldr	s15, [r3, #12]
 800447c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004484:	eeb0 0a67 	vmov.f32	s0, s15
 8004488:	f000 fb66 	bl	8004b58 <invSqrt>
 800448c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	_ahrs.q0 *= recipNorm;
 8004490:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 8004492:	ed93 7a00 	vldr	s14, [r3]
 8004496:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800449a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449e:	4b12      	ldr	r3, [pc, #72]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 80044a0:	edc3 7a00 	vstr	s15, [r3]
	_ahrs.q1 *= recipNorm;
 80044a4:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 80044a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80044aa:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80044ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b2:	4b0d      	ldr	r3, [pc, #52]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 80044b4:	edc3 7a01 	vstr	s15, [r3, #4]
	_ahrs.q2 *= recipNorm;
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 80044ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80044be:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80044c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c6:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 80044c8:	edc3 7a02 	vstr	s15, [r3, #8]
	_ahrs.q3 *= recipNorm;
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 80044ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80044d2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80044d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044da:	4b03      	ldr	r3, [pc, #12]	; (80044e8 <MadgwickAHRSupdate+0xe48>)
 80044dc:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80044e0:	37bc      	adds	r7, #188	; 0xbc
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd90      	pop	{r4, r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000dd8 	.word	0x20000dd8

080044ec <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b09c      	sub	sp, #112	; 0x70
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	ed87 0a05 	vstr	s0, [r7, #20]
 80044f6:	edc7 0a04 	vstr	s1, [r7, #16]
 80044fa:	ed87 1a03 	vstr	s2, [r7, #12]
 80044fe:	edc7 1a02 	vstr	s3, [r7, #8]
 8004502:	ed87 2a01 	vstr	s4, [r7, #4]
 8004506:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-_ahrs.q1 * gx - _ahrs.q2 * gy - _ahrs.q3 * gz);
 800450a:	4bee      	ldr	r3, [pc, #952]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 800450c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004510:	eeb1 7a67 	vneg.f32	s14, s15
 8004514:	edd7 7a05 	vldr	s15, [r7, #20]
 8004518:	ee27 7a27 	vmul.f32	s14, s14, s15
 800451c:	4be9      	ldr	r3, [pc, #932]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 800451e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004522:	edd7 7a04 	vldr	s15, [r7, #16]
 8004526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800452a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800452e:	4be5      	ldr	r3, [pc, #916]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 8004530:	edd3 6a03 	vldr	s13, [r3, #12]
 8004534:	edd7 7a03 	vldr	s15, [r7, #12]
 8004538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800453c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004540:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004544:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004548:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (_ahrs.q0 * gx + _ahrs.q2 * gz - _ahrs.q3 * gy);
 800454c:	4bdd      	ldr	r3, [pc, #884]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 800454e:	ed93 7a00 	vldr	s14, [r3]
 8004552:	edd7 7a05 	vldr	s15, [r7, #20]
 8004556:	ee27 7a27 	vmul.f32	s14, s14, s15
 800455a:	4bda      	ldr	r3, [pc, #872]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 800455c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004560:	edd7 7a03 	vldr	s15, [r7, #12]
 8004564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800456c:	4bd5      	ldr	r3, [pc, #852]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 800456e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004572:	edd7 7a04 	vldr	s15, [r7, #16]
 8004576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800457a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800457e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004586:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (_ahrs.q0 * gy - _ahrs.q1 * gz + _ahrs.q3 * gx);
 800458a:	4bce      	ldr	r3, [pc, #824]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 800458c:	ed93 7a00 	vldr	s14, [r3]
 8004590:	edd7 7a04 	vldr	s15, [r7, #16]
 8004594:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004598:	4bca      	ldr	r3, [pc, #808]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 800459a:	edd3 6a01 	vldr	s13, [r3, #4]
 800459e:	edd7 7a03 	vldr	s15, [r7, #12]
 80045a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045aa:	4bc6      	ldr	r3, [pc, #792]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 80045ac:	edd3 6a03 	vldr	s13, [r3, #12]
 80045b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80045b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80045c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045c4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (_ahrs.q0 * gz + _ahrs.q1 * gy - _ahrs.q2 * gx);
 80045c8:	4bbe      	ldr	r3, [pc, #760]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 80045ca:	ed93 7a00 	vldr	s14, [r3]
 80045ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80045d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045d6:	4bbb      	ldr	r3, [pc, #748]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 80045d8:	edd3 6a01 	vldr	s13, [r3, #4]
 80045dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80045e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045e8:	4bb6      	ldr	r3, [pc, #728]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 80045ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80045ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80045f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80045fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004602:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8004606:	edd7 7a02 	vldr	s15, [r7, #8]
 800460a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004612:	d10e      	bne.n	8004632 <MadgwickAHRSupdateIMU+0x146>
 8004614:	edd7 7a01 	vldr	s15, [r7, #4]
 8004618:	eef5 7a40 	vcmp.f32	s15, #0.0
 800461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004620:	d107      	bne.n	8004632 <MadgwickAHRSupdateIMU+0x146>
 8004622:	edd7 7a00 	vldr	s15, [r7]
 8004626:	eef5 7a40 	vcmp.f32	s15, #0.0
 800462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462e:	f000 81ed 	beq.w	8004a0c <MadgwickAHRSupdateIMU+0x520>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8004632:	ed97 7a02 	vldr	s14, [r7, #8]
 8004636:	edd7 7a02 	vldr	s15, [r7, #8]
 800463a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800463e:	edd7 6a01 	vldr	s13, [r7, #4]
 8004642:	edd7 7a01 	vldr	s15, [r7, #4]
 8004646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800464a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800464e:	edd7 6a00 	vldr	s13, [r7]
 8004652:	edd7 7a00 	vldr	s15, [r7]
 8004656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800465a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800465e:	eeb0 0a67 	vmov.f32	s0, s15
 8004662:	f000 fa79 	bl	8004b58 <invSqrt>
 8004666:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 800466a:	ed97 7a02 	vldr	s14, [r7, #8]
 800466e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004676:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 800467a:	ed97 7a01 	vldr	s14, [r7, #4]
 800467e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004686:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;
 800468a:	ed97 7a00 	vldr	s14, [r7]
 800468e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004696:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * _ahrs.q0;
 800469a:	4b8a      	ldr	r3, [pc, #552]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 800469c:	edd3 7a00 	vldr	s15, [r3]
 80046a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80046a4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * _ahrs.q1;
 80046a8:	4b86      	ldr	r3, [pc, #536]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 80046aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80046ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80046b2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * _ahrs.q2;
 80046b6:	4b83      	ldr	r3, [pc, #524]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 80046b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80046bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80046c0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * _ahrs.q3;
 80046c4:	4b7f      	ldr	r3, [pc, #508]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 80046c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80046ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80046ce:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * _ahrs.q0;
 80046d2:	4b7c      	ldr	r3, [pc, #496]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 80046d4:	edd3 7a00 	vldr	s15, [r3]
 80046d8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80046dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046e0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * _ahrs.q1;
 80046e4:	4b77      	ldr	r3, [pc, #476]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 80046e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80046ea:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80046ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046f2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * _ahrs.q2;
 80046f6:	4b73      	ldr	r3, [pc, #460]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 80046f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80046fc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004700:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004704:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * _ahrs.q1;
 8004708:	4b6e      	ldr	r3, [pc, #440]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 800470a:	edd3 7a01 	vldr	s15, [r3, #4]
 800470e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8004712:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004716:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * _ahrs.q2;
 800471a:	4b6a      	ldr	r3, [pc, #424]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 800471c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004720:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8004724:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004728:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = _ahrs.q0 * _ahrs.q0;
 800472c:	4b65      	ldr	r3, [pc, #404]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 800472e:	ed93 7a00 	vldr	s14, [r3]
 8004732:	4b64      	ldr	r3, [pc, #400]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 8004734:	edd3 7a00 	vldr	s15, [r3]
 8004738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = _ahrs.q1 * _ahrs.q1;
 8004740:	4b60      	ldr	r3, [pc, #384]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 8004742:	ed93 7a01 	vldr	s14, [r3, #4]
 8004746:	4b5f      	ldr	r3, [pc, #380]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 8004748:	edd3 7a01 	vldr	s15, [r3, #4]
 800474c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004750:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = _ahrs.q2 * _ahrs.q2;
 8004754:	4b5b      	ldr	r3, [pc, #364]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 8004756:	ed93 7a02 	vldr	s14, [r3, #8]
 800475a:	4b5a      	ldr	r3, [pc, #360]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 800475c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004764:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = _ahrs.q3 * _ahrs.q3;
 8004768:	4b56      	ldr	r3, [pc, #344]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 800476a:	ed93 7a03 	vldr	s14, [r3, #12]
 800476e:	4b55      	ldr	r3, [pc, #340]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 8004770:	edd3 7a03 	vldr	s15, [r3, #12]
 8004774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004778:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800477c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004780:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004788:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800478c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004794:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004798:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800479c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80047a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047a8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80047ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80047b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * _ahrs.q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80047bc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80047c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80047c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047c8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80047cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80047d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80047dc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80047e0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80047e4:	4b37      	ldr	r3, [pc, #220]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 80047e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80047ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047f2:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80047f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80047fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004802:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004806:	ee37 7a67 	vsub.f32	s14, s14, s15
 800480a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800480e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800481a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800481e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004826:	ee37 7a27 	vadd.f32	s14, s14, s15
 800482a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800482e:	edd7 7a00 	vldr	s15, [r7]
 8004832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800483a:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * _ahrs.q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800483e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004842:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004846:	ee27 7a87 	vmul.f32	s14, s15, s14
 800484a:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <MadgwickAHRSupdateIMU+0x3d8>)
 800484c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004850:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004854:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8004858:	edd7 7a02 	vldr	s15, [r7, #8]
 800485c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004860:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004864:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8004868:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800486c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004870:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004874:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8004878:	edd7 7a01 	vldr	s15, [r7, #4]
 800487c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004880:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004884:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004888:	ee37 7a67 	vsub.f32	s14, s14, s15
 800488c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8004890:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004898:	ee37 7a27 	vadd.f32	s14, s14, s15
 800489c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80048a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80048a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048ac:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80048b0:	edd7 7a00 	vldr	s15, [r7]
 80048b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048bc:	edc7 7a07 	vstr	s15, [r7, #28]
 80048c0:	e002      	b.n	80048c8 <MadgwickAHRSupdateIMU+0x3dc>
 80048c2:	bf00      	nop
 80048c4:	20000dd8 	.word	0x20000dd8
		s3 = 4.0f * q1q1 * _ahrs.q3 - _2q1 * ax + 4.0f * q2q2 * _ahrs.q3 - _2q2 * ay;
 80048c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80048cc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80048d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80048d4:	4b9f      	ldr	r3, [pc, #636]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 80048d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80048da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048de:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80048e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80048e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80048f2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80048f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80048fa:	4b96      	ldr	r3, [pc, #600]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 80048fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8004900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004908:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800490c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004918:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800491c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004920:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004924:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004928:	edd7 6a08 	vldr	s13, [r7, #32]
 800492c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004934:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004938:	edd7 6a07 	vldr	s13, [r7, #28]
 800493c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004948:	edd7 6a06 	vldr	s13, [r7, #24]
 800494c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004958:	eeb0 0a67 	vmov.f32	s0, s15
 800495c:	f000 f8fc 	bl	8004b58 <invSqrt>
 8004960:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8004964:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004968:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800496c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004970:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8004974:	ed97 7a08 	vldr	s14, [r7, #32]
 8004978:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800497c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004980:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8004984:	ed97 7a07 	vldr	s14, [r7, #28]
 8004988:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800498c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004990:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8004994:	ed97 7a06 	vldr	s14, [r7, #24]
 8004998:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800499c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a0:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= _ahrs.Beta * s0;
 80049a4:	4b6b      	ldr	r3, [pc, #428]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 80049a6:	ed93 7a05 	vldr	s14, [r3, #20]
 80049aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80049b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ba:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= _ahrs.Beta * s1;
 80049be:	4b65      	ldr	r3, [pc, #404]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 80049c0:	ed93 7a05 	vldr	s14, [r3, #20]
 80049c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80049c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049cc:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80049d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049d4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= _ahrs.Beta * s2;
 80049d8:	4b5e      	ldr	r3, [pc, #376]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 80049da:	ed93 7a05 	vldr	s14, [r3, #20]
 80049de:	edd7 7a07 	vldr	s15, [r7, #28]
 80049e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e6:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80049ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ee:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= _ahrs.Beta * s3;
 80049f2:	4b58      	ldr	r3, [pc, #352]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 80049f4:	ed93 7a05 	vldr	s14, [r3, #20]
 80049f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80049fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a00:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a08:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	_ahrs.q0 += qDot1 * (1.0f / _ahrs.SampleFrequency);
 8004a0c:	4b51      	ldr	r3, [pc, #324]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004a0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a22:	4b4c      	ldr	r3, [pc, #304]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004a24:	edd3 7a00 	vldr	s15, [r3]
 8004a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a2c:	4b49      	ldr	r3, [pc, #292]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004a2e:	edc3 7a00 	vstr	s15, [r3]
	_ahrs.q1 += qDot2 * (1.0f / _ahrs.SampleFrequency);
 8004a32:	4b48      	ldr	r3, [pc, #288]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004a34:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a40:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004a44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a48:	4b42      	ldr	r3, [pc, #264]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004a4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a52:	4b40      	ldr	r3, [pc, #256]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004a54:	edc3 7a01 	vstr	s15, [r3, #4]
	_ahrs.q2 += qDot3 * (1.0f / _ahrs.SampleFrequency);
 8004a58:	4b3e      	ldr	r3, [pc, #248]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004a5a:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a66:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a6e:	4b39      	ldr	r3, [pc, #228]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004a70:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a78:	4b36      	ldr	r3, [pc, #216]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004a7a:	edc3 7a02 	vstr	s15, [r3, #8]
	_ahrs.q3 += qDot4 * (1.0f / _ahrs.SampleFrequency);
 8004a7e:	4b35      	ldr	r3, [pc, #212]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004a80:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a94:	4b2f      	ldr	r3, [pc, #188]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004a96:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a9e:	4b2d      	ldr	r3, [pc, #180]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004aa0:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(_ahrs.q0 * _ahrs.q0 + _ahrs.q1 * _ahrs.q1 + _ahrs.q2 * _ahrs.q2 + _ahrs.q3 * _ahrs.q3);
 8004aa4:	4b2b      	ldr	r3, [pc, #172]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004aa6:	ed93 7a00 	vldr	s14, [r3]
 8004aaa:	4b2a      	ldr	r3, [pc, #168]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004aac:	edd3 7a00 	vldr	s15, [r3]
 8004ab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ab4:	4b27      	ldr	r3, [pc, #156]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004ab6:	edd3 6a01 	vldr	s13, [r3, #4]
 8004aba:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004abc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ac0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ac8:	4b22      	ldr	r3, [pc, #136]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004aca:	edd3 6a02 	vldr	s13, [r3, #8]
 8004ace:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004ad0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004adc:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004ade:	edd3 6a03 	vldr	s13, [r3, #12]
 8004ae2:	4b1c      	ldr	r3, [pc, #112]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004ae4:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ae8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004af0:	eeb0 0a67 	vmov.f32	s0, s15
 8004af4:	f000 f830 	bl	8004b58 <invSqrt>
 8004af8:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	_ahrs.q0 *= recipNorm;
 8004afc:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004afe:	ed93 7a00 	vldr	s14, [r3]
 8004b02:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0a:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004b0c:	edc3 7a00 	vstr	s15, [r3]
	_ahrs.q1 *= recipNorm;
 8004b10:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004b12:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b16:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004b20:	edc3 7a01 	vstr	s15, [r3, #4]
	_ahrs.q2 *= recipNorm;
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004b26:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b2a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b32:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004b34:	edc3 7a02 	vstr	s15, [r3, #8]
	_ahrs.q3 *= recipNorm;
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004b3a:	ed93 7a03 	vldr	s14, [r3, #12]
 8004b3e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b46:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <MadgwickAHRSupdateIMU+0x668>)
 8004b48:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004b4c:	bf00      	nop
 8004b4e:	3770      	adds	r7, #112	; 0x70
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20000dd8 	.word	0x20000dd8

08004b58 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8004b62:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b6e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8004b76:	f107 0310 	add.w	r3, r7, #16
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	105a      	asrs	r2, r3, #1
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <invSqrt+0x74>)
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8004b88:	f107 030c 	add.w	r3, r7, #12
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8004b90:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b94:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004ba8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bac:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb4:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	ee07 3a90 	vmov	s15, r3
}
 8004bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	5f3759df 	.word	0x5f3759df

08004bd0 <SDSPI_SendCMD>:
 */

#include "SD_SPI/sd_spi.h"
#include <string.h>

uint8_t SDSPI_SendCMD(SPI_HandleTypeDef *phandle, uint8_t cmd, uint32_t arg, uint8_t crc) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	460b      	mov	r3, r1
 8004bde:	72fb      	strb	r3, [r7, #11]
 8004be0:	4613      	mov	r3, r2
 8004be2:	72bb      	strb	r3, [r7, #10]
	uint8_t buf[6];
	buf[0] = cmd | 0x40;
 8004be4:	7afb      	ldrb	r3, [r7, #11]
 8004be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	743b      	strb	r3, [r7, #16]
	buf[1] = (arg >> 24) & 0xff;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	0e1b      	lsrs	r3, r3, #24
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	747b      	strb	r3, [r7, #17]
	buf[2] = (arg >> 16) & 0xff;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	74bb      	strb	r3, [r7, #18]
	buf[3] = (arg >> 8) & 0xff;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	0a1b      	lsrs	r3, r3, #8
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	74fb      	strb	r3, [r7, #19]
	buf[4] = arg & 0xff;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	753b      	strb	r3, [r7, #20]
	buf[5] = crc;
 8004c0c:	7abb      	ldrb	r3, [r7, #10]
 8004c0e:	757b      	strb	r3, [r7, #21]

	if(HAL_SPI_Transmit(phandle, buf, 6, 1000) != HAL_OK) {
 8004c10:	f107 0110 	add.w	r1, r7, #16
 8004c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c18:	2206      	movs	r2, #6
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f002 fdf8 	bl	8007810 <HAL_SPI_Transmit>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <SDSPI_SendCMD+0x5a>
		return 1;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <SDSPI_SendCMD+0x5c>
	}

	return 0;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <SDSPI_Response>:

uint8_t SDSPI_Response(SPI_HandleTypeDef *phandle, uint8_t *buf, uint16_t size) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	80fb      	strh	r3, [r7, #6]
	uint8_t tx = 0xff;
 8004c42:	23ff      	movs	r3, #255	; 0xff
 8004c44:	74fb      	strb	r3, [r7, #19]
	uint8_t rx = 0xff;
 8004c46:	23ff      	movs	r3, #255	; 0xff
 8004c48:	74bb      	strb	r3, [r7, #18]
	uint8_t i = 0;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	75fb      	strb	r3, [r7, #23]

	while(rx == 0xff) {
 8004c4e:	e017      	b.n	8004c80 <SDSPI_Response+0x4c>
		if(HAL_SPI_TransmitReceive(phandle, &tx, &rx, 1, 1000) != HAL_OK) {
 8004c50:	f107 0212 	add.w	r2, r7, #18
 8004c54:	f107 0113 	add.w	r1, r7, #19
 8004c58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	2301      	movs	r3, #1
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f003 f863 	bl	8007d2c <HAL_SPI_TransmitReceive>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <SDSPI_Response+0x3c>
			return 1;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e02d      	b.n	8004ccc <SDSPI_Response+0x98>
		}
		i++;
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	3301      	adds	r3, #1
 8004c74:	75fb      	strb	r3, [r7, #23]
		if(i > 8) {
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d901      	bls.n	8004c80 <SDSPI_Response+0x4c>
			return 2;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e025      	b.n	8004ccc <SDSPI_Response+0x98>
	while(rx == 0xff) {
 8004c80:	7cbb      	ldrb	r3, [r7, #18]
 8004c82:	2bff      	cmp	r3, #255	; 0xff
 8004c84:	d0e4      	beq.n	8004c50 <SDSPI_Response+0x1c>
		}
	}

	*buf = rx;
 8004c86:	7cba      	ldrb	r2, [r7, #18]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	701a      	strb	r2, [r3, #0]

	for(uint16_t k = 1; k < size; k++) {
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	82bb      	strh	r3, [r7, #20]
 8004c90:	e017      	b.n	8004cc2 <SDSPI_Response+0x8e>
		if(HAL_SPI_TransmitReceive(phandle, &tx, &rx, 1, 1000) != HAL_OK) {
 8004c92:	f107 0212 	add.w	r2, r7, #18
 8004c96:	f107 0113 	add.w	r1, r7, #19
 8004c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f003 f842 	bl	8007d2c <HAL_SPI_TransmitReceive>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <SDSPI_Response+0x7e>
			return 1;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e00c      	b.n	8004ccc <SDSPI_Response+0x98>
		}
		*(buf + k) = rx;
 8004cb2:	8abb      	ldrh	r3, [r7, #20]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	7cba      	ldrb	r2, [r7, #18]
 8004cba:	701a      	strb	r2, [r3, #0]
	for(uint16_t k = 1; k < size; k++) {
 8004cbc:	8abb      	ldrh	r3, [r7, #20]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	82bb      	strh	r3, [r7, #20]
 8004cc2:	8aba      	ldrh	r2, [r7, #20]
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d3e3      	bcc.n	8004c92 <SDSPI_Response+0x5e>
	}

	return 0;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <SDSPI_CMD>:

uint8_t SDSPI_CMD(SPI_HandleTypeDef *phandle, uint8_t cmd, uint32_t arg, uint8_t crc,
					uint8_t *response, uint8_t size) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	72fb      	strb	r3, [r7, #11]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_RESET);
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cf2:	f001 fa13 	bl	800611c <HAL_GPIO_WritePin>

	uint8_t res = SDSPI_SendCMD(phandle, cmd, arg, crc);
 8004cf6:	7abb      	ldrb	r3, [r7, #10]
 8004cf8:	7af9      	ldrb	r1, [r7, #11]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff ff67 	bl	8004bd0 <SDSPI_SendCMD>
 8004d02:	4603      	mov	r3, r0
 8004d04:	75fb      	strb	r3, [r7, #23]
	if(res > 0) {
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d008      	beq.n	8004d1e <SDSPI_CMD+0x4a>
		HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d16:	f001 fa01 	bl	800611c <HAL_GPIO_WritePin>
		return 1;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e033      	b.n	8004d86 <SDSPI_CMD+0xb2>
	}

	res = SDSPI_Response(phandle, response, size);
 8004d1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	461a      	mov	r2, r3
 8004d26:	6a39      	ldr	r1, [r7, #32]
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f7ff ff83 	bl	8004c34 <SDSPI_Response>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	75fb      	strb	r3, [r7, #23]
	if(res > 0) {
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <SDSPI_CMD+0x76>
		HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d42:	f001 f9eb 	bl	800611c <HAL_GPIO_WritePin>
		return 2;
 8004d46:	2302      	movs	r3, #2
 8004d48:	e01d      	b.n	8004d86 <SDSPI_CMD+0xb2>
	}

	HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d54:	f001 f9e2 	bl	800611c <HAL_GPIO_WritePin>
	uint8_t tx = 0xff;
 8004d58:	23ff      	movs	r3, #255	; 0xff
 8004d5a:	75bb      	strb	r3, [r7, #22]
	if(HAL_SPI_Transmit(phandle, &tx, 1, 1000) != HAL_OK) {
 8004d5c:	f107 0116 	add.w	r1, r7, #22
 8004d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d64:	2201      	movs	r2, #1
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f002 fd52 	bl	8007810 <HAL_SPI_Transmit>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d008      	beq.n	8004d84 <SDSPI_CMD+0xb0>
		HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 8004d72:	2201      	movs	r2, #1
 8004d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d7c:	f001 f9ce 	bl	800611c <HAL_GPIO_WritePin>
		return 3;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e000      	b.n	8004d86 <SDSPI_CMD+0xb2>
	}

	return 0;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <SDSPI_ACMD>:

uint8_t SDSPI_ACMD(SPI_HandleTypeDef *phandle, uint8_t cmd, uint32_t arg, uint8_t crc,
					uint8_t *response, uint8_t size) {
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b088      	sub	sp, #32
 8004d92:	af02      	add	r7, sp, #8
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	72fb      	strb	r3, [r7, #11]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	72bb      	strb	r3, [r7, #10]
	uint8_t rx = 0;
 8004da2:	2300      	movs	r3, #0
 8004da4:	75bb      	strb	r3, [r7, #22]

	uint8_t res = SDSPI_CMD(phandle, 55, 0, 0x65, &rx, 1);
 8004da6:	2301      	movs	r3, #1
 8004da8:	9301      	str	r3, [sp, #4]
 8004daa:	f107 0316 	add.w	r3, r7, #22
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	2365      	movs	r3, #101	; 0x65
 8004db2:	2200      	movs	r2, #0
 8004db4:	2137      	movs	r1, #55	; 0x37
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f7ff ff8c 	bl	8004cd4 <SDSPI_CMD>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	75fb      	strb	r3, [r7, #23]
	if(res > 0) {
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <SDSPI_ACMD+0x3c>
		return 1;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e01a      	b.n	8004e00 <SDSPI_ACMD+0x72>
	}
	if((rx & 0xf4) > 0) {
 8004dca:	7dbb      	ldrb	r3, [r7, #22]
 8004dcc:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	dd01      	ble.n	8004dd8 <SDSPI_ACMD+0x4a>
		return 2;
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e013      	b.n	8004e00 <SDSPI_ACMD+0x72>
	}

	res = SDSPI_CMD(phandle, cmd, arg, crc, response, size);
 8004dd8:	7aba      	ldrb	r2, [r7, #10]
 8004dda:	7af9      	ldrb	r1, [r7, #11]
 8004ddc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	4613      	mov	r3, r2
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f7ff ff72 	bl	8004cd4 <SDSPI_CMD>
 8004df0:	4603      	mov	r3, r0
 8004df2:	75fb      	strb	r3, [r7, #23]
	if(res > 0) {
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <SDSPI_ACMD+0x70>
		return 3;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e000      	b.n	8004e00 <SDSPI_ACMD+0x72>
	}

	return 0;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <SDSPI_Init>:

uint8_t SDSPI_Init(SPI_HandleTypeDef *phandle) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 8004e10:	2201      	movs	r2, #1
 8004e12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e1a:	f001 f97f 	bl	800611c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8004e1e:	200a      	movs	r0, #10
 8004e20:	f000 fece 	bl	8005bc0 <HAL_Delay>
	uint8_t buf[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8004e24:	4a8e      	ldr	r2, [pc, #568]	; (8005060 <SDSPI_Init+0x258>)
 8004e26:	f107 030c 	add.w	r3, r7, #12
 8004e2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e2c:	c303      	stmia	r3!, {r0, r1}
 8004e2e:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(phandle, buf, 10, 1000) != HAL_OK) {
 8004e30:	f107 010c 	add.w	r1, r7, #12
 8004e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e38:	220a      	movs	r2, #10
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f002 fce8 	bl	8007810 <HAL_SPI_Transmit>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <SDSPI_Init+0x42>
		return 1; //spi error
 8004e46:	2301      	movs	r3, #1
 8004e48:	e106      	b.n	8005058 <SDSPI_Init+0x250>
	}

	uint8_t res = SDSPI_CMD(phandle, 0, 0, 0x95, buf, 1);
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	f107 030c 	add.w	r3, r7, #12
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	2395      	movs	r3, #149	; 0x95
 8004e56:	2200      	movs	r2, #0
 8004e58:	2100      	movs	r1, #0
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff ff3a 	bl	8004cd4 <SDSPI_CMD>
 8004e60:	4603      	mov	r3, r0
 8004e62:	77fb      	strb	r3, [r7, #31]
	if(res > 0) {
 8004e64:	7ffb      	ldrb	r3, [r7, #31]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <SDSPI_Init+0x66>
		return 1; //command error
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e0f4      	b.n	8005058 <SDSPI_Init+0x250>
	}
	if(buf[0] != 1) {
 8004e6e:	7b3b      	ldrb	r3, [r7, #12]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d001      	beq.n	8004e78 <SDSPI_Init+0x70>
		return 2; //not initialized
 8004e74:	2302      	movs	r3, #2
 8004e76:	e0ef      	b.n	8005058 <SDSPI_Init+0x250>
	}

	uint8_t type = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	77bb      	strb	r3, [r7, #30]
	uint8_t block = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	777b      	strb	r3, [r7, #29]

	res = SDSPI_CMD(phandle, 8, 0x01aa, 0x87, buf, 5);
 8004e80:	2305      	movs	r3, #5
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	f107 030c 	add.w	r3, r7, #12
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	2387      	movs	r3, #135	; 0x87
 8004e8c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004e90:	2108      	movs	r1, #8
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff ff1e 	bl	8004cd4 <SDSPI_CMD>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	77fb      	strb	r3, [r7, #31]
	if(res > 0) {
 8004e9c:	7ffb      	ldrb	r3, [r7, #31]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <SDSPI_Init+0x9e>
		type = 1;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	77bb      	strb	r3, [r7, #30]
	}
	if(buf[0] != 1) {
 8004ea6:	7b3b      	ldrb	r3, [r7, #12]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d001      	beq.n	8004eb0 <SDSPI_Init+0xa8>
		type = 1;
 8004eac:	2301      	movs	r3, #1
 8004eae:	77bb      	strb	r3, [r7, #30]
	}
	if((buf[3] & 0x0f) != 1 || buf[4] != 0xaa) {
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d102      	bne.n	8004ec0 <SDSPI_Init+0xb8>
 8004eba:	7c3b      	ldrb	r3, [r7, #16]
 8004ebc:	2baa      	cmp	r3, #170	; 0xaa
 8004ebe:	d001      	beq.n	8004ec4 <SDSPI_Init+0xbc>
		return 3; //initialization error
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e0c9      	b.n	8005058 <SDSPI_Init+0x250>
	}

	uint8_t stat = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	72fb      	strb	r3, [r7, #11]
	uint32_t tickstart = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	61bb      	str	r3, [r7, #24]

	if(type == 0) {
 8004ecc:	7fbb      	ldrb	r3, [r7, #30]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d148      	bne.n	8004f64 <SDSPI_Init+0x15c>
		stat = 1;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	72fb      	strb	r3, [r7, #11]
		tickstart = HAL_GetTick();
 8004ed6:	f000 fe67 	bl	8005ba8 <HAL_GetTick>
 8004eda:	61b8      	str	r0, [r7, #24]
		while(stat > 0) {
 8004edc:	e021      	b.n	8004f22 <SDSPI_Init+0x11a>
			if((HAL_GetTick()-tickstart) >= 1000) {
 8004ede:	f000 fe63 	bl	8005ba8 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eec:	d308      	bcc.n	8004f00 <SDSPI_Init+0xf8>
				HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ef8:	f001 f910 	bl	800611c <HAL_GPIO_WritePin>
				return 4; //timeout
 8004efc:	2304      	movs	r3, #4
 8004efe:	e0ab      	b.n	8005058 <SDSPI_Init+0x250>
			}

			//res = SDSPI_ACMD(phandle, 41, 0x40000000, 0x77, &stat, 1);
			SDSPI_ACMD(phandle, 41, 0x40000000, 0x77, &stat, 1);
 8004f00:	2301      	movs	r3, #1
 8004f02:	9301      	str	r3, [sp, #4]
 8004f04:	f107 030b 	add.w	r3, r7, #11
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	2377      	movs	r3, #119	; 0x77
 8004f0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f10:	2129      	movs	r1, #41	; 0x29
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff ff3b 	bl	8004d8e <SDSPI_ACMD>
			if(res > 0) {
 8004f18:	7ffb      	ldrb	r3, [r7, #31]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <SDSPI_Init+0x11a>
				return 5; //not supported
 8004f1e:	2305      	movs	r3, #5
 8004f20:	e09a      	b.n	8005058 <SDSPI_Init+0x250>
		while(stat > 0) {
 8004f22:	7afb      	ldrb	r3, [r7, #11]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1da      	bne.n	8004ede <SDSPI_Init+0xd6>
			}
		}

		res = SDSPI_CMD(phandle, 58, 0, 0x75, buf, 5);
 8004f28:	2305      	movs	r3, #5
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	f107 030c 	add.w	r3, r7, #12
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	2375      	movs	r3, #117	; 0x75
 8004f34:	2200      	movs	r2, #0
 8004f36:	213a      	movs	r1, #58	; 0x3a
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff fecb 	bl	8004cd4 <SDSPI_CMD>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	77fb      	strb	r3, [r7, #31]
		if(res > 0) {
 8004f42:	7ffb      	ldrb	r3, [r7, #31]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <SDSPI_Init+0x144>
			return 6; //not supported
 8004f48:	2306      	movs	r3, #6
 8004f4a:	e085      	b.n	8005058 <SDSPI_Init+0x250>
		}
		if(buf[0] > 0) {
 8004f4c:	7b3b      	ldrb	r3, [r7, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <SDSPI_Init+0x14e>
			return 7;
 8004f52:	2307      	movs	r3, #7
 8004f54:	e080      	b.n	8005058 <SDSPI_Init+0x250>
		}
		if((buf[1] & 0x04) > 0) {
 8004f56:	7b7b      	ldrb	r3, [r7, #13]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	dd01      	ble.n	8004f64 <SDSPI_Init+0x15c>
			block = 1;
 8004f60:	2301      	movs	r3, #1
 8004f62:	777b      	strb	r3, [r7, #29]
		}

	}
	if(type == 1) {
 8004f64:	7fbb      	ldrb	r3, [r7, #30]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d12d      	bne.n	8004fc6 <SDSPI_Init+0x1be>
		stat = 1;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	72fb      	strb	r3, [r7, #11]
		tickstart = HAL_GetTick();
 8004f6e:	f000 fe1b 	bl	8005ba8 <HAL_GetTick>
 8004f72:	61b8      	str	r0, [r7, #24]
		while(stat > 0) {
 8004f74:	e024      	b.n	8004fc0 <SDSPI_Init+0x1b8>
			if((HAL_GetTick()-tickstart) >= 1000) {
 8004f76:	f000 fe17 	bl	8005ba8 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f84:	d30a      	bcc.n	8004f9c <SDSPI_Init+0x194>
				HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 8004f86:	2201      	movs	r2, #1
 8004f88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f90:	f001 f8c4 	bl	800611c <HAL_GPIO_WritePin>
				stat = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	72fb      	strb	r3, [r7, #11]
				type = 2;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	77bb      	strb	r3, [r7, #30]
			}


			//res = SDSPI_ACMD(phandle, 41, 0, 0xff, &stat, 1);
			SDSPI_ACMD(phandle, 41, 0, 0xff, &stat, 1);
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	9301      	str	r3, [sp, #4]
 8004fa0:	f107 030b 	add.w	r3, r7, #11
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	23ff      	movs	r3, #255	; 0xff
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2129      	movs	r1, #41	; 0x29
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff feee 	bl	8004d8e <SDSPI_ACMD>
			if(res > 0) {
 8004fb2:	7ffb      	ldrb	r3, [r7, #31]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <SDSPI_Init+0x1b8>
				stat = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	72fb      	strb	r3, [r7, #11]
				type = 2;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	77bb      	strb	r3, [r7, #30]
		while(stat > 0) {
 8004fc0:	7afb      	ldrb	r3, [r7, #11]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1d7      	bne.n	8004f76 <SDSPI_Init+0x16e>
			}
		}
	}
	if(type == 2) {
 8004fc6:	7fbb      	ldrb	r3, [r7, #30]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d129      	bne.n	8005020 <SDSPI_Init+0x218>
		stat = 1;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	72fb      	strb	r3, [r7, #11]
		tickstart = HAL_GetTick();
 8004fd0:	f000 fdea 	bl	8005ba8 <HAL_GetTick>
 8004fd4:	61b8      	str	r0, [r7, #24]
		while(stat > 0) {
 8004fd6:	e020      	b.n	800501a <SDSPI_Init+0x212>
			if((HAL_GetTick()-tickstart) >= 1000) {
 8004fd8:	f000 fde6 	bl	8005ba8 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fe6:	d308      	bcc.n	8004ffa <SDSPI_Init+0x1f2>
				HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ff2:	f001 f893 	bl	800611c <HAL_GPIO_WritePin>
				return 8; //timeout
 8004ff6:	2308      	movs	r3, #8
 8004ff8:	e02e      	b.n	8005058 <SDSPI_Init+0x250>
			}

			//res = SDSPI_CMD(phandle, 1, 0, 0xff, &stat, 1);
			SDSPI_CMD(phandle, 1, 0, 0xff, &stat, 1);
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	f107 030b 	add.w	r3, r7, #11
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	23ff      	movs	r3, #255	; 0xff
 8005006:	2200      	movs	r2, #0
 8005008:	2101      	movs	r1, #1
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff fe62 	bl	8004cd4 <SDSPI_CMD>
			if(res > 0) {
 8005010:	7ffb      	ldrb	r3, [r7, #31]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <SDSPI_Init+0x212>
				return 9; //error
 8005016:	2309      	movs	r3, #9
 8005018:	e01e      	b.n	8005058 <SDSPI_Init+0x250>
		while(stat > 0) {
 800501a:	7afb      	ldrb	r3, [r7, #11]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1db      	bne.n	8004fd8 <SDSPI_Init+0x1d0>
			}
		}
	}
	if(block == 0) {
 8005020:	7f7b      	ldrb	r3, [r7, #29]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d117      	bne.n	8005056 <SDSPI_Init+0x24e>
		res = SDSPI_CMD(phandle, 16, 512, 0xff, buf, 1);
 8005026:	2301      	movs	r3, #1
 8005028:	9301      	str	r3, [sp, #4]
 800502a:	f107 030c 	add.w	r3, r7, #12
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	23ff      	movs	r3, #255	; 0xff
 8005032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005036:	2110      	movs	r1, #16
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff fe4b 	bl	8004cd4 <SDSPI_CMD>
 800503e:	4603      	mov	r3, r0
 8005040:	77fb      	strb	r3, [r7, #31]
		if(res > 0) {
 8005042:	7ffb      	ldrb	r3, [r7, #31]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <SDSPI_Init+0x244>
			return 10; //not supported
 8005048:	230a      	movs	r3, #10
 800504a:	e005      	b.n	8005058 <SDSPI_Init+0x250>
		}
		if(buf[0] > 0) {
 800504c:	7b3b      	ldrb	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <SDSPI_Init+0x24e>
			return 11; //error
 8005052:	230b      	movs	r3, #11
 8005054:	e000      	b.n	8005058 <SDSPI_Init+0x250>
		}
	}

	return 0;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3720      	adds	r7, #32
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	080111fc 	.word	0x080111fc

08005064 <SDSPI_ReadCommand>:

uint8_t SDSPI_ReadCommand(SPI_HandleTypeDef *phandle, uint8_t cmd, uint32_t arg, uint8_t *buf, uint16_t size) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	460b      	mov	r3, r1
 8005072:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_RESET);
 8005074:	2200      	movs	r2, #0
 8005076:	f44f 7100 	mov.w	r1, #512	; 0x200
 800507a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800507e:	f001 f84d 	bl	800611c <HAL_GPIO_WritePin>

	uint8_t stat = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	74fb      	strb	r3, [r7, #19]
	uint8_t res = SDSPI_SendCMD(phandle, cmd, arg, 0xff);
 8005086:	7af9      	ldrb	r1, [r7, #11]
 8005088:	23ff      	movs	r3, #255	; 0xff
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7ff fd9f 	bl	8004bd0 <SDSPI_SendCMD>
 8005092:	4603      	mov	r3, r0
 8005094:	76fb      	strb	r3, [r7, #27]
	if(res > 0) {
 8005096:	7efb      	ldrb	r3, [r7, #27]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <SDSPI_ReadCommand+0x4a>
		HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 800509c:	2201      	movs	r2, #1
 800509e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050a6:	f001 f839 	bl	800611c <HAL_GPIO_WritePin>
		return 1; //error
 80050aa:	2301      	movs	r3, #1
 80050ac:	e0aa      	b.n	8005204 <SDSPI_ReadCommand+0x1a0>
	}

	res = SDSPI_Response(phandle, &stat, 1);
 80050ae:	f107 0313 	add.w	r3, r7, #19
 80050b2:	2201      	movs	r2, #1
 80050b4:	4619      	mov	r1, r3
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f7ff fdbc 	bl	8004c34 <SDSPI_Response>
 80050bc:	4603      	mov	r3, r0
 80050be:	76fb      	strb	r3, [r7, #27]
	if(res > 0) {
 80050c0:	7efb      	ldrb	r3, [r7, #27]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d008      	beq.n	80050d8 <SDSPI_ReadCommand+0x74>
		HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 80050c6:	2201      	movs	r2, #1
 80050c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050d0:	f001 f824 	bl	800611c <HAL_GPIO_WritePin>
		return 2; //error
 80050d4:	2302      	movs	r3, #2
 80050d6:	e095      	b.n	8005204 <SDSPI_ReadCommand+0x1a0>
	}
	if(stat > 0) {
 80050d8:	7cfb      	ldrb	r3, [r7, #19]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <SDSPI_ReadCommand+0x8c>
		HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 80050de:	2201      	movs	r2, #1
 80050e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050e8:	f001 f818 	bl	800611c <HAL_GPIO_WritePin>
		return 3; //error result
 80050ec:	2303      	movs	r3, #3
 80050ee:	e089      	b.n	8005204 <SDSPI_ReadCommand+0x1a0>
	}

	//wait for data token
	uint32_t tickstart = HAL_GetTick();
 80050f0:	f000 fd5a 	bl	8005ba8 <HAL_GetTick>
 80050f4:	6178      	str	r0, [r7, #20]
	uint8_t tx = 0xff;
 80050f6:	23ff      	movs	r3, #255	; 0xff
 80050f8:	74bb      	strb	r3, [r7, #18]
	stat = 0xff;
 80050fa:	23ff      	movs	r3, #255	; 0xff
 80050fc:	74fb      	strb	r3, [r7, #19]
	while(stat == 0xff) {
 80050fe:	e01b      	b.n	8005138 <SDSPI_ReadCommand+0xd4>
		if((HAL_GetTick()-tickstart) >= 1000) {
 8005100:	f000 fd52 	bl	8005ba8 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800510e:	d308      	bcc.n	8005122 <SDSPI_ReadCommand+0xbe>
			HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 8005110:	2201      	movs	r2, #1
 8005112:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800511a:	f000 ffff 	bl	800611c <HAL_GPIO_WritePin>
			return 4; //timeout
 800511e:	2304      	movs	r3, #4
 8005120:	e070      	b.n	8005204 <SDSPI_ReadCommand+0x1a0>
		}
		HAL_SPI_TransmitReceive(phandle, &tx, &stat, 1, 1000);
 8005122:	f107 0213 	add.w	r2, r7, #19
 8005126:	f107 0112 	add.w	r1, r7, #18
 800512a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	2301      	movs	r3, #1
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f002 fdfa 	bl	8007d2c <HAL_SPI_TransmitReceive>
	while(stat == 0xff) {
 8005138:	7cfb      	ldrb	r3, [r7, #19]
 800513a:	2bff      	cmp	r3, #255	; 0xff
 800513c:	d0e0      	beq.n	8005100 <SDSPI_ReadCommand+0x9c>
		//	HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
		//	return 5;
		//}
	}

	if(stat != 0xfe) {
 800513e:	7cfb      	ldrb	r3, [r7, #19]
 8005140:	2bfe      	cmp	r3, #254	; 0xfe
 8005142:	d008      	beq.n	8005156 <SDSPI_ReadCommand+0xf2>
		HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 8005144:	2201      	movs	r2, #1
 8005146:	f44f 7100 	mov.w	r1, #512	; 0x200
 800514a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800514e:	f000 ffe5 	bl	800611c <HAL_GPIO_WritePin>
		return 6; //error token
 8005152:	2306      	movs	r3, #6
 8005154:	e056      	b.n	8005204 <SDSPI_ReadCommand+0x1a0>
	}

	//read sector
	for(uint16_t i = 0; i < size; i++) {
 8005156:	2300      	movs	r3, #0
 8005158:	83fb      	strh	r3, [r7, #30]
 800515a:	e01a      	b.n	8005192 <SDSPI_ReadCommand+0x12e>
		if(HAL_SPI_TransmitReceive(phandle, &tx, buf +i, 1, 1000) != HAL_OK) {
 800515c:	8bfb      	ldrh	r3, [r7, #30]
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	441a      	add	r2, r3
 8005162:	f107 0112 	add.w	r1, r7, #18
 8005166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	2301      	movs	r3, #1
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f002 fddc 	bl	8007d2c <HAL_SPI_TransmitReceive>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d008      	beq.n	800518c <SDSPI_ReadCommand+0x128>
			HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 800517a:	2201      	movs	r2, #1
 800517c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005184:	f000 ffca 	bl	800611c <HAL_GPIO_WritePin>
			return 7;
 8005188:	2307      	movs	r3, #7
 800518a:	e03b      	b.n	8005204 <SDSPI_ReadCommand+0x1a0>
	for(uint16_t i = 0; i < size; i++) {
 800518c:	8bfb      	ldrh	r3, [r7, #30]
 800518e:	3301      	adds	r3, #1
 8005190:	83fb      	strh	r3, [r7, #30]
 8005192:	8bfa      	ldrh	r2, [r7, #30]
 8005194:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005196:	429a      	cmp	r2, r3
 8005198:	d3e0      	bcc.n	800515c <SDSPI_ReadCommand+0xf8>
		}
	}

	//read 2 byte crc
	for(uint16_t i = 0; i < 2; i++) {
 800519a:	2300      	movs	r3, #0
 800519c:	83bb      	strh	r3, [r7, #28]
 800519e:	e019      	b.n	80051d4 <SDSPI_ReadCommand+0x170>
		if(HAL_SPI_TransmitReceive(phandle, &tx, &stat, 1, 1000) != HAL_OK) {
 80051a0:	f107 0213 	add.w	r2, r7, #19
 80051a4:	f107 0112 	add.w	r1, r7, #18
 80051a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	2301      	movs	r3, #1
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f002 fdbb 	bl	8007d2c <HAL_SPI_TransmitReceive>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <SDSPI_ReadCommand+0x16a>
			HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 80051bc:	2201      	movs	r2, #1
 80051be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051c6:	f000 ffa9 	bl	800611c <HAL_GPIO_WritePin>
			return 7;
 80051ca:	2307      	movs	r3, #7
 80051cc:	e01a      	b.n	8005204 <SDSPI_ReadCommand+0x1a0>
	for(uint16_t i = 0; i < 2; i++) {
 80051ce:	8bbb      	ldrh	r3, [r7, #28]
 80051d0:	3301      	adds	r3, #1
 80051d2:	83bb      	strh	r3, [r7, #28]
 80051d4:	8bbb      	ldrh	r3, [r7, #28]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d9e2      	bls.n	80051a0 <SDSPI_ReadCommand+0x13c>
		}
	}

	//end
	HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 80051da:	2201      	movs	r2, #1
 80051dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051e4:	f000 ff9a 	bl	800611c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(phandle, &tx, 1, 1000) != HAL_OK) {
 80051e8:	f107 0112 	add.w	r1, r7, #18
 80051ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051f0:	2201      	movs	r2, #1
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f002 fb0c 	bl	8007810 <HAL_SPI_Transmit>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <SDSPI_ReadCommand+0x19e>
		return 9;
 80051fe:	2309      	movs	r3, #9
 8005200:	e000      	b.n	8005204 <SDSPI_ReadCommand+0x1a0>
	}

	return 0;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3720      	adds	r7, #32
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <SDSPI_WriteBlock>:

uint8_t SDSPI_WriteBlock(SPI_HandleTypeDef *phandle, uint32_t lba, uint8_t *buf, uint16_t size) {
 800520c:	b580      	push	{r7, lr}
 800520e:	b08a      	sub	sp, #40	; 0x28
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_RESET);
 800521a:	2200      	movs	r2, #0
 800521c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005224:	f000 ff7a 	bl	800611c <HAL_GPIO_WritePin>

	uint8_t stat = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	75fb      	strb	r3, [r7, #23]
	uint8_t res = SDSPI_SendCMD(phandle, 24, lba, 0xff);
 800522c:	23ff      	movs	r3, #255	; 0xff
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	2118      	movs	r1, #24
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f7ff fccc 	bl	8004bd0 <SDSPI_SendCMD>
 8005238:	4603      	mov	r3, r0
 800523a:	77fb      	strb	r3, [r7, #31]
	if(res > 0) {
 800523c:	7ffb      	ldrb	r3, [r7, #31]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <SDSPI_WriteBlock+0x3a>
		return 1; //error
 8005242:	2301      	movs	r3, #1
 8005244:	e0c8      	b.n	80053d8 <SDSPI_WriteBlock+0x1cc>
	}

	res = SDSPI_Response(phandle, &stat, 1);
 8005246:	f107 0317 	add.w	r3, r7, #23
 800524a:	2201      	movs	r2, #1
 800524c:	4619      	mov	r1, r3
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7ff fcf0 	bl	8004c34 <SDSPI_Response>
 8005254:	4603      	mov	r3, r0
 8005256:	77fb      	strb	r3, [r7, #31]
	if(res > 0) {
 8005258:	7ffb      	ldrb	r3, [r7, #31]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <SDSPI_WriteBlock+0x64>
		HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 800525e:	2201      	movs	r2, #1
 8005260:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005268:	f000 ff58 	bl	800611c <HAL_GPIO_WritePin>
		return 2; //error
 800526c:	2302      	movs	r3, #2
 800526e:	e0b3      	b.n	80053d8 <SDSPI_WriteBlock+0x1cc>
	}
	if(stat > 0) {
 8005270:	7dfb      	ldrb	r3, [r7, #23]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d008      	beq.n	8005288 <SDSPI_WriteBlock+0x7c>
		HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 8005276:	2201      	movs	r2, #1
 8005278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800527c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005280:	f000 ff4c 	bl	800611c <HAL_GPIO_WritePin>
		return 3; //error result
 8005284:	2303      	movs	r3, #3
 8005286:	e0a7      	b.n	80053d8 <SDSPI_WriteBlock+0x1cc>
	}

	//8 tics of CLK
	stat = 0xff;
 8005288:	23ff      	movs	r3, #255	; 0xff
 800528a:	75fb      	strb	r3, [r7, #23]
	if(HAL_SPI_Transmit(phandle, &stat, 1, 1000) != HAL_OK) {
 800528c:	f107 0117 	add.w	r1, r7, #23
 8005290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005294:	2201      	movs	r2, #1
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f002 faba 	bl	8007810 <HAL_SPI_Transmit>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d008      	beq.n	80052b4 <SDSPI_WriteBlock+0xa8>
		HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 80052a2:	2201      	movs	r2, #1
 80052a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052ac:	f000 ff36 	bl	800611c <HAL_GPIO_WritePin>
		return 4;
 80052b0:	2304      	movs	r3, #4
 80052b2:	e091      	b.n	80053d8 <SDSPI_WriteBlock+0x1cc>
	}

	//data packet
	//data token
	stat = 0xfe;
 80052b4:	23fe      	movs	r3, #254	; 0xfe
 80052b6:	75fb      	strb	r3, [r7, #23]
	if(HAL_SPI_Transmit(phandle, &stat, 1, 1000) != HAL_OK) {
 80052b8:	f107 0117 	add.w	r1, r7, #23
 80052bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052c0:	2201      	movs	r2, #1
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f002 faa4 	bl	8007810 <HAL_SPI_Transmit>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d008      	beq.n	80052e0 <SDSPI_WriteBlock+0xd4>
		HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 80052ce:	2201      	movs	r2, #1
 80052d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052d8:	f000 ff20 	bl	800611c <HAL_GPIO_WritePin>
		return 5;
 80052dc:	2305      	movs	r3, #5
 80052de:	e07b      	b.n	80053d8 <SDSPI_WriteBlock+0x1cc>
	}
	//data block
	if(HAL_SPI_Transmit(phandle, buf, size, 1000) != HAL_OK) {
 80052e0:	887a      	ldrh	r2, [r7, #2]
 80052e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f002 fa91 	bl	8007810 <HAL_SPI_Transmit>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d008      	beq.n	8005306 <SDSPI_WriteBlock+0xfa>
		HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 80052f4:	2201      	movs	r2, #1
 80052f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052fe:	f000 ff0d 	bl	800611c <HAL_GPIO_WritePin>
		return 6;
 8005302:	2306      	movs	r3, #6
 8005304:	e068      	b.n	80053d8 <SDSPI_WriteBlock+0x1cc>
	}
	//crc
	uint8_t crc[] = {0xff, 0xff};
 8005306:	4b36      	ldr	r3, [pc, #216]	; (80053e0 <SDSPI_WriteBlock+0x1d4>)
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	82bb      	strh	r3, [r7, #20]
	if(HAL_SPI_Transmit(phandle, crc, 2, 1000) != HAL_OK) {
 800530c:	f107 0114 	add.w	r1, r7, #20
 8005310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005314:	2202      	movs	r2, #2
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f002 fa7a 	bl	8007810 <HAL_SPI_Transmit>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <SDSPI_WriteBlock+0x128>
		HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 8005322:	2201      	movs	r2, #1
 8005324:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800532c:	f000 fef6 	bl	800611c <HAL_GPIO_WritePin>
		return 7;
 8005330:	2307      	movs	r3, #7
 8005332:	e051      	b.n	80053d8 <SDSPI_WriteBlock+0x1cc>
	}

	//data response
	res = SDSPI_Response(phandle, &stat, 1);
 8005334:	f107 0317 	add.w	r3, r7, #23
 8005338:	2201      	movs	r2, #1
 800533a:	4619      	mov	r1, r3
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f7ff fc79 	bl	8004c34 <SDSPI_Response>
 8005342:	4603      	mov	r3, r0
 8005344:	77fb      	strb	r3, [r7, #31]
	if(res > 0) {
 8005346:	7ffb      	ldrb	r3, [r7, #31]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <SDSPI_WriteBlock+0x152>
		HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 800534c:	2201      	movs	r2, #1
 800534e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005356:	f000 fee1 	bl	800611c <HAL_GPIO_WritePin>
		return 8; //error
 800535a:	2308      	movs	r3, #8
 800535c:	e03c      	b.n	80053d8 <SDSPI_WriteBlock+0x1cc>
	}
	if((stat & 0x1f) != 0x05) {
 800535e:	7dfb      	ldrb	r3, [r7, #23]
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	2b05      	cmp	r3, #5
 8005366:	d008      	beq.n	800537a <SDSPI_WriteBlock+0x16e>
		HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 8005368:	2201      	movs	r2, #1
 800536a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800536e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005372:	f000 fed3 	bl	800611c <HAL_GPIO_WritePin>
		return 9; //error result
 8005376:	2309      	movs	r3, #9
 8005378:	e02e      	b.n	80053d8 <SDSPI_WriteBlock+0x1cc>
	}

	//wait
	uint32_t tickstart = HAL_GetTick();
 800537a:	f000 fc15 	bl	8005ba8 <HAL_GetTick>
 800537e:	61b8      	str	r0, [r7, #24]
	uint8_t tx = 0xff;
 8005380:	23ff      	movs	r3, #255	; 0xff
 8005382:	74fb      	strb	r3, [r7, #19]
	stat = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	75fb      	strb	r3, [r7, #23]
	while(stat == 0) {
 8005388:	e01b      	b.n	80053c2 <SDSPI_WriteBlock+0x1b6>
		if((HAL_GetTick()-tickstart) >= 1000) {
 800538a:	f000 fc0d 	bl	8005ba8 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005398:	d308      	bcc.n	80053ac <SDSPI_WriteBlock+0x1a0>
			HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 800539a:	2201      	movs	r2, #1
 800539c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053a4:	f000 feba 	bl	800611c <HAL_GPIO_WritePin>
			return 10; //timeout
 80053a8:	230a      	movs	r3, #10
 80053aa:	e015      	b.n	80053d8 <SDSPI_WriteBlock+0x1cc>
		}
		HAL_SPI_TransmitReceive(phandle, &tx, &stat, 1, 1000);
 80053ac:	f107 0217 	add.w	r2, r7, #23
 80053b0:	f107 0113 	add.w	r1, r7, #19
 80053b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	2301      	movs	r3, #1
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f002 fcb5 	bl	8007d2c <HAL_SPI_TransmitReceive>
	while(stat == 0) {
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0e0      	beq.n	800538a <SDSPI_WriteBlock+0x17e>
		//	HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
		//	return 11;
		//}
	}

	HAL_GPIO_WritePin(SDSPI_CSPORT, SDSPI_CSPIN, GPIO_PIN_SET);
 80053c8:	2201      	movs	r2, #1
 80053ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053d2:	f000 fea3 	bl	800611c <HAL_GPIO_WritePin>
	return 0;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3720      	adds	r7, #32
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	08011208 	.word	0x08011208

080053e4 <SDSPI_ReadBlock>:

uint8_t SDSPI_ReadBlock(SPI_HandleTypeDef *phandle, uint32_t lba, uint8_t *buf, uint16_t size) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	807b      	strh	r3, [r7, #2]
	return SDSPI_ReadCommand(phandle, 17, lba, buf, size);
 80053f2:	887b      	ldrh	r3, [r7, #2]
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	2111      	movs	r1, #17
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7ff fe31 	bl	8005064 <SDSPI_ReadCommand>
 8005402:	4603      	mov	r3, r0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <SDSPI_ReadInfo>:

uint8_t SDSPI_ReadInfo(SPI_HandleTypeDef *phandle, uint16_t *sector, uint32_t *capacity) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b08e      	sub	sp, #56	; 0x38
 8005410:	af02      	add	r7, sp, #8
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
	uint8_t buf[16];
	uint8_t res = SDSPI_ReadCommand(phandle, 9, 0, buf, 16);
 8005418:	f107 0214 	add.w	r2, r7, #20
 800541c:	2310      	movs	r3, #16
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	4613      	mov	r3, r2
 8005422:	2200      	movs	r2, #0
 8005424:	2109      	movs	r1, #9
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7ff fe1c 	bl	8005064 <SDSPI_ReadCommand>
 800542c:	4603      	mov	r3, r0
 800542e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(res > 0) {
 8005432:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <SDSPI_ReadInfo+0x34>
		return res;
 800543a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800543e:	e052      	b.n	80054e6 <SDSPI_ReadInfo+0xda>
	}

	uint8_t version = buf[0] >> 6;
 8005440:	7d3b      	ldrb	r3, [r7, #20]
 8005442:	099b      	lsrs	r3, r3, #6
 8005444:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint32_t c_size = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t c_size_mult = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t read_bl_len = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(version == 0) {
 8005458:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800545c:	2b00      	cmp	r3, #0
 800545e:	d12e      	bne.n	80054be <SDSPI_ReadInfo+0xb2>
		read_bl_len = buf[5] & 0x0f;
 8005460:	7e7b      	ldrb	r3, [r7, #25]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		c_size = (((buf[6] & 3) << 16) | (buf[7] << 8) | buf[8]) >> 6;
 800546a:	7ebb      	ldrb	r3, [r7, #26]
 800546c:	041b      	lsls	r3, r3, #16
 800546e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005472:	7efb      	ldrb	r3, [r7, #27]
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	4313      	orrs	r3, r2
 8005478:	7f3a      	ldrb	r2, [r7, #28]
 800547a:	4313      	orrs	r3, r2
 800547c:	119b      	asrs	r3, r3, #6
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28
		c_size_mult = (((buf[9] & 3) << 8) | buf[10]) >> 7;
 8005480:	7f7b      	ldrb	r3, [r7, #29]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005488:	7fba      	ldrb	r2, [r7, #30]
 800548a:	4313      	orrs	r3, r2
 800548c:	11db      	asrs	r3, r3, #7
 800548e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		*sector = 1 << read_bl_len;
 8005492:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005496:	2201      	movs	r2, #1
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	b29a      	uxth	r2, r3
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	801a      	strh	r2, [r3, #0]
		*capacity = (c_size +1) * (1 << (c_size_mult +2)) * (*sector);
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054aa:	3302      	adds	r3, #2
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	8812      	ldrh	r2, [r2, #0]
 80054b4:	fb02 f203 	mul.w	r2, r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	e012      	b.n	80054e4 <SDSPI_ReadInfo+0xd8>
	}
	else {
		c_size = ((buf[7] & 0x3f) << 16) | (buf[8] << 8) | buf[9];
 80054be:	7efb      	ldrb	r3, [r7, #27]
 80054c0:	041b      	lsls	r3, r3, #16
 80054c2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80054c6:	7f3b      	ldrb	r3, [r7, #28]
 80054c8:	021b      	lsls	r3, r3, #8
 80054ca:	4313      	orrs	r3, r2
 80054cc:	7f7a      	ldrb	r2, [r7, #29]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	62bb      	str	r3, [r7, #40]	; 0x28
		*sector = 512;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054d8:	801a      	strh	r2, [r3, #0]
		*capacity = (c_size +1) * 512 * 1024;
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	3301      	adds	r3, #1
 80054de:	04da      	lsls	r2, r3, #19
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	601a      	str	r2, [r3, #0]
	}
	return 0;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3730      	adds	r7, #48	; 0x30
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <st7789_WriteCmd>:
uint16_t _st7789_width, _st7789_height;

SPI_HandleTypeDef* SPI_PORT = &hspi1;

void st7789_WriteCmd(uint8_t cmd)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_PIN, GPIO_PIN_RESET);
 80054fa:	2200      	movs	r2, #0
 80054fc:	2110      	movs	r1, #16
 80054fe:	4807      	ldr	r0, [pc, #28]	; (800551c <st7789_WriteCmd+0x2c>)
 8005500:	f000 fe0c 	bl	800611c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_PORT, &cmd, 1, 10);
 8005504:	4b06      	ldr	r3, [pc, #24]	; (8005520 <st7789_WriteCmd+0x30>)
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	1df9      	adds	r1, r7, #7
 800550a:	230a      	movs	r3, #10
 800550c:	2201      	movs	r2, #1
 800550e:	f002 f97f 	bl	8007810 <HAL_SPI_Transmit>
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	48000400 	.word	0x48000400
 8005520:	2000001c 	.word	0x2000001c

08005524 <st7789_WriteData>:

void st7789_WriteData(uint8_t data)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	4603      	mov	r3, r0
 800552c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_PIN, GPIO_PIN_SET);
 800552e:	2201      	movs	r2, #1
 8005530:	2110      	movs	r1, #16
 8005532:	4807      	ldr	r0, [pc, #28]	; (8005550 <st7789_WriteData+0x2c>)
 8005534:	f000 fdf2 	bl	800611c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_PORT, &data, 1, 10);
 8005538:	4b06      	ldr	r3, [pc, #24]	; (8005554 <st7789_WriteData+0x30>)
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	1df9      	adds	r1, r7, #7
 800553e:	230a      	movs	r3, #10
 8005540:	2201      	movs	r2, #1
 8005542:	f002 f965 	bl	8007810 <HAL_SPI_Transmit>
}
 8005546:	bf00      	nop
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	48000400 	.word	0x48000400
 8005554:	2000001c 	.word	0x2000001c

08005558 <st7789_WriteDataWord>:

void st7789_WriteDataWord(uint16_t data)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	80fb      	strh	r3, [r7, #6]
	data = (data >> 8) | (data << 8);
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	0a1b      	lsrs	r3, r3, #8
 8005566:	b29b      	uxth	r3, r3
 8005568:	b21a      	sxth	r2, r3
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	b21b      	sxth	r3, r3
 8005570:	4313      	orrs	r3, r2
 8005572:	b21b      	sxth	r3, r3
 8005574:	b29b      	uxth	r3, r3
 8005576:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(DC_PIN, GPIO_PIN_SET);
 8005578:	2201      	movs	r2, #1
 800557a:	2110      	movs	r1, #16
 800557c:	4806      	ldr	r0, [pc, #24]	; (8005598 <st7789_WriteDataWord+0x40>)
 800557e:	f000 fdcd 	bl	800611c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_PORT, (uint8_t*)&data, 2, 10);
 8005582:	4b06      	ldr	r3, [pc, #24]	; (800559c <st7789_WriteDataWord+0x44>)
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	1db9      	adds	r1, r7, #6
 8005588:	230a      	movs	r3, #10
 800558a:	2202      	movs	r2, #2
 800558c:	f002 f940 	bl	8007810 <HAL_SPI_Transmit>
	//uint8_t b1 = data >> 8;
	//uint8_t b2 = data & 0xFF;
	//HAL_GPIO_WritePin(DC_PIN, GPIO_PIN_SET);
	//HAL_SPI_Transmit(SPI_PORT, &b1, 1, 10);
	//HAL_SPI_Transmit(SPI_PORT, &b2, 1, 10);
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	48000400 	.word	0x48000400
 800559c:	2000001c 	.word	0x2000001c

080055a0 <st7789_Reset>:

void st7789_Reset()
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
	//hardware reset
	HAL_GPIO_WritePin(RST_PIN, GPIO_PIN_SET);
 80055a4:	2201      	movs	r2, #1
 80055a6:	2140      	movs	r1, #64	; 0x40
 80055a8:	480b      	ldr	r0, [pc, #44]	; (80055d8 <st7789_Reset+0x38>)
 80055aa:	f000 fdb7 	bl	800611c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80055ae:	2032      	movs	r0, #50	; 0x32
 80055b0:	f000 fb06 	bl	8005bc0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PIN, GPIO_PIN_RESET);
 80055b4:	2200      	movs	r2, #0
 80055b6:	2140      	movs	r1, #64	; 0x40
 80055b8:	4807      	ldr	r0, [pc, #28]	; (80055d8 <st7789_Reset+0x38>)
 80055ba:	f000 fdaf 	bl	800611c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80055be:	200a      	movs	r0, #10
 80055c0:	f000 fafe 	bl	8005bc0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PIN, GPIO_PIN_SET);
 80055c4:	2201      	movs	r2, #1
 80055c6:	2140      	movs	r1, #64	; 0x40
 80055c8:	4803      	ldr	r0, [pc, #12]	; (80055d8 <st7789_Reset+0x38>)
 80055ca:	f000 fda7 	bl	800611c <HAL_GPIO_WritePin>
	HAL_Delay(150);
 80055ce:	2096      	movs	r0, #150	; 0x96
 80055d0:	f000 faf6 	bl	8005bc0 <HAL_Delay>

	//software reset
	//st7789_WriteCmd(ST7789_SWRESET);
	//HAL_Delay(150);
}
 80055d4:	bf00      	nop
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	48000400 	.word	0x48000400

080055dc <st7789_SetRotation>:

void st7789_SetRotation(uint8_t rotation)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	71fb      	strb	r3, [r7, #7]
	st7789_WriteCmd(ST7789_MADCTL);
 80055e6:	2036      	movs	r0, #54	; 0x36
 80055e8:	f7ff ff82 	bl	80054f0 <st7789_WriteCmd>

	rotation &= 3;
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	71fb      	strb	r3, [r7, #7]
	  switch (rotation) {
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d83a      	bhi.n	8005670 <st7789_SetRotation+0x94>
 80055fa:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <st7789_SetRotation+0x24>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005611 	.word	0x08005611
 8005604:	08005629 	.word	0x08005629
 8005608:	08005641 	.word	0x08005641
 800560c:	08005659 	.word	0x08005659
	   case 0:
		   st7789_WriteData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8005610:	20c0      	movs	r0, #192	; 0xc0
 8005612:	f7ff ff87 	bl	8005524 <st7789_WriteData>
		   _st7789_xstart = _st7789_colstart;
 8005616:	4b18      	ldr	r3, [pc, #96]	; (8005678 <st7789_SetRotation+0x9c>)
 8005618:	781a      	ldrb	r2, [r3, #0]
 800561a:	4b18      	ldr	r3, [pc, #96]	; (800567c <st7789_SetRotation+0xa0>)
 800561c:	701a      	strb	r2, [r3, #0]
		   _st7789_ystart = _st7789_rowstart;
 800561e:	4b18      	ldr	r3, [pc, #96]	; (8005680 <st7789_SetRotation+0xa4>)
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	4b18      	ldr	r3, [pc, #96]	; (8005684 <st7789_SetRotation+0xa8>)
 8005624:	701a      	strb	r2, [r3, #0]
	     break;
 8005626:	e023      	b.n	8005670 <st7789_SetRotation+0x94>
	   case 1:
		   st7789_WriteData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8005628:	20a0      	movs	r0, #160	; 0xa0
 800562a:	f7ff ff7b 	bl	8005524 <st7789_WriteData>
		   _st7789_ystart = _st7789_colstart;
 800562e:	4b12      	ldr	r3, [pc, #72]	; (8005678 <st7789_SetRotation+0x9c>)
 8005630:	781a      	ldrb	r2, [r3, #0]
 8005632:	4b14      	ldr	r3, [pc, #80]	; (8005684 <st7789_SetRotation+0xa8>)
 8005634:	701a      	strb	r2, [r3, #0]
		   _st7789_xstart = _st7789_rowstart;
 8005636:	4b12      	ldr	r3, [pc, #72]	; (8005680 <st7789_SetRotation+0xa4>)
 8005638:	781a      	ldrb	r2, [r3, #0]
 800563a:	4b10      	ldr	r3, [pc, #64]	; (800567c <st7789_SetRotation+0xa0>)
 800563c:	701a      	strb	r2, [r3, #0]
	     break;
 800563e:	e017      	b.n	8005670 <st7789_SetRotation+0x94>
	  case 2:
		  st7789_WriteData(ST7789_MADCTL_RGB);
 8005640:	2000      	movs	r0, #0
 8005642:	f7ff ff6f 	bl	8005524 <st7789_WriteData>
		  _st7789_xstart = _st7789_colstart;
 8005646:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <st7789_SetRotation+0x9c>)
 8005648:	781a      	ldrb	r2, [r3, #0]
 800564a:	4b0c      	ldr	r3, [pc, #48]	; (800567c <st7789_SetRotation+0xa0>)
 800564c:	701a      	strb	r2, [r3, #0]
		  _st7789_ystart = _st7789_rowstart;
 800564e:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <st7789_SetRotation+0xa4>)
 8005650:	781a      	ldrb	r2, [r3, #0]
 8005652:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <st7789_SetRotation+0xa8>)
 8005654:	701a      	strb	r2, [r3, #0]
	     break;
 8005656:	e00b      	b.n	8005670 <st7789_SetRotation+0x94>
	   case 3:
		   st7789_WriteData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8005658:	2060      	movs	r0, #96	; 0x60
 800565a:	f7ff ff63 	bl	8005524 <st7789_WriteData>
		   _st7789_ystart = _st7789_colstart;
 800565e:	4b06      	ldr	r3, [pc, #24]	; (8005678 <st7789_SetRotation+0x9c>)
 8005660:	781a      	ldrb	r2, [r3, #0]
 8005662:	4b08      	ldr	r3, [pc, #32]	; (8005684 <st7789_SetRotation+0xa8>)
 8005664:	701a      	strb	r2, [r3, #0]
		   _st7789_xstart = _st7789_rowstart;
 8005666:	4b06      	ldr	r3, [pc, #24]	; (8005680 <st7789_SetRotation+0xa4>)
 8005668:	781a      	ldrb	r2, [r3, #0]
 800566a:	4b04      	ldr	r3, [pc, #16]	; (800567c <st7789_SetRotation+0xa0>)
 800566c:	701a      	strb	r2, [r3, #0]
	     break;
 800566e:	bf00      	nop
	  }
}
 8005670:	bf00      	nop
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000e0b 	.word	0x20000e0b
 800567c:	20000e06 	.word	0x20000e06
 8005680:	20000e0a 	.word	0x20000e0a
 8005684:	20000e07 	.word	0x20000e07

08005688 <st7789_Init>:

void st7789_Init()
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
	//initialize display begin and end dimensions
	//allows to only use inner part of a display ie.: 100x100 in 240x240 starting at (50, 50)
	_st7789_colstart = _st7789_xstart = ST7789_240x240_XSTART;
 800568c:	4b19      	ldr	r3, [pc, #100]	; (80056f4 <st7789_Init+0x6c>)
 800568e:	2200      	movs	r2, #0
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	4b18      	ldr	r3, [pc, #96]	; (80056f4 <st7789_Init+0x6c>)
 8005694:	781a      	ldrb	r2, [r3, #0]
 8005696:	4b18      	ldr	r3, [pc, #96]	; (80056f8 <st7789_Init+0x70>)
 8005698:	701a      	strb	r2, [r3, #0]
	_st7789_ystart = _st7789_rowstart = ST7789_240x240_YSTART;
 800569a:	4b18      	ldr	r3, [pc, #96]	; (80056fc <st7789_Init+0x74>)
 800569c:	2200      	movs	r2, #0
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	4b16      	ldr	r3, [pc, #88]	; (80056fc <st7789_Init+0x74>)
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	4b16      	ldr	r3, [pc, #88]	; (8005700 <st7789_Init+0x78>)
 80056a6:	701a      	strb	r2, [r3, #0]
	_st7789_width = ST7789_TFTWIDTH;
 80056a8:	4b16      	ldr	r3, [pc, #88]	; (8005704 <st7789_Init+0x7c>)
 80056aa:	22f0      	movs	r2, #240	; 0xf0
 80056ac:	801a      	strh	r2, [r3, #0]
	_st7789_height = ST7789_TFTHEIGHT;
 80056ae:	4b16      	ldr	r3, [pc, #88]	; (8005708 <st7789_Init+0x80>)
 80056b0:	22f0      	movs	r2, #240	; 0xf0
 80056b2:	801a      	strh	r2, [r3, #0]

	st7789_Reset();
 80056b4:	f7ff ff74 	bl	80055a0 <st7789_Reset>

	st7789_WriteCmd(ST7789_MADCTL);
 80056b8:	2036      	movs	r0, #54	; 0x36
 80056ba:	f7ff ff19 	bl	80054f0 <st7789_WriteCmd>
	st7789_WriteData(0x00);
 80056be:	2000      	movs	r0, #0
 80056c0:	f7ff ff30 	bl	8005524 <st7789_WriteData>

	st7789_WriteCmd(ST7789_COLMOD);
 80056c4:	203a      	movs	r0, #58	; 0x3a
 80056c6:	f7ff ff13 	bl	80054f0 <st7789_WriteCmd>
	st7789_WriteData(0x05);
 80056ca:	2005      	movs	r0, #5
 80056cc:	f7ff ff2a 	bl	8005524 <st7789_WriteData>
	//st7789_WriteCmd(0xD0); //power control1
	//st7789_WriteData(0xA4);
	//st7789_WriteData(0xA1);


	st7789_WriteCmd(ST7789_INVON);
 80056d0:	2021      	movs	r0, #33	; 0x21
 80056d2:	f7ff ff0d 	bl	80054f0 <st7789_WriteCmd>

	st7789_WriteCmd(ST7789_SLPOUT);
 80056d6:	2011      	movs	r0, #17
 80056d8:	f7ff ff0a 	bl	80054f0 <st7789_WriteCmd>

	st7789_WriteCmd(ST7789_NORON);
 80056dc:	2013      	movs	r0, #19
 80056de:	f7ff ff07 	bl	80054f0 <st7789_WriteCmd>

	st7789_WriteCmd(ST7789_DISPON);
 80056e2:	2029      	movs	r0, #41	; 0x29
 80056e4:	f7ff ff04 	bl	80054f0 <st7789_WriteCmd>


	//display orientation
	st7789_SetRotation(2);
 80056e8:	2002      	movs	r0, #2
 80056ea:	f7ff ff77 	bl	80055dc <st7789_SetRotation>
}
 80056ee:	bf00      	nop
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000e06 	.word	0x20000e06
 80056f8:	20000e0b 	.word	0x20000e0b
 80056fc:	20000e0a 	.word	0x20000e0a
 8005700:	20000e07 	.word	0x20000e07
 8005704:	20000e08 	.word	0x20000e08
 8005708:	20000e04 	.word	0x20000e04

0800570c <st7789_SetWindow>:

void st7789_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800570c:	b590      	push	{r4, r7, lr}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	4604      	mov	r4, r0
 8005714:	4608      	mov	r0, r1
 8005716:	4611      	mov	r1, r2
 8005718:	461a      	mov	r2, r3
 800571a:	4623      	mov	r3, r4
 800571c:	80fb      	strh	r3, [r7, #6]
 800571e:	4603      	mov	r3, r0
 8005720:	80bb      	strh	r3, [r7, #4]
 8005722:	460b      	mov	r3, r1
 8005724:	807b      	strh	r3, [r7, #2]
 8005726:	4613      	mov	r3, r2
 8005728:	803b      	strh	r3, [r7, #0]
	uint16_t xs = x0 + _st7789_xstart, xe = x1 + _st7789_xstart;
 800572a:	4b1a      	ldr	r3, [pc, #104]	; (8005794 <st7789_SetWindow+0x88>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	b29a      	uxth	r2, r3
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	4413      	add	r3, r2
 8005734:	81fb      	strh	r3, [r7, #14]
 8005736:	4b17      	ldr	r3, [pc, #92]	; (8005794 <st7789_SetWindow+0x88>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	b29a      	uxth	r2, r3
 800573c:	887b      	ldrh	r3, [r7, #2]
 800573e:	4413      	add	r3, r2
 8005740:	81bb      	strh	r3, [r7, #12]
	uint16_t ys = y0 + _st7789_ystart, ye = y1 + _st7789_ystart;
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <st7789_SetWindow+0x8c>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	b29a      	uxth	r2, r3
 8005748:	88bb      	ldrh	r3, [r7, #4]
 800574a:	4413      	add	r3, r2
 800574c:	817b      	strh	r3, [r7, #10]
 800574e:	4b12      	ldr	r3, [pc, #72]	; (8005798 <st7789_SetWindow+0x8c>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	b29a      	uxth	r2, r3
 8005754:	883b      	ldrh	r3, [r7, #0]
 8005756:	4413      	add	r3, r2
 8005758:	813b      	strh	r3, [r7, #8]

	st7789_WriteCmd(ST7789_CASET);
 800575a:	202a      	movs	r0, #42	; 0x2a
 800575c:	f7ff fec8 	bl	80054f0 <st7789_WriteCmd>
	st7789_WriteDataWord(xs);
 8005760:	89fb      	ldrh	r3, [r7, #14]
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff fef8 	bl	8005558 <st7789_WriteDataWord>
	st7789_WriteDataWord(xe);
 8005768:	89bb      	ldrh	r3, [r7, #12]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fef4 	bl	8005558 <st7789_WriteDataWord>

	st7789_WriteCmd(ST7789_RASET);
 8005770:	202b      	movs	r0, #43	; 0x2b
 8005772:	f7ff febd 	bl	80054f0 <st7789_WriteCmd>
	st7789_WriteDataWord(ys);
 8005776:	897b      	ldrh	r3, [r7, #10]
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff feed 	bl	8005558 <st7789_WriteDataWord>
	st7789_WriteDataWord(ye);
 800577e:	893b      	ldrh	r3, [r7, #8]
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff fee9 	bl	8005558 <st7789_WriteDataWord>

	st7789_WriteCmd(ST7789_RAMWR);
 8005786:	202c      	movs	r0, #44	; 0x2c
 8005788:	f7ff feb2 	bl	80054f0 <st7789_WriteCmd>
}
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	bd90      	pop	{r4, r7, pc}
 8005794:	20000e06 	.word	0x20000e06
 8005798:	20000e07 	.word	0x20000e07

0800579c <st7789_FillRectangle>:
	st7789_SetWindow(x, y, x+1, y+1);
	st7789_WriteDataWord(color);
}

void st7789_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800579c:	b590      	push	{r4, r7, lr}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	4604      	mov	r4, r0
 80057a4:	4608      	mov	r0, r1
 80057a6:	4611      	mov	r1, r2
 80057a8:	461a      	mov	r2, r3
 80057aa:	4623      	mov	r3, r4
 80057ac:	80fb      	strh	r3, [r7, #6]
 80057ae:	4603      	mov	r3, r0
 80057b0:	80bb      	strh	r3, [r7, #4]
 80057b2:	460b      	mov	r3, r1
 80057b4:	807b      	strh	r3, [r7, #2]
 80057b6:	4613      	mov	r3, r2
 80057b8:	803b      	strh	r3, [r7, #0]
  //if(x>=_width || y>=_height) return;
  if( x+w > _st7789_width )  w = _st7789_width - x;
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	887b      	ldrh	r3, [r7, #2]
 80057be:	4413      	add	r3, r2
 80057c0:	4a27      	ldr	r2, [pc, #156]	; (8005860 <st7789_FillRectangle+0xc4>)
 80057c2:	8812      	ldrh	r2, [r2, #0]
 80057c4:	4293      	cmp	r3, r2
 80057c6:	dd04      	ble.n	80057d2 <st7789_FillRectangle+0x36>
 80057c8:	4b25      	ldr	r3, [pc, #148]	; (8005860 <st7789_FillRectangle+0xc4>)
 80057ca:	881a      	ldrh	r2, [r3, #0]
 80057cc:	88fb      	ldrh	r3, [r7, #6]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	807b      	strh	r3, [r7, #2]
  if( y+h > _st7789_height )  h = _st7789_height - y;
 80057d2:	88ba      	ldrh	r2, [r7, #4]
 80057d4:	883b      	ldrh	r3, [r7, #0]
 80057d6:	4413      	add	r3, r2
 80057d8:	4a22      	ldr	r2, [pc, #136]	; (8005864 <st7789_FillRectangle+0xc8>)
 80057da:	8812      	ldrh	r2, [r2, #0]
 80057dc:	4293      	cmp	r3, r2
 80057de:	dd04      	ble.n	80057ea <st7789_FillRectangle+0x4e>
 80057e0:	4b20      	ldr	r3, [pc, #128]	; (8005864 <st7789_FillRectangle+0xc8>)
 80057e2:	881a      	ldrh	r2, [r3, #0]
 80057e4:	88bb      	ldrh	r3, [r7, #4]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	803b      	strh	r3, [r7, #0]
  st7789_SetWindow(x, y, x+w - 1, y+h - 1);
 80057ea:	88fa      	ldrh	r2, [r7, #6]
 80057ec:	887b      	ldrh	r3, [r7, #2]
 80057ee:	4413      	add	r3, r2
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29c      	uxth	r4, r3
 80057f6:	88ba      	ldrh	r2, [r7, #4]
 80057f8:	883b      	ldrh	r3, [r7, #0]
 80057fa:	4413      	add	r3, r2
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29b      	uxth	r3, r3
 8005802:	88b9      	ldrh	r1, [r7, #4]
 8005804:	88f8      	ldrh	r0, [r7, #6]
 8005806:	4622      	mov	r2, r4
 8005808:	f7ff ff80 	bl	800570c <st7789_SetWindow>

  HAL_GPIO_WritePin(DC_PIN, GPIO_PIN_SET);
 800580c:	2201      	movs	r2, #1
 800580e:	2110      	movs	r1, #16
 8005810:	4815      	ldr	r0, [pc, #84]	; (8005868 <st7789_FillRectangle+0xcc>)
 8005812:	f000 fc83 	bl	800611c <HAL_GPIO_WritePin>
  uint16_t data = (color >> 8) | (color << 8);
 8005816:	8c3b      	ldrh	r3, [r7, #32]
 8005818:	0a1b      	lsrs	r3, r3, #8
 800581a:	b29b      	uxth	r3, r3
 800581c:	b21a      	sxth	r2, r3
 800581e:	8c3b      	ldrh	r3, [r7, #32]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	b21b      	sxth	r3, r3
 8005824:	4313      	orrs	r3, r2
 8005826:	b21b      	sxth	r3, r3
 8005828:	b29b      	uxth	r3, r3
 800582a:	817b      	strh	r3, [r7, #10]


  for(int i = 0; i < (uint32_t)w*h; i++) {
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	e00a      	b.n	8005848 <st7789_FillRectangle+0xac>
	  HAL_SPI_Transmit(SPI_PORT, (uint8_t*)&data, 2, 10);
 8005832:	4b0e      	ldr	r3, [pc, #56]	; (800586c <st7789_FillRectangle+0xd0>)
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	f107 010a 	add.w	r1, r7, #10
 800583a:	230a      	movs	r3, #10
 800583c:	2202      	movs	r2, #2
 800583e:	f001 ffe7 	bl	8007810 <HAL_SPI_Transmit>
  for(int i = 0; i < (uint32_t)w*h; i++) {
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	3301      	adds	r3, #1
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	887b      	ldrh	r3, [r7, #2]
 800584a:	883a      	ldrh	r2, [r7, #0]
 800584c:	fb02 f203 	mul.w	r2, r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	429a      	cmp	r2, r3
 8005854:	d8ed      	bhi.n	8005832 <st7789_FillRectangle+0x96>
  }
}
 8005856:	bf00      	nop
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	bd90      	pop	{r4, r7, pc}
 800585e:	bf00      	nop
 8005860:	20000e08 	.word	0x20000e08
 8005864:	20000e04 	.word	0x20000e04
 8005868:	48000400 	.word	0x48000400
 800586c:	2000001c 	.word	0x2000001c

08005870 <st7789_FillScreen>:


void st7789_FillScreen(uint16_t color)
{
 8005870:	b590      	push	{r4, r7, lr}
 8005872:	b085      	sub	sp, #20
 8005874:	af02      	add	r7, sp, #8
 8005876:	4603      	mov	r3, r0
 8005878:	80fb      	strh	r3, [r7, #6]
	st7789_FillRectangle(_st7789_xstart, _st7789_ystart, _st7789_width, _st7789_height, color);
 800587a:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <st7789_FillScreen+0x30>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	b298      	uxth	r0, r3
 8005880:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <st7789_FillScreen+0x34>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	b299      	uxth	r1, r3
 8005886:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <st7789_FillScreen+0x38>)
 8005888:	881a      	ldrh	r2, [r3, #0]
 800588a:	4b08      	ldr	r3, [pc, #32]	; (80058ac <st7789_FillScreen+0x3c>)
 800588c:	881c      	ldrh	r4, [r3, #0]
 800588e:	88fb      	ldrh	r3, [r7, #6]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	4623      	mov	r3, r4
 8005894:	f7ff ff82 	bl	800579c <st7789_FillRectangle>
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	bd90      	pop	{r4, r7, pc}
 80058a0:	20000e06 	.word	0x20000e06
 80058a4:	20000e07 	.word	0x20000e07
 80058a8:	20000e08 	.word	0x20000e08
 80058ac:	20000e04 	.word	0x20000e04

080058b0 <st7789_DrawChar>:
		  HAL_SPI_Transmit(SPI_PORT, &img[i], 1, 10);
	  }
}

void st7789_DrawChar(uint16_t x, uint16_t y, const char ch, sFONT* Font, uint16_t BG_Color, uint16_t FG_Color)
{
 80058b0:	b590      	push	{r4, r7, lr}
 80058b2:	b08b      	sub	sp, #44	; 0x2c
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	607b      	str	r3, [r7, #4]
 80058b8:	4603      	mov	r3, r0
 80058ba:	81fb      	strh	r3, [r7, #14]
 80058bc:	460b      	mov	r3, r1
 80058be:	81bb      	strh	r3, [r7, #12]
 80058c0:	4613      	mov	r3, r2
 80058c2:	72fb      	strb	r3, [r7, #11]
	//if( x >= _st7789_width || y >= _st7789_height ) return;

	uint32_t Char_Offset = (ch - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80058c4:	7afb      	ldrb	r3, [r7, #11]
 80058c6:	3b20      	subs	r3, #32
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	88d2      	ldrh	r2, [r2, #6]
 80058cc:	fb02 f303 	mul.w	r3, r2, r3
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	8892      	ldrh	r2, [r2, #4]
 80058d4:	08d2      	lsrs	r2, r2, #3
 80058d6:	b292      	uxth	r2, r2
 80058d8:	4611      	mov	r1, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	8892      	ldrh	r2, [r2, #4]
 80058de:	f002 0207 	and.w	r2, r2, #7
 80058e2:	b292      	uxth	r2, r2
 80058e4:	2a00      	cmp	r2, #0
 80058e6:	bf14      	ite	ne
 80058e8:	2201      	movne	r2, #1
 80058ea:	2200      	moveq	r2, #0
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	440a      	add	r2, r1
 80058f0:	fb02 f303 	mul.w	r3, r2, r3
 80058f4:	61bb      	str	r3, [r7, #24]
	const unsigned char *ptr = &Font->table[Char_Offset];
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	4413      	add	r3, r2
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24


	st7789_SetWindow(x, y, x+Font->Width - 1, y+Font->Height - 1);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	889a      	ldrh	r2, [r3, #4]
 8005904:	89fb      	ldrh	r3, [r7, #14]
 8005906:	4413      	add	r3, r2
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29c      	uxth	r4, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	88da      	ldrh	r2, [r3, #6]
 8005912:	89bb      	ldrh	r3, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29b      	uxth	r3, r3
 800591c:	89b9      	ldrh	r1, [r7, #12]
 800591e:	89f8      	ldrh	r0, [r7, #14]
 8005920:	4622      	mov	r2, r4
 8005922:	f7ff fef3 	bl	800570c <st7789_SetWindow>
	HAL_GPIO_WritePin(DC_PIN, GPIO_PIN_SET);
 8005926:	2201      	movs	r2, #1
 8005928:	2110      	movs	r1, #16
 800592a:	4837      	ldr	r0, [pc, #220]	; (8005a08 <st7789_DrawChar+0x158>)
 800592c:	f000 fbf6 	bl	800611c <HAL_GPIO_WritePin>

	uint16_t fg = (FG_Color >> 8) | (FG_Color << 8);
 8005930:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005932:	0a1b      	lsrs	r3, r3, #8
 8005934:	b29b      	uxth	r3, r3
 8005936:	b21a      	sxth	r2, r3
 8005938:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800593a:	021b      	lsls	r3, r3, #8
 800593c:	b21b      	sxth	r3, r3
 800593e:	4313      	orrs	r3, r2
 8005940:	b21b      	sxth	r3, r3
 8005942:	b29b      	uxth	r3, r3
 8005944:	82fb      	strh	r3, [r7, #22]
	uint16_t bg = (BG_Color >> 8) | (BG_Color << 8);
 8005946:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005948:	0a1b      	lsrs	r3, r3, #8
 800594a:	b29b      	uxth	r3, r3
 800594c:	b21a      	sxth	r2, r3
 800594e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	b21b      	sxth	r3, r3
 8005954:	4313      	orrs	r3, r2
 8005956:	b21b      	sxth	r3, r3
 8005958:	b29b      	uxth	r3, r3
 800595a:	82bb      	strh	r3, [r7, #20]

	for (int Page = 0; Page < Font->Height; Page ++ )
 800595c:	2300      	movs	r3, #0
 800595e:	623b      	str	r3, [r7, #32]
 8005960:	e047      	b.n	80059f2 <st7789_DrawChar+0x142>
	{
		for (int Column = 0; Column < Font->Width; Column ++ )
 8005962:	2300      	movs	r3, #0
 8005964:	61fb      	str	r3, [r7, #28]
 8005966:	e031      	b.n	80059cc <st7789_DrawChar+0x11c>
		{
			if (*ptr & (0x80 >> (Column % 8)))
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	4619      	mov	r1, r3
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	425a      	negs	r2, r3
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	f002 0207 	and.w	r2, r2, #7
 800597a:	bf58      	it	pl
 800597c:	4253      	negpl	r3, r2
 800597e:	2280      	movs	r2, #128	; 0x80
 8005980:	fa42 f303 	asr.w	r3, r2, r3
 8005984:	400b      	ands	r3, r1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <st7789_DrawChar+0xec>
			{
				HAL_SPI_Transmit(SPI_PORT, (uint8_t*)&fg, 2, 10);
 800598a:	4b20      	ldr	r3, [pc, #128]	; (8005a0c <st7789_DrawChar+0x15c>)
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	f107 0116 	add.w	r1, r7, #22
 8005992:	230a      	movs	r3, #10
 8005994:	2202      	movs	r2, #2
 8005996:	f001 ff3b 	bl	8007810 <HAL_SPI_Transmit>
 800599a:	e007      	b.n	80059ac <st7789_DrawChar+0xfc>
				//st7789_DrawPixel(x + Column, y + Page, FG_Color);
			}
			else
			{
				HAL_SPI_Transmit(SPI_PORT, (uint8_t*)&bg, 2, 10);
 800599c:	4b1b      	ldr	r3, [pc, #108]	; (8005a0c <st7789_DrawChar+0x15c>)
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	f107 0114 	add.w	r1, r7, #20
 80059a4:	230a      	movs	r3, #10
 80059a6:	2202      	movs	r2, #2
 80059a8:	f001 ff32 	bl	8007810 <HAL_SPI_Transmit>
				//st7789_DrawPixel(x + Column, y + Page, BG_Color);
			}

			//One pixel is 8 bits
			if (Column % 8 == 7)
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	425a      	negs	r2, r3
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	f002 0207 	and.w	r2, r2, #7
 80059b8:	bf58      	it	pl
 80059ba:	4253      	negpl	r3, r2
 80059bc:	2b07      	cmp	r3, #7
 80059be:	d102      	bne.n	80059c6 <st7789_DrawChar+0x116>
				ptr++;
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	3301      	adds	r3, #1
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
		for (int Column = 0; Column < Font->Width; Column ++ )
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	3301      	adds	r3, #1
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	889b      	ldrh	r3, [r3, #4]
 80059d0:	461a      	mov	r2, r3
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4293      	cmp	r3, r2
 80059d6:	dbc7      	blt.n	8005968 <st7789_DrawChar+0xb8>
		}// Write a line
		if (Font->Width % 8 != 0)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	889b      	ldrh	r3, [r3, #4]
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <st7789_DrawChar+0x13c>
			ptr++;
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	3301      	adds	r3, #1
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
	for (int Page = 0; Page < Font->Height; Page ++ )
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	3301      	adds	r3, #1
 80059f0:	623b      	str	r3, [r7, #32]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	88db      	ldrh	r3, [r3, #6]
 80059f6:	461a      	mov	r2, r3
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	4293      	cmp	r3, r2
 80059fc:	dbb1      	blt.n	8005962 <st7789_DrawChar+0xb2>
	}// Write all
}
 80059fe:	bf00      	nop
 8005a00:	372c      	adds	r7, #44	; 0x2c
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd90      	pop	{r4, r7, pc}
 8005a06:	bf00      	nop
 8005a08:	48000400 	.word	0x48000400
 8005a0c:	2000001c 	.word	0x2000001c

08005a10 <st7789_DrawString>:

void st7789_DrawString(uint16_t x, uint16_t y, const char * pString, sFONT* Font, uint16_t BG_Color, uint16_t FG_Color )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	60ba      	str	r2, [r7, #8]
 8005a18:	607b      	str	r3, [r7, #4]
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	81fb      	strh	r3, [r7, #14]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	81bb      	strh	r3, [r7, #12]
	//if ( x > _st7789_width || y > _st7789_height ) return;

	uint16_t Xpoint = x;
 8005a22:	89fb      	ldrh	r3, [r7, #14]
 8005a24:	82fb      	strh	r3, [r7, #22]
	uint16_t Ypoint = y;
 8005a26:	89bb      	ldrh	r3, [r7, #12]
 8005a28:	82bb      	strh	r3, [r7, #20]

	while (* pString != '\0')
 8005a2a:	e02d      	b.n	8005a88 <st7789_DrawString+0x78>
	{
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
		if ((Xpoint + Font->Width ) > _st7789_width ) {
 8005a2c:	8afb      	ldrh	r3, [r7, #22]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	8892      	ldrh	r2, [r2, #4]
 8005a32:	4413      	add	r3, r2
 8005a34:	4a18      	ldr	r2, [pc, #96]	; (8005a98 <st7789_DrawString+0x88>)
 8005a36:	8812      	ldrh	r2, [r2, #0]
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	dd06      	ble.n	8005a4a <st7789_DrawString+0x3a>
			Xpoint = x;
 8005a3c:	89fb      	ldrh	r3, [r7, #14]
 8005a3e:	82fb      	strh	r3, [r7, #22]
			Ypoint += Font->Height;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	88da      	ldrh	r2, [r3, #6]
 8005a44:	8abb      	ldrh	r3, [r7, #20]
 8005a46:	4413      	add	r3, r2
 8005a48:	82bb      	strh	r3, [r7, #20]
		}

		// If the Y direction is full, reposition to(Xstart, Ystart)
		if ((Ypoint  + Font->Height ) > _st7789_height ) {
 8005a4a:	8abb      	ldrh	r3, [r7, #20]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	88d2      	ldrh	r2, [r2, #6]
 8005a50:	4413      	add	r3, r2
 8005a52:	4a12      	ldr	r2, [pc, #72]	; (8005a9c <st7789_DrawString+0x8c>)
 8005a54:	8812      	ldrh	r2, [r2, #0]
 8005a56:	4293      	cmp	r3, r2
 8005a58:	dd03      	ble.n	8005a62 <st7789_DrawString+0x52>
			Xpoint = x;
 8005a5a:	89fb      	ldrh	r3, [r7, #14]
 8005a5c:	82fb      	strh	r3, [r7, #22]
			Ypoint = y;
 8005a5e:	89bb      	ldrh	r3, [r7, #12]
 8005a60:	82bb      	strh	r3, [r7, #20]
		}
		st7789_DrawChar(Xpoint, Ypoint, * pString, Font, BG_Color, FG_Color);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	8ab9      	ldrh	r1, [r7, #20]
 8005a68:	8af8      	ldrh	r0, [r7, #22]
 8005a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a6c:	9301      	str	r3, [sp, #4]
 8005a6e:	8c3b      	ldrh	r3, [r7, #32]
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f7ff ff1c 	bl	80058b0 <st7789_DrawChar>

		pString ++;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60bb      	str	r3, [r7, #8]
		Xpoint += Font->Width;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	889a      	ldrh	r2, [r3, #4]
 8005a82:	8afb      	ldrh	r3, [r7, #22]
 8005a84:	4413      	add	r3, r2
 8005a86:	82fb      	strh	r3, [r7, #22]
	while (* pString != '\0')
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1cd      	bne.n	8005a2c <st7789_DrawString+0x1c>
	}
}
 8005a90:	bf00      	nop
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000e08 	.word	0x20000e08
 8005a9c:	20000e04 	.word	0x20000e04

08005aa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ad8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005aa4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005aa6:	e003      	b.n	8005ab0 <LoopCopyDataInit>

08005aa8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005aa8:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005aaa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005aac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005aae:	3104      	adds	r1, #4

08005ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005ab0:	480b      	ldr	r0, [pc, #44]	; (8005ae0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005ab2:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005ab4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005ab6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005ab8:	d3f6      	bcc.n	8005aa8 <CopyDataInit>
	ldr	r2, =_sbss
 8005aba:	4a0b      	ldr	r2, [pc, #44]	; (8005ae8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005abc:	e002      	b.n	8005ac4 <LoopFillZerobss>

08005abe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005abe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005ac0:	f842 3b04 	str.w	r3, [r2], #4

08005ac4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005ac4:	4b09      	ldr	r3, [pc, #36]	; (8005aec <LoopForever+0x16>)
	cmp	r2, r3
 8005ac6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005ac8:	d3f9      	bcc.n	8005abe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005aca:	f7fc fbbf 	bl	800224c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ace:	f007 fd15 	bl	800d4fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005ad2:	f7fc f921 	bl	8001d18 <main>

08005ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8005ad6:	e7fe      	b.n	8005ad6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005ad8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8005adc:	080145f0 	.word	0x080145f0
	ldr	r0, =_sdata
 8005ae0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005ae4:	20000214 	.word	0x20000214
	ldr	r2, =_sbss
 8005ae8:	20000218 	.word	0x20000218
	ldr	r3, = _ebss
 8005aec:	20001278 	.word	0x20001278

08005af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005af0:	e7fe      	b.n	8005af0 <ADC1_2_IRQHandler>
	...

08005af4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005af8:	4b08      	ldr	r3, [pc, #32]	; (8005b1c <HAL_Init+0x28>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a07      	ldr	r2, [pc, #28]	; (8005b1c <HAL_Init+0x28>)
 8005afe:	f043 0310 	orr.w	r3, r3, #16
 8005b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b04:	2003      	movs	r0, #3
 8005b06:	f000 f94d 	bl	8005da4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b0a:	2002      	movs	r0, #2
 8005b0c:	f000 f808 	bl	8005b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b10:	f7fc fab4 	bl	800207c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40022000 	.word	0x40022000

08005b20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b28:	4b12      	ldr	r3, [pc, #72]	; (8005b74 <HAL_InitTick+0x54>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4b12      	ldr	r3, [pc, #72]	; (8005b78 <HAL_InitTick+0x58>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	4619      	mov	r1, r3
 8005b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 f965 	bl	8005e0e <HAL_SYSTICK_Config>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e00e      	b.n	8005b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b0f      	cmp	r3, #15
 8005b52:	d80a      	bhi.n	8005b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b54:	2200      	movs	r2, #0
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	f000 f92d 	bl	8005dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b60:	4a06      	ldr	r2, [pc, #24]	; (8005b7c <HAL_InitTick+0x5c>)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	e000      	b.n	8005b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20000000 	.word	0x20000000
 8005b78:	20000024 	.word	0x20000024
 8005b7c:	20000020 	.word	0x20000020

08005b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b84:	4b06      	ldr	r3, [pc, #24]	; (8005ba0 <HAL_IncTick+0x20>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <HAL_IncTick+0x24>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4413      	add	r3, r2
 8005b90:	4a04      	ldr	r2, [pc, #16]	; (8005ba4 <HAL_IncTick+0x24>)
 8005b92:	6013      	str	r3, [r2, #0]
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	20000024 	.word	0x20000024
 8005ba4:	20000e0c 	.word	0x20000e0c

08005ba8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  return uwTick;  
 8005bac:	4b03      	ldr	r3, [pc, #12]	; (8005bbc <HAL_GetTick+0x14>)
 8005bae:	681b      	ldr	r3, [r3, #0]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	20000e0c 	.word	0x20000e0c

08005bc0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bc8:	f7ff ffee 	bl	8005ba8 <HAL_GetTick>
 8005bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd8:	d005      	beq.n	8005be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <HAL_Delay+0x40>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005be6:	bf00      	nop
 8005be8:	f7ff ffde 	bl	8005ba8 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d8f7      	bhi.n	8005be8 <HAL_Delay+0x28>
  {
  }
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000024 	.word	0x20000024

08005c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c14:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <__NVIC_SetPriorityGrouping+0x44>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c20:	4013      	ands	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c36:	4a04      	ldr	r2, [pc, #16]	; (8005c48 <__NVIC_SetPriorityGrouping+0x44>)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	60d3      	str	r3, [r2, #12]
}
 8005c3c:	bf00      	nop
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	e000ed00 	.word	0xe000ed00

08005c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c50:	4b04      	ldr	r3, [pc, #16]	; (8005c64 <__NVIC_GetPriorityGrouping+0x18>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	0a1b      	lsrs	r3, r3, #8
 8005c56:	f003 0307 	and.w	r3, r3, #7
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	e000ed00 	.word	0xe000ed00

08005c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	db0b      	blt.n	8005c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	f003 021f 	and.w	r2, r3, #31
 8005c80:	4907      	ldr	r1, [pc, #28]	; (8005ca0 <__NVIC_EnableIRQ+0x38>)
 8005c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	2001      	movs	r0, #1
 8005c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8005c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	e000e100 	.word	0xe000e100

08005ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	6039      	str	r1, [r7, #0]
 8005cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	db0a      	blt.n	8005cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	490c      	ldr	r1, [pc, #48]	; (8005cf0 <__NVIC_SetPriority+0x4c>)
 8005cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc2:	0112      	lsls	r2, r2, #4
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ccc:	e00a      	b.n	8005ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	4908      	ldr	r1, [pc, #32]	; (8005cf4 <__NVIC_SetPriority+0x50>)
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	3b04      	subs	r3, #4
 8005cdc:	0112      	lsls	r2, r2, #4
 8005cde:	b2d2      	uxtb	r2, r2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	761a      	strb	r2, [r3, #24]
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	e000e100 	.word	0xe000e100
 8005cf4:	e000ed00 	.word	0xe000ed00

08005cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b089      	sub	sp, #36	; 0x24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f1c3 0307 	rsb	r3, r3, #7
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	bf28      	it	cs
 8005d16:	2304      	movcs	r3, #4
 8005d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	2b06      	cmp	r3, #6
 8005d20:	d902      	bls.n	8005d28 <NVIC_EncodePriority+0x30>
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	3b03      	subs	r3, #3
 8005d26:	e000      	b.n	8005d2a <NVIC_EncodePriority+0x32>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	43da      	mvns	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	401a      	ands	r2, r3
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d40:	f04f 31ff 	mov.w	r1, #4294967295
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4a:	43d9      	mvns	r1, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d50:	4313      	orrs	r3, r2
         );
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3724      	adds	r7, #36	; 0x24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d70:	d301      	bcc.n	8005d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d72:	2301      	movs	r3, #1
 8005d74:	e00f      	b.n	8005d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d76:	4a0a      	ldr	r2, [pc, #40]	; (8005da0 <SysTick_Config+0x40>)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d7e:	210f      	movs	r1, #15
 8005d80:	f04f 30ff 	mov.w	r0, #4294967295
 8005d84:	f7ff ff8e 	bl	8005ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d88:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <SysTick_Config+0x40>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d8e:	4b04      	ldr	r3, [pc, #16]	; (8005da0 <SysTick_Config+0x40>)
 8005d90:	2207      	movs	r2, #7
 8005d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	e000e010 	.word	0xe000e010

08005da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff ff29 	bl	8005c04 <__NVIC_SetPriorityGrouping>
}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b086      	sub	sp, #24
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	607a      	str	r2, [r7, #4]
 8005dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005dcc:	f7ff ff3e 	bl	8005c4c <__NVIC_GetPriorityGrouping>
 8005dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	6978      	ldr	r0, [r7, #20]
 8005dd8:	f7ff ff8e 	bl	8005cf8 <NVIC_EncodePriority>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005de2:	4611      	mov	r1, r2
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff ff5d 	bl	8005ca4 <__NVIC_SetPriority>
}
 8005dea:	bf00      	nop
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	4603      	mov	r3, r0
 8005dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff ff31 	bl	8005c68 <__NVIC_EnableIRQ>
}
 8005e06:	bf00      	nop
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff ffa2 	bl	8005d60 <SysTick_Config>
 8005e1c:	4603      	mov	r3, r0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e32:	2300      	movs	r3, #0
 8005e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e36:	e154      	b.n	80060e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	fa01 f303 	lsl.w	r3, r1, r3
 8005e44:	4013      	ands	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 8146 	beq.w	80060dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d003      	beq.n	8005e60 <HAL_GPIO_Init+0x38>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b12      	cmp	r3, #18
 8005e5e:	d123      	bne.n	8005ea8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	08da      	lsrs	r2, r3, #3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3208      	adds	r2, #8
 8005e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	220f      	movs	r2, #15
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4013      	ands	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	08da      	lsrs	r2, r3, #3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3208      	adds	r2, #8
 8005ea2:	6939      	ldr	r1, [r7, #16]
 8005ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	2203      	movs	r2, #3
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 0203 	and.w	r2, r3, #3
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d00b      	beq.n	8005efc <HAL_GPIO_Init+0xd4>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d007      	beq.n	8005efc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ef0:	2b11      	cmp	r3, #17
 8005ef2:	d003      	beq.n	8005efc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b12      	cmp	r3, #18
 8005efa:	d130      	bne.n	8005f5e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	2203      	movs	r2, #3
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4013      	ands	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f32:	2201      	movs	r2, #1
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	43db      	mvns	r3, r3
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	091b      	lsrs	r3, r3, #4
 8005f48:	f003 0201 	and.w	r2, r3, #1
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	2203      	movs	r2, #3
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	43db      	mvns	r3, r3
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4013      	ands	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 80a0 	beq.w	80060dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f9c:	4b58      	ldr	r3, [pc, #352]	; (8006100 <HAL_GPIO_Init+0x2d8>)
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	4a57      	ldr	r2, [pc, #348]	; (8006100 <HAL_GPIO_Init+0x2d8>)
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	6193      	str	r3, [r2, #24]
 8005fa8:	4b55      	ldr	r3, [pc, #340]	; (8006100 <HAL_GPIO_Init+0x2d8>)
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	60bb      	str	r3, [r7, #8]
 8005fb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005fb4:	4a53      	ldr	r2, [pc, #332]	; (8006104 <HAL_GPIO_Init+0x2dc>)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	089b      	lsrs	r3, r3, #2
 8005fba:	3302      	adds	r3, #2
 8005fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f003 0303 	and.w	r3, r3, #3
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	220f      	movs	r2, #15
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005fde:	d019      	beq.n	8006014 <HAL_GPIO_Init+0x1ec>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a49      	ldr	r2, [pc, #292]	; (8006108 <HAL_GPIO_Init+0x2e0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <HAL_GPIO_Init+0x1e8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a48      	ldr	r2, [pc, #288]	; (800610c <HAL_GPIO_Init+0x2e4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00d      	beq.n	800600c <HAL_GPIO_Init+0x1e4>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a47      	ldr	r2, [pc, #284]	; (8006110 <HAL_GPIO_Init+0x2e8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d007      	beq.n	8006008 <HAL_GPIO_Init+0x1e0>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a46      	ldr	r2, [pc, #280]	; (8006114 <HAL_GPIO_Init+0x2ec>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d101      	bne.n	8006004 <HAL_GPIO_Init+0x1dc>
 8006000:	2304      	movs	r3, #4
 8006002:	e008      	b.n	8006016 <HAL_GPIO_Init+0x1ee>
 8006004:	2305      	movs	r3, #5
 8006006:	e006      	b.n	8006016 <HAL_GPIO_Init+0x1ee>
 8006008:	2303      	movs	r3, #3
 800600a:	e004      	b.n	8006016 <HAL_GPIO_Init+0x1ee>
 800600c:	2302      	movs	r3, #2
 800600e:	e002      	b.n	8006016 <HAL_GPIO_Init+0x1ee>
 8006010:	2301      	movs	r3, #1
 8006012:	e000      	b.n	8006016 <HAL_GPIO_Init+0x1ee>
 8006014:	2300      	movs	r3, #0
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	f002 0203 	and.w	r2, r2, #3
 800601c:	0092      	lsls	r2, r2, #2
 800601e:	4093      	lsls	r3, r2
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006026:	4937      	ldr	r1, [pc, #220]	; (8006104 <HAL_GPIO_Init+0x2dc>)
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	089b      	lsrs	r3, r3, #2
 800602c:	3302      	adds	r3, #2
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006034:	4b38      	ldr	r3, [pc, #224]	; (8006118 <HAL_GPIO_Init+0x2f0>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	43db      	mvns	r3, r3
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4013      	ands	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006058:	4a2f      	ldr	r2, [pc, #188]	; (8006118 <HAL_GPIO_Init+0x2f0>)
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800605e:	4b2e      	ldr	r3, [pc, #184]	; (8006118 <HAL_GPIO_Init+0x2f0>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	43db      	mvns	r3, r3
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4013      	ands	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006082:	4a25      	ldr	r2, [pc, #148]	; (8006118 <HAL_GPIO_Init+0x2f0>)
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006088:	4b23      	ldr	r3, [pc, #140]	; (8006118 <HAL_GPIO_Init+0x2f0>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	43db      	mvns	r3, r3
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4013      	ands	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80060ac:	4a1a      	ldr	r2, [pc, #104]	; (8006118 <HAL_GPIO_Init+0x2f0>)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060b2:	4b19      	ldr	r3, [pc, #100]	; (8006118 <HAL_GPIO_Init+0x2f0>)
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	43db      	mvns	r3, r3
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4013      	ands	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80060d6:	4a10      	ldr	r2, [pc, #64]	; (8006118 <HAL_GPIO_Init+0x2f0>)
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	3301      	adds	r3, #1
 80060e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	fa22 f303 	lsr.w	r3, r2, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f47f aea3 	bne.w	8005e38 <HAL_GPIO_Init+0x10>
  }
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40021000 	.word	0x40021000
 8006104:	40010000 	.word	0x40010000
 8006108:	48000400 	.word	0x48000400
 800610c:	48000800 	.word	0x48000800
 8006110:	48000c00 	.word	0x48000c00
 8006114:	48001000 	.word	0x48001000
 8006118:	40010400 	.word	0x40010400

0800611c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	807b      	strh	r3, [r7, #2]
 8006128:	4613      	mov	r3, r2
 800612a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800612c:	787b      	ldrb	r3, [r7, #1]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006132:	887a      	ldrh	r2, [r7, #2]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006138:	e002      	b.n	8006140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800613a:	887a      	ldrh	r2, [r7, #2]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	695a      	ldr	r2, [r3, #20]
 800615c:	887b      	ldrh	r3, [r7, #2]
 800615e:	4013      	ands	r3, r2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006164:	887b      	ldrh	r3, [r7, #2]
 8006166:	041a      	lsls	r2, r3, #16
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800616c:	e002      	b.n	8006174 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800616e:	887a      	ldrh	r2, [r7, #2]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	619a      	str	r2, [r3, #24]
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800618a:	4b08      	ldr	r3, [pc, #32]	; (80061ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800618c:	695a      	ldr	r2, [r3, #20]
 800618e:	88fb      	ldrh	r3, [r7, #6]
 8006190:	4013      	ands	r3, r2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d006      	beq.n	80061a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006196:	4a05      	ldr	r2, [pc, #20]	; (80061ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006198:	88fb      	ldrh	r3, [r7, #6]
 800619a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800619c:	88fb      	ldrh	r3, [r7, #6]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fb fe30 	bl	8001e04 <HAL_GPIO_EXTI_Callback>
  }
}
 80061a4:	bf00      	nop
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40010400 	.word	0x40010400

080061b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	1d3b      	adds	r3, r7, #4
 80061ba:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061bc:	1d3b      	adds	r3, r7, #4
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	f000 bef4 	b.w	8006fb2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ca:	1d3b      	adds	r3, r7, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 816a 	beq.w	80064ae <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80061da:	4bb3      	ldr	r3, [pc, #716]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f003 030c 	and.w	r3, r3, #12
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d00c      	beq.n	8006200 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061e6:	4bb0      	ldr	r3, [pc, #704]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f003 030c 	and.w	r3, r3, #12
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d159      	bne.n	80062a6 <HAL_RCC_OscConfig+0xf6>
 80061f2:	4bad      	ldr	r3, [pc, #692]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061fe:	d152      	bne.n	80062a6 <HAL_RCC_OscConfig+0xf6>
 8006200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006204:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006208:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800620c:	fa93 f3a3 	rbit	r3, r3
 8006210:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006214:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006218:	fab3 f383 	clz	r3, r3
 800621c:	b2db      	uxtb	r3, r3
 800621e:	095b      	lsrs	r3, r3, #5
 8006220:	b2db      	uxtb	r3, r3
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b01      	cmp	r3, #1
 800622a:	d102      	bne.n	8006232 <HAL_RCC_OscConfig+0x82>
 800622c:	4b9e      	ldr	r3, [pc, #632]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	e015      	b.n	800625e <HAL_RCC_OscConfig+0xae>
 8006232:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006236:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800623a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800623e:	fa93 f3a3 	rbit	r3, r3
 8006242:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006246:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800624a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800624e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006252:	fa93 f3a3 	rbit	r3, r3
 8006256:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800625a:	4b93      	ldr	r3, [pc, #588]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006262:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006266:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800626a:	fa92 f2a2 	rbit	r2, r2
 800626e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006272:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006276:	fab2 f282 	clz	r2, r2
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	f042 0220 	orr.w	r2, r2, #32
 8006280:	b2d2      	uxtb	r2, r2
 8006282:	f002 021f 	and.w	r2, r2, #31
 8006286:	2101      	movs	r1, #1
 8006288:	fa01 f202 	lsl.w	r2, r1, r2
 800628c:	4013      	ands	r3, r2
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 810c 	beq.w	80064ac <HAL_RCC_OscConfig+0x2fc>
 8006294:	1d3b      	adds	r3, r7, #4
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f040 8106 	bne.w	80064ac <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f000 be86 	b.w	8006fb2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062a6:	1d3b      	adds	r3, r7, #4
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b0:	d106      	bne.n	80062c0 <HAL_RCC_OscConfig+0x110>
 80062b2:	4b7d      	ldr	r3, [pc, #500]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a7c      	ldr	r2, [pc, #496]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 80062b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	e030      	b.n	8006322 <HAL_RCC_OscConfig+0x172>
 80062c0:	1d3b      	adds	r3, r7, #4
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10c      	bne.n	80062e4 <HAL_RCC_OscConfig+0x134>
 80062ca:	4b77      	ldr	r3, [pc, #476]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a76      	ldr	r2, [pc, #472]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 80062d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	4b74      	ldr	r3, [pc, #464]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a73      	ldr	r2, [pc, #460]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 80062dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	e01e      	b.n	8006322 <HAL_RCC_OscConfig+0x172>
 80062e4:	1d3b      	adds	r3, r7, #4
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062ee:	d10c      	bne.n	800630a <HAL_RCC_OscConfig+0x15a>
 80062f0:	4b6d      	ldr	r3, [pc, #436]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a6c      	ldr	r2, [pc, #432]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 80062f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	4b6a      	ldr	r3, [pc, #424]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a69      	ldr	r2, [pc, #420]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 8006302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	e00b      	b.n	8006322 <HAL_RCC_OscConfig+0x172>
 800630a:	4b67      	ldr	r3, [pc, #412]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a66      	ldr	r2, [pc, #408]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 8006310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	4b64      	ldr	r3, [pc, #400]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a63      	ldr	r2, [pc, #396]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 800631c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006320:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006322:	4b61      	ldr	r3, [pc, #388]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 8006324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006326:	f023 020f 	bic.w	r2, r3, #15
 800632a:	1d3b      	adds	r3, r7, #4
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	495d      	ldr	r1, [pc, #372]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 8006332:	4313      	orrs	r3, r2
 8006334:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006336:	1d3b      	adds	r3, r7, #4
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d059      	beq.n	80063f4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006340:	f7ff fc32 	bl	8005ba8 <HAL_GetTick>
 8006344:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006348:	e00a      	b.n	8006360 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800634a:	f7ff fc2d 	bl	8005ba8 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b64      	cmp	r3, #100	; 0x64
 8006358:	d902      	bls.n	8006360 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	f000 be29 	b.w	8006fb2 <HAL_RCC_OscConfig+0xe02>
 8006360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006364:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006368:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800636c:	fa93 f3a3 	rbit	r3, r3
 8006370:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006374:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006378:	fab3 f383 	clz	r3, r3
 800637c:	b2db      	uxtb	r3, r3
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f043 0301 	orr.w	r3, r3, #1
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b01      	cmp	r3, #1
 800638a:	d102      	bne.n	8006392 <HAL_RCC_OscConfig+0x1e2>
 800638c:	4b46      	ldr	r3, [pc, #280]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	e015      	b.n	80063be <HAL_RCC_OscConfig+0x20e>
 8006392:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006396:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800639a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800639e:	fa93 f3a3 	rbit	r3, r3
 80063a2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80063a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063aa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80063ae:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80063b2:	fa93 f3a3 	rbit	r3, r3
 80063b6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80063ba:	4b3b      	ldr	r3, [pc, #236]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80063c2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80063c6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80063ca:	fa92 f2a2 	rbit	r2, r2
 80063ce:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80063d2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80063d6:	fab2 f282 	clz	r2, r2
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	f042 0220 	orr.w	r2, r2, #32
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	f002 021f 	and.w	r2, r2, #31
 80063e6:	2101      	movs	r1, #1
 80063e8:	fa01 f202 	lsl.w	r2, r1, r2
 80063ec:	4013      	ands	r3, r2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0ab      	beq.n	800634a <HAL_RCC_OscConfig+0x19a>
 80063f2:	e05c      	b.n	80064ae <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f4:	f7ff fbd8 	bl	8005ba8 <HAL_GetTick>
 80063f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063fc:	e00a      	b.n	8006414 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063fe:	f7ff fbd3 	bl	8005ba8 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b64      	cmp	r3, #100	; 0x64
 800640c:	d902      	bls.n	8006414 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	f000 bdcf 	b.w	8006fb2 <HAL_RCC_OscConfig+0xe02>
 8006414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006418:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800641c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006420:	fa93 f3a3 	rbit	r3, r3
 8006424:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006428:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800642c:	fab3 f383 	clz	r3, r3
 8006430:	b2db      	uxtb	r3, r3
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f043 0301 	orr.w	r3, r3, #1
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d102      	bne.n	8006446 <HAL_RCC_OscConfig+0x296>
 8006440:	4b19      	ldr	r3, [pc, #100]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	e015      	b.n	8006472 <HAL_RCC_OscConfig+0x2c2>
 8006446:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800644a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800644e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006452:	fa93 f3a3 	rbit	r3, r3
 8006456:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800645a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800645e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006462:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006466:	fa93 f3a3 	rbit	r3, r3
 800646a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800646e:	4b0e      	ldr	r3, [pc, #56]	; (80064a8 <HAL_RCC_OscConfig+0x2f8>)
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006476:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800647a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800647e:	fa92 f2a2 	rbit	r2, r2
 8006482:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006486:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800648a:	fab2 f282 	clz	r2, r2
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	f042 0220 	orr.w	r2, r2, #32
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	f002 021f 	and.w	r2, r2, #31
 800649a:	2101      	movs	r1, #1
 800649c:	fa01 f202 	lsl.w	r2, r1, r2
 80064a0:	4013      	ands	r3, r2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1ab      	bne.n	80063fe <HAL_RCC_OscConfig+0x24e>
 80064a6:	e002      	b.n	80064ae <HAL_RCC_OscConfig+0x2fe>
 80064a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064ae:	1d3b      	adds	r3, r7, #4
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 816f 	beq.w	800679c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80064be:	4bd0      	ldr	r3, [pc, #832]	; (8006800 <HAL_RCC_OscConfig+0x650>)
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f003 030c 	and.w	r3, r3, #12
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00b      	beq.n	80064e2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80064ca:	4bcd      	ldr	r3, [pc, #820]	; (8006800 <HAL_RCC_OscConfig+0x650>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f003 030c 	and.w	r3, r3, #12
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d16c      	bne.n	80065b0 <HAL_RCC_OscConfig+0x400>
 80064d6:	4bca      	ldr	r3, [pc, #808]	; (8006800 <HAL_RCC_OscConfig+0x650>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d166      	bne.n	80065b0 <HAL_RCC_OscConfig+0x400>
 80064e2:	2302      	movs	r3, #2
 80064e4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80064ec:	fa93 f3a3 	rbit	r3, r3
 80064f0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80064f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064f8:	fab3 f383 	clz	r3, r3
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	b2db      	uxtb	r3, r3
 8006502:	f043 0301 	orr.w	r3, r3, #1
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b01      	cmp	r3, #1
 800650a:	d102      	bne.n	8006512 <HAL_RCC_OscConfig+0x362>
 800650c:	4bbc      	ldr	r3, [pc, #752]	; (8006800 <HAL_RCC_OscConfig+0x650>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	e013      	b.n	800653a <HAL_RCC_OscConfig+0x38a>
 8006512:	2302      	movs	r3, #2
 8006514:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006518:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800651c:	fa93 f3a3 	rbit	r3, r3
 8006520:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006524:	2302      	movs	r3, #2
 8006526:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800652a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800652e:	fa93 f3a3 	rbit	r3, r3
 8006532:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006536:	4bb2      	ldr	r3, [pc, #712]	; (8006800 <HAL_RCC_OscConfig+0x650>)
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	2202      	movs	r2, #2
 800653c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006540:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006544:	fa92 f2a2 	rbit	r2, r2
 8006548:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800654c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006550:	fab2 f282 	clz	r2, r2
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	f042 0220 	orr.w	r2, r2, #32
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	f002 021f 	and.w	r2, r2, #31
 8006560:	2101      	movs	r1, #1
 8006562:	fa01 f202 	lsl.w	r2, r1, r2
 8006566:	4013      	ands	r3, r2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <HAL_RCC_OscConfig+0x3cc>
 800656c:	1d3b      	adds	r3, r7, #4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d002      	beq.n	800657c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f000 bd1b 	b.w	8006fb2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800657c:	4ba0      	ldr	r3, [pc, #640]	; (8006800 <HAL_RCC_OscConfig+0x650>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006584:	1d3b      	adds	r3, r7, #4
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	21f8      	movs	r1, #248	; 0xf8
 800658c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006590:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006594:	fa91 f1a1 	rbit	r1, r1
 8006598:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800659c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80065a0:	fab1 f181 	clz	r1, r1
 80065a4:	b2c9      	uxtb	r1, r1
 80065a6:	408b      	lsls	r3, r1
 80065a8:	4995      	ldr	r1, [pc, #596]	; (8006800 <HAL_RCC_OscConfig+0x650>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ae:	e0f5      	b.n	800679c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065b0:	1d3b      	adds	r3, r7, #4
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 8085 	beq.w	80066c6 <HAL_RCC_OscConfig+0x516>
 80065bc:	2301      	movs	r3, #1
 80065be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80065c6:	fa93 f3a3 	rbit	r3, r3
 80065ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80065ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065d2:	fab3 f383 	clz	r3, r3
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80065dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	461a      	mov	r2, r3
 80065e4:	2301      	movs	r3, #1
 80065e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e8:	f7ff fade 	bl	8005ba8 <HAL_GetTick>
 80065ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065f0:	e00a      	b.n	8006608 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065f2:	f7ff fad9 	bl	8005ba8 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d902      	bls.n	8006608 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	f000 bcd5 	b.w	8006fb2 <HAL_RCC_OscConfig+0xe02>
 8006608:	2302      	movs	r3, #2
 800660a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800660e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006612:	fa93 f3a3 	rbit	r3, r3
 8006616:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800661a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800661e:	fab3 f383 	clz	r3, r3
 8006622:	b2db      	uxtb	r3, r3
 8006624:	095b      	lsrs	r3, r3, #5
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b01      	cmp	r3, #1
 8006630:	d102      	bne.n	8006638 <HAL_RCC_OscConfig+0x488>
 8006632:	4b73      	ldr	r3, [pc, #460]	; (8006800 <HAL_RCC_OscConfig+0x650>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	e013      	b.n	8006660 <HAL_RCC_OscConfig+0x4b0>
 8006638:	2302      	movs	r3, #2
 800663a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800663e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006642:	fa93 f3a3 	rbit	r3, r3
 8006646:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800664a:	2302      	movs	r3, #2
 800664c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006650:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006654:	fa93 f3a3 	rbit	r3, r3
 8006658:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800665c:	4b68      	ldr	r3, [pc, #416]	; (8006800 <HAL_RCC_OscConfig+0x650>)
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	2202      	movs	r2, #2
 8006662:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006666:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800666a:	fa92 f2a2 	rbit	r2, r2
 800666e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006672:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006676:	fab2 f282 	clz	r2, r2
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	f042 0220 	orr.w	r2, r2, #32
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	f002 021f 	and.w	r2, r2, #31
 8006686:	2101      	movs	r1, #1
 8006688:	fa01 f202 	lsl.w	r2, r1, r2
 800668c:	4013      	ands	r3, r2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0af      	beq.n	80065f2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006692:	4b5b      	ldr	r3, [pc, #364]	; (8006800 <HAL_RCC_OscConfig+0x650>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800669a:	1d3b      	adds	r3, r7, #4
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	21f8      	movs	r1, #248	; 0xf8
 80066a2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80066aa:	fa91 f1a1 	rbit	r1, r1
 80066ae:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80066b2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80066b6:	fab1 f181 	clz	r1, r1
 80066ba:	b2c9      	uxtb	r1, r1
 80066bc:	408b      	lsls	r3, r1
 80066be:	4950      	ldr	r1, [pc, #320]	; (8006800 <HAL_RCC_OscConfig+0x650>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	600b      	str	r3, [r1, #0]
 80066c4:	e06a      	b.n	800679c <HAL_RCC_OscConfig+0x5ec>
 80066c6:	2301      	movs	r3, #1
 80066c8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80066d0:	fa93 f3a3 	rbit	r3, r3
 80066d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80066d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066dc:	fab3 f383 	clz	r3, r3
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80066e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	461a      	mov	r2, r3
 80066ee:	2300      	movs	r3, #0
 80066f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f2:	f7ff fa59 	bl	8005ba8 <HAL_GetTick>
 80066f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066fa:	e00a      	b.n	8006712 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066fc:	f7ff fa54 	bl	8005ba8 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d902      	bls.n	8006712 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	f000 bc50 	b.w	8006fb2 <HAL_RCC_OscConfig+0xe02>
 8006712:	2302      	movs	r3, #2
 8006714:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006718:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800671c:	fa93 f3a3 	rbit	r3, r3
 8006720:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006728:	fab3 f383 	clz	r3, r3
 800672c:	b2db      	uxtb	r3, r3
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f043 0301 	orr.w	r3, r3, #1
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b01      	cmp	r3, #1
 800673a:	d102      	bne.n	8006742 <HAL_RCC_OscConfig+0x592>
 800673c:	4b30      	ldr	r3, [pc, #192]	; (8006800 <HAL_RCC_OscConfig+0x650>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	e013      	b.n	800676a <HAL_RCC_OscConfig+0x5ba>
 8006742:	2302      	movs	r3, #2
 8006744:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006748:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800674c:	fa93 f3a3 	rbit	r3, r3
 8006750:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006754:	2302      	movs	r3, #2
 8006756:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800675a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800675e:	fa93 f3a3 	rbit	r3, r3
 8006762:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006766:	4b26      	ldr	r3, [pc, #152]	; (8006800 <HAL_RCC_OscConfig+0x650>)
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	2202      	movs	r2, #2
 800676c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006770:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006774:	fa92 f2a2 	rbit	r2, r2
 8006778:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800677c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006780:	fab2 f282 	clz	r2, r2
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	f042 0220 	orr.w	r2, r2, #32
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	f002 021f 	and.w	r2, r2, #31
 8006790:	2101      	movs	r1, #1
 8006792:	fa01 f202 	lsl.w	r2, r1, r2
 8006796:	4013      	ands	r3, r2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1af      	bne.n	80066fc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800679c:	1d3b      	adds	r3, r7, #4
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 80da 	beq.w	8006960 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067ac:	1d3b      	adds	r3, r7, #4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d069      	beq.n	800688a <HAL_RCC_OscConfig+0x6da>
 80067b6:	2301      	movs	r3, #1
 80067b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80067c0:	fa93 f3a3 	rbit	r3, r3
 80067c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80067c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067cc:	fab3 f383 	clz	r3, r3
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	461a      	mov	r2, r3
 80067d4:	4b0b      	ldr	r3, [pc, #44]	; (8006804 <HAL_RCC_OscConfig+0x654>)
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	461a      	mov	r2, r3
 80067dc:	2301      	movs	r3, #1
 80067de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067e0:	f7ff f9e2 	bl	8005ba8 <HAL_GetTick>
 80067e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067e8:	e00e      	b.n	8006808 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067ea:	f7ff f9dd 	bl	8005ba8 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d906      	bls.n	8006808 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e3d9      	b.n	8006fb2 <HAL_RCC_OscConfig+0xe02>
 80067fe:	bf00      	nop
 8006800:	40021000 	.word	0x40021000
 8006804:	10908120 	.word	0x10908120
 8006808:	2302      	movs	r3, #2
 800680a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800680e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006812:	fa93 f3a3 	rbit	r3, r3
 8006816:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800681a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800681e:	2202      	movs	r2, #2
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	fa93 f2a3 	rbit	r2, r3
 800682c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006836:	2202      	movs	r2, #2
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	fa93 f2a3 	rbit	r2, r3
 8006844:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006848:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800684a:	4ba5      	ldr	r3, [pc, #660]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 800684c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800684e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006852:	2102      	movs	r1, #2
 8006854:	6019      	str	r1, [r3, #0]
 8006856:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	fa93 f1a3 	rbit	r1, r3
 8006860:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006864:	6019      	str	r1, [r3, #0]
  return result;
 8006866:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	fab3 f383 	clz	r3, r3
 8006870:	b2db      	uxtb	r3, r3
 8006872:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006876:	b2db      	uxtb	r3, r3
 8006878:	f003 031f 	and.w	r3, r3, #31
 800687c:	2101      	movs	r1, #1
 800687e:	fa01 f303 	lsl.w	r3, r1, r3
 8006882:	4013      	ands	r3, r2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0b0      	beq.n	80067ea <HAL_RCC_OscConfig+0x63a>
 8006888:	e06a      	b.n	8006960 <HAL_RCC_OscConfig+0x7b0>
 800688a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800688e:	2201      	movs	r2, #1
 8006890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006892:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	fa93 f2a3 	rbit	r2, r3
 800689c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80068a0:	601a      	str	r2, [r3, #0]
  return result;
 80068a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80068a6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068a8:	fab3 f383 	clz	r3, r3
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	461a      	mov	r2, r3
 80068b0:	4b8c      	ldr	r3, [pc, #560]	; (8006ae4 <HAL_RCC_OscConfig+0x934>)
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	461a      	mov	r2, r3
 80068b8:	2300      	movs	r3, #0
 80068ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068bc:	f7ff f974 	bl	8005ba8 <HAL_GetTick>
 80068c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068c4:	e009      	b.n	80068da <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068c6:	f7ff f96f 	bl	8005ba8 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e36b      	b.n	8006fb2 <HAL_RCC_OscConfig+0xe02>
 80068da:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80068de:	2202      	movs	r2, #2
 80068e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	fa93 f2a3 	rbit	r2, r3
 80068ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80068f6:	2202      	movs	r2, #2
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	fa93 f2a3 	rbit	r2, r3
 8006904:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800690e:	2202      	movs	r2, #2
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	fa93 f2a3 	rbit	r2, r3
 800691c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006920:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006922:	4b6f      	ldr	r3, [pc, #444]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006926:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800692a:	2102      	movs	r1, #2
 800692c:	6019      	str	r1, [r3, #0]
 800692e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	fa93 f1a3 	rbit	r1, r3
 8006938:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800693c:	6019      	str	r1, [r3, #0]
  return result;
 800693e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	fab3 f383 	clz	r3, r3
 8006948:	b2db      	uxtb	r3, r3
 800694a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800694e:	b2db      	uxtb	r3, r3
 8006950:	f003 031f 	and.w	r3, r3, #31
 8006954:	2101      	movs	r1, #1
 8006956:	fa01 f303 	lsl.w	r3, r1, r3
 800695a:	4013      	ands	r3, r2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1b2      	bne.n	80068c6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006960:	1d3b      	adds	r3, r7, #4
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 8158 	beq.w	8006c20 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006970:	2300      	movs	r3, #0
 8006972:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006976:	4b5a      	ldr	r3, [pc, #360]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d112      	bne.n	80069a8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006982:	4b57      	ldr	r3, [pc, #348]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	4a56      	ldr	r2, [pc, #344]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800698c:	61d3      	str	r3, [r2, #28]
 800698e:	4b54      	ldr	r3, [pc, #336]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006996:	f107 0308 	add.w	r3, r7, #8
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	f107 0308 	add.w	r3, r7, #8
 80069a0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a8:	4b4f      	ldr	r3, [pc, #316]	; (8006ae8 <HAL_RCC_OscConfig+0x938>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d11a      	bne.n	80069ea <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069b4:	4b4c      	ldr	r3, [pc, #304]	; (8006ae8 <HAL_RCC_OscConfig+0x938>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a4b      	ldr	r2, [pc, #300]	; (8006ae8 <HAL_RCC_OscConfig+0x938>)
 80069ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069be:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069c0:	f7ff f8f2 	bl	8005ba8 <HAL_GetTick>
 80069c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c8:	e009      	b.n	80069de <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069ca:	f7ff f8ed 	bl	8005ba8 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b64      	cmp	r3, #100	; 0x64
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e2e9      	b.n	8006fb2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069de:	4b42      	ldr	r3, [pc, #264]	; (8006ae8 <HAL_RCC_OscConfig+0x938>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0ef      	beq.n	80069ca <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069ea:	1d3b      	adds	r3, r7, #4
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d106      	bne.n	8006a02 <HAL_RCC_OscConfig+0x852>
 80069f4:	4b3a      	ldr	r3, [pc, #232]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	4a39      	ldr	r2, [pc, #228]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	6213      	str	r3, [r2, #32]
 8006a00:	e02f      	b.n	8006a62 <HAL_RCC_OscConfig+0x8b2>
 8006a02:	1d3b      	adds	r3, r7, #4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10c      	bne.n	8006a26 <HAL_RCC_OscConfig+0x876>
 8006a0c:	4b34      	ldr	r3, [pc, #208]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	4a33      	ldr	r2, [pc, #204]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006a12:	f023 0301 	bic.w	r3, r3, #1
 8006a16:	6213      	str	r3, [r2, #32]
 8006a18:	4b31      	ldr	r3, [pc, #196]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	4a30      	ldr	r2, [pc, #192]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006a1e:	f023 0304 	bic.w	r3, r3, #4
 8006a22:	6213      	str	r3, [r2, #32]
 8006a24:	e01d      	b.n	8006a62 <HAL_RCC_OscConfig+0x8b2>
 8006a26:	1d3b      	adds	r3, r7, #4
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	2b05      	cmp	r3, #5
 8006a2e:	d10c      	bne.n	8006a4a <HAL_RCC_OscConfig+0x89a>
 8006a30:	4b2b      	ldr	r3, [pc, #172]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	4a2a      	ldr	r2, [pc, #168]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006a36:	f043 0304 	orr.w	r3, r3, #4
 8006a3a:	6213      	str	r3, [r2, #32]
 8006a3c:	4b28      	ldr	r3, [pc, #160]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	4a27      	ldr	r2, [pc, #156]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006a42:	f043 0301 	orr.w	r3, r3, #1
 8006a46:	6213      	str	r3, [r2, #32]
 8006a48:	e00b      	b.n	8006a62 <HAL_RCC_OscConfig+0x8b2>
 8006a4a:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	4a24      	ldr	r2, [pc, #144]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006a50:	f023 0301 	bic.w	r3, r3, #1
 8006a54:	6213      	str	r3, [r2, #32]
 8006a56:	4b22      	ldr	r3, [pc, #136]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	4a21      	ldr	r2, [pc, #132]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006a5c:	f023 0304 	bic.w	r3, r3, #4
 8006a60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a62:	1d3b      	adds	r3, r7, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d06b      	beq.n	8006b44 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a6c:	f7ff f89c 	bl	8005ba8 <HAL_GetTick>
 8006a70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a74:	e00b      	b.n	8006a8e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a76:	f7ff f897 	bl	8005ba8 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e291      	b.n	8006fb2 <HAL_RCC_OscConfig+0xe02>
 8006a8e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006a92:	2202      	movs	r2, #2
 8006a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a96:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	fa93 f2a3 	rbit	r2, r3
 8006aa0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006aaa:	2202      	movs	r2, #2
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	fa93 f2a3 	rbit	r2, r3
 8006ab8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006abc:	601a      	str	r2, [r3, #0]
  return result;
 8006abe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006ac2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ac4:	fab3 f383 	clz	r3, r3
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	095b      	lsrs	r3, r3, #5
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	f043 0302 	orr.w	r3, r3, #2
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d109      	bne.n	8006aec <HAL_RCC_OscConfig+0x93c>
 8006ad8:	4b01      	ldr	r3, [pc, #4]	; (8006ae0 <HAL_RCC_OscConfig+0x930>)
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	e014      	b.n	8006b08 <HAL_RCC_OscConfig+0x958>
 8006ade:	bf00      	nop
 8006ae0:	40021000 	.word	0x40021000
 8006ae4:	10908120 	.word	0x10908120
 8006ae8:	40007000 	.word	0x40007000
 8006aec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006af0:	2202      	movs	r2, #2
 8006af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	fa93 f2a3 	rbit	r2, r3
 8006afe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	4bbb      	ldr	r3, [pc, #748]	; (8006df4 <HAL_RCC_OscConfig+0xc44>)
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006b0c:	2102      	movs	r1, #2
 8006b0e:	6011      	str	r1, [r2, #0]
 8006b10:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	fa92 f1a2 	rbit	r1, r2
 8006b1a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006b1e:	6011      	str	r1, [r2, #0]
  return result;
 8006b20:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006b24:	6812      	ldr	r2, [r2, #0]
 8006b26:	fab2 f282 	clz	r2, r2
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	f002 021f 	and.w	r2, r2, #31
 8006b36:	2101      	movs	r1, #1
 8006b38:	fa01 f202 	lsl.w	r2, r1, r2
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d099      	beq.n	8006a76 <HAL_RCC_OscConfig+0x8c6>
 8006b42:	e063      	b.n	8006c0c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b44:	f7ff f830 	bl	8005ba8 <HAL_GetTick>
 8006b48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b4c:	e00b      	b.n	8006b66 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b4e:	f7ff f82b 	bl	8005ba8 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e225      	b.n	8006fb2 <HAL_RCC_OscConfig+0xe02>
 8006b66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b6e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	fa93 f2a3 	rbit	r2, r3
 8006b78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006b82:	2202      	movs	r2, #2
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	fa93 f2a3 	rbit	r2, r3
 8006b90:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006b94:	601a      	str	r2, [r3, #0]
  return result;
 8006b96:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006b9a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b9c:	fab3 f383 	clz	r3, r3
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	f043 0302 	orr.w	r3, r3, #2
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d102      	bne.n	8006bb6 <HAL_RCC_OscConfig+0xa06>
 8006bb0:	4b90      	ldr	r3, [pc, #576]	; (8006df4 <HAL_RCC_OscConfig+0xc44>)
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	e00d      	b.n	8006bd2 <HAL_RCC_OscConfig+0xa22>
 8006bb6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006bba:	2202      	movs	r2, #2
 8006bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bbe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	fa93 f2a3 	rbit	r2, r3
 8006bc8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	4b89      	ldr	r3, [pc, #548]	; (8006df4 <HAL_RCC_OscConfig+0xc44>)
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006bd6:	2102      	movs	r1, #2
 8006bd8:	6011      	str	r1, [r2, #0]
 8006bda:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006bde:	6812      	ldr	r2, [r2, #0]
 8006be0:	fa92 f1a2 	rbit	r1, r2
 8006be4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006be8:	6011      	str	r1, [r2, #0]
  return result;
 8006bea:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006bee:	6812      	ldr	r2, [r2, #0]
 8006bf0:	fab2 f282 	clz	r2, r2
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	f002 021f 	and.w	r2, r2, #31
 8006c00:	2101      	movs	r1, #1
 8006c02:	fa01 f202 	lsl.w	r2, r1, r2
 8006c06:	4013      	ands	r3, r2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1a0      	bne.n	8006b4e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006c0c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d105      	bne.n	8006c20 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c14:	4b77      	ldr	r3, [pc, #476]	; (8006df4 <HAL_RCC_OscConfig+0xc44>)
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	4a76      	ldr	r2, [pc, #472]	; (8006df4 <HAL_RCC_OscConfig+0xc44>)
 8006c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c1e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c20:	1d3b      	adds	r3, r7, #4
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 81c2 	beq.w	8006fb0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c2c:	4b71      	ldr	r3, [pc, #452]	; (8006df4 <HAL_RCC_OscConfig+0xc44>)
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f003 030c 	and.w	r3, r3, #12
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	f000 819c 	beq.w	8006f72 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c3a:	1d3b      	adds	r3, r7, #4
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	f040 8114 	bne.w	8006e6e <HAL_RCC_OscConfig+0xcbe>
 8006c46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006c4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	fa93 f2a3 	rbit	r2, r3
 8006c5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006c5e:	601a      	str	r2, [r3, #0]
  return result;
 8006c60:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006c64:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c66:	fab3 f383 	clz	r3, r3
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	461a      	mov	r2, r3
 8006c78:	2300      	movs	r3, #0
 8006c7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c7c:	f7fe ff94 	bl	8005ba8 <HAL_GetTick>
 8006c80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c84:	e009      	b.n	8006c9a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c86:	f7fe ff8f 	bl	8005ba8 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e18b      	b.n	8006fb2 <HAL_RCC_OscConfig+0xe02>
 8006c9a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	fa93 f2a3 	rbit	r2, r3
 8006cae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006cb2:	601a      	str	r2, [r3, #0]
  return result;
 8006cb4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006cb8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cba:	fab3 f383 	clz	r3, r3
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	095b      	lsrs	r3, r3, #5
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	f043 0301 	orr.w	r3, r3, #1
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d102      	bne.n	8006cd4 <HAL_RCC_OscConfig+0xb24>
 8006cce:	4b49      	ldr	r3, [pc, #292]	; (8006df4 <HAL_RCC_OscConfig+0xc44>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	e01b      	b.n	8006d0c <HAL_RCC_OscConfig+0xb5c>
 8006cd4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006cd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cde:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	fa93 f2a3 	rbit	r2, r3
 8006ce8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006cf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	fa93 f2a3 	rbit	r2, r3
 8006d02:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	4b3a      	ldr	r3, [pc, #232]	; (8006df4 <HAL_RCC_OscConfig+0xc44>)
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006d14:	6011      	str	r1, [r2, #0]
 8006d16:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d1a:	6812      	ldr	r2, [r2, #0]
 8006d1c:	fa92 f1a2 	rbit	r1, r2
 8006d20:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006d24:	6011      	str	r1, [r2, #0]
  return result;
 8006d26:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006d2a:	6812      	ldr	r2, [r2, #0]
 8006d2c:	fab2 f282 	clz	r2, r2
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	f042 0220 	orr.w	r2, r2, #32
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	f002 021f 	and.w	r2, r2, #31
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8006d42:	4013      	ands	r3, r2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d19e      	bne.n	8006c86 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d48:	4b2a      	ldr	r3, [pc, #168]	; (8006df4 <HAL_RCC_OscConfig+0xc44>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006d50:	1d3b      	adds	r3, r7, #4
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	4925      	ldr	r1, [pc, #148]	; (8006df4 <HAL_RCC_OscConfig+0xc44>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	604b      	str	r3, [r1, #4]
 8006d64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006d68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	fa93 f2a3 	rbit	r2, r3
 8006d78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006d7c:	601a      	str	r2, [r3, #0]
  return result;
 8006d7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006d82:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d84:	fab3 f383 	clz	r3, r3
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	461a      	mov	r2, r3
 8006d96:	2301      	movs	r3, #1
 8006d98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d9a:	f7fe ff05 	bl	8005ba8 <HAL_GetTick>
 8006d9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006da2:	e009      	b.n	8006db8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006da4:	f7fe ff00 	bl	8005ba8 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d901      	bls.n	8006db8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e0fc      	b.n	8006fb2 <HAL_RCC_OscConfig+0xe02>
 8006db8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	fa93 f2a3 	rbit	r2, r3
 8006dcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006dd0:	601a      	str	r2, [r3, #0]
  return result;
 8006dd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006dd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dd8:	fab3 f383 	clz	r3, r3
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	f043 0301 	orr.w	r3, r3, #1
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d105      	bne.n	8006df8 <HAL_RCC_OscConfig+0xc48>
 8006dec:	4b01      	ldr	r3, [pc, #4]	; (8006df4 <HAL_RCC_OscConfig+0xc44>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	e01e      	b.n	8006e30 <HAL_RCC_OscConfig+0xc80>
 8006df2:	bf00      	nop
 8006df4:	40021000 	.word	0x40021000
 8006df8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	fa93 f2a3 	rbit	r2, r3
 8006e0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006e16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	fa93 f2a3 	rbit	r2, r3
 8006e26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	4b63      	ldr	r3, [pc, #396]	; (8006fbc <HAL_RCC_OscConfig+0xe0c>)
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006e34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006e38:	6011      	str	r1, [r2, #0]
 8006e3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006e3e:	6812      	ldr	r2, [r2, #0]
 8006e40:	fa92 f1a2 	rbit	r1, r2
 8006e44:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006e48:	6011      	str	r1, [r2, #0]
  return result;
 8006e4a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006e4e:	6812      	ldr	r2, [r2, #0]
 8006e50:	fab2 f282 	clz	r2, r2
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	f042 0220 	orr.w	r2, r2, #32
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	f002 021f 	and.w	r2, r2, #31
 8006e60:	2101      	movs	r1, #1
 8006e62:	fa01 f202 	lsl.w	r2, r1, r2
 8006e66:	4013      	ands	r3, r2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d09b      	beq.n	8006da4 <HAL_RCC_OscConfig+0xbf4>
 8006e6c:	e0a0      	b.n	8006fb0 <HAL_RCC_OscConfig+0xe00>
 8006e6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	fa93 f2a3 	rbit	r2, r3
 8006e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e86:	601a      	str	r2, [r3, #0]
  return result;
 8006e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e8e:	fab3 f383 	clz	r3, r3
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006e98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ea4:	f7fe fe80 	bl	8005ba8 <HAL_GetTick>
 8006ea8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006eac:	e009      	b.n	8006ec2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eae:	f7fe fe7b 	bl	8005ba8 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e077      	b.n	8006fb2 <HAL_RCC_OscConfig+0xe02>
 8006ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ec6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ecc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	fa93 f2a3 	rbit	r2, r3
 8006ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eda:	601a      	str	r2, [r3, #0]
  return result;
 8006edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ee0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ee2:	fab3 f383 	clz	r3, r3
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	095b      	lsrs	r3, r3, #5
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	f043 0301 	orr.w	r3, r3, #1
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d102      	bne.n	8006efc <HAL_RCC_OscConfig+0xd4c>
 8006ef6:	4b31      	ldr	r3, [pc, #196]	; (8006fbc <HAL_RCC_OscConfig+0xe0c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	e01b      	b.n	8006f34 <HAL_RCC_OscConfig+0xd84>
 8006efc:	f107 0320 	add.w	r3, r7, #32
 8006f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f06:	f107 0320 	add.w	r3, r7, #32
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	fa93 f2a3 	rbit	r2, r3
 8006f10:	f107 031c 	add.w	r3, r7, #28
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	f107 0318 	add.w	r3, r7, #24
 8006f1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	f107 0318 	add.w	r3, r7, #24
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	fa93 f2a3 	rbit	r2, r3
 8006f2a:	f107 0314 	add.w	r3, r7, #20
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	4b22      	ldr	r3, [pc, #136]	; (8006fbc <HAL_RCC_OscConfig+0xe0c>)
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	f107 0210 	add.w	r2, r7, #16
 8006f38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006f3c:	6011      	str	r1, [r2, #0]
 8006f3e:	f107 0210 	add.w	r2, r7, #16
 8006f42:	6812      	ldr	r2, [r2, #0]
 8006f44:	fa92 f1a2 	rbit	r1, r2
 8006f48:	f107 020c 	add.w	r2, r7, #12
 8006f4c:	6011      	str	r1, [r2, #0]
  return result;
 8006f4e:	f107 020c 	add.w	r2, r7, #12
 8006f52:	6812      	ldr	r2, [r2, #0]
 8006f54:	fab2 f282 	clz	r2, r2
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	f042 0220 	orr.w	r2, r2, #32
 8006f5e:	b2d2      	uxtb	r2, r2
 8006f60:	f002 021f 	and.w	r2, r2, #31
 8006f64:	2101      	movs	r1, #1
 8006f66:	fa01 f202 	lsl.w	r2, r1, r2
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d19e      	bne.n	8006eae <HAL_RCC_OscConfig+0xcfe>
 8006f70:	e01e      	b.n	8006fb0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f72:	1d3b      	adds	r3, r7, #4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e018      	b.n	8006fb2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006f80:	4b0e      	ldr	r3, [pc, #56]	; (8006fbc <HAL_RCC_OscConfig+0xe0c>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006f88:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006f8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006f90:	1d3b      	adds	r3, r7, #4
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d108      	bne.n	8006fac <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006f9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006fa2:	1d3b      	adds	r3, r7, #4
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d001      	beq.n	8006fb0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e000      	b.n	8006fb2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	40021000 	.word	0x40021000

08006fc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b09e      	sub	sp, #120	; 0x78
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e162      	b.n	800729e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fd8:	4b90      	ldr	r3, [pc, #576]	; (800721c <HAL_RCC_ClockConfig+0x25c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d910      	bls.n	8007008 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fe6:	4b8d      	ldr	r3, [pc, #564]	; (800721c <HAL_RCC_ClockConfig+0x25c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f023 0207 	bic.w	r2, r3, #7
 8006fee:	498b      	ldr	r1, [pc, #556]	; (800721c <HAL_RCC_ClockConfig+0x25c>)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ff6:	4b89      	ldr	r3, [pc, #548]	; (800721c <HAL_RCC_ClockConfig+0x25c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d001      	beq.n	8007008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e14a      	b.n	800729e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d008      	beq.n	8007026 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007014:	4b82      	ldr	r3, [pc, #520]	; (8007220 <HAL_RCC_ClockConfig+0x260>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	497f      	ldr	r1, [pc, #508]	; (8007220 <HAL_RCC_ClockConfig+0x260>)
 8007022:	4313      	orrs	r3, r2
 8007024:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 80dc 	beq.w	80071ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d13c      	bne.n	80070b6 <HAL_RCC_ClockConfig+0xf6>
 800703c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007040:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007044:	fa93 f3a3 	rbit	r3, r3
 8007048:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800704a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800704c:	fab3 f383 	clz	r3, r3
 8007050:	b2db      	uxtb	r3, r3
 8007052:	095b      	lsrs	r3, r3, #5
 8007054:	b2db      	uxtb	r3, r3
 8007056:	f043 0301 	orr.w	r3, r3, #1
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b01      	cmp	r3, #1
 800705e:	d102      	bne.n	8007066 <HAL_RCC_ClockConfig+0xa6>
 8007060:	4b6f      	ldr	r3, [pc, #444]	; (8007220 <HAL_RCC_ClockConfig+0x260>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	e00f      	b.n	8007086 <HAL_RCC_ClockConfig+0xc6>
 8007066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800706a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800706c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800706e:	fa93 f3a3 	rbit	r3, r3
 8007072:	667b      	str	r3, [r7, #100]	; 0x64
 8007074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007078:	663b      	str	r3, [r7, #96]	; 0x60
 800707a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800707c:	fa93 f3a3 	rbit	r3, r3
 8007080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007082:	4b67      	ldr	r3, [pc, #412]	; (8007220 <HAL_RCC_ClockConfig+0x260>)
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800708a:	65ba      	str	r2, [r7, #88]	; 0x58
 800708c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800708e:	fa92 f2a2 	rbit	r2, r2
 8007092:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007094:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007096:	fab2 f282 	clz	r2, r2
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	f042 0220 	orr.w	r2, r2, #32
 80070a0:	b2d2      	uxtb	r2, r2
 80070a2:	f002 021f 	and.w	r2, r2, #31
 80070a6:	2101      	movs	r1, #1
 80070a8:	fa01 f202 	lsl.w	r2, r1, r2
 80070ac:	4013      	ands	r3, r2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d17b      	bne.n	80071aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e0f3      	b.n	800729e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d13c      	bne.n	8007138 <HAL_RCC_ClockConfig+0x178>
 80070be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c6:	fa93 f3a3 	rbit	r3, r3
 80070ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80070cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ce:	fab3 f383 	clz	r3, r3
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	095b      	lsrs	r3, r3, #5
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	f043 0301 	orr.w	r3, r3, #1
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d102      	bne.n	80070e8 <HAL_RCC_ClockConfig+0x128>
 80070e2:	4b4f      	ldr	r3, [pc, #316]	; (8007220 <HAL_RCC_ClockConfig+0x260>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	e00f      	b.n	8007108 <HAL_RCC_ClockConfig+0x148>
 80070e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070f0:	fa93 f3a3 	rbit	r3, r3
 80070f4:	647b      	str	r3, [r7, #68]	; 0x44
 80070f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070fa:	643b      	str	r3, [r7, #64]	; 0x40
 80070fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070fe:	fa93 f3a3 	rbit	r3, r3
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007104:	4b46      	ldr	r3, [pc, #280]	; (8007220 <HAL_RCC_ClockConfig+0x260>)
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800710c:	63ba      	str	r2, [r7, #56]	; 0x38
 800710e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007110:	fa92 f2a2 	rbit	r2, r2
 8007114:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007118:	fab2 f282 	clz	r2, r2
 800711c:	b2d2      	uxtb	r2, r2
 800711e:	f042 0220 	orr.w	r2, r2, #32
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	f002 021f 	and.w	r2, r2, #31
 8007128:	2101      	movs	r1, #1
 800712a:	fa01 f202 	lsl.w	r2, r1, r2
 800712e:	4013      	ands	r3, r2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d13a      	bne.n	80071aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e0b2      	b.n	800729e <HAL_RCC_ClockConfig+0x2de>
 8007138:	2302      	movs	r3, #2
 800713a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	fa93 f3a3 	rbit	r3, r3
 8007142:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007146:	fab3 f383 	clz	r3, r3
 800714a:	b2db      	uxtb	r3, r3
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	b2db      	uxtb	r3, r3
 8007150:	f043 0301 	orr.w	r3, r3, #1
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b01      	cmp	r3, #1
 8007158:	d102      	bne.n	8007160 <HAL_RCC_ClockConfig+0x1a0>
 800715a:	4b31      	ldr	r3, [pc, #196]	; (8007220 <HAL_RCC_ClockConfig+0x260>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	e00d      	b.n	800717c <HAL_RCC_ClockConfig+0x1bc>
 8007160:	2302      	movs	r3, #2
 8007162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007166:	fa93 f3a3 	rbit	r3, r3
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
 800716c:	2302      	movs	r3, #2
 800716e:	623b      	str	r3, [r7, #32]
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	fa93 f3a3 	rbit	r3, r3
 8007176:	61fb      	str	r3, [r7, #28]
 8007178:	4b29      	ldr	r3, [pc, #164]	; (8007220 <HAL_RCC_ClockConfig+0x260>)
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	2202      	movs	r2, #2
 800717e:	61ba      	str	r2, [r7, #24]
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	fa92 f2a2 	rbit	r2, r2
 8007186:	617a      	str	r2, [r7, #20]
  return result;
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	fab2 f282 	clz	r2, r2
 800718e:	b2d2      	uxtb	r2, r2
 8007190:	f042 0220 	orr.w	r2, r2, #32
 8007194:	b2d2      	uxtb	r2, r2
 8007196:	f002 021f 	and.w	r2, r2, #31
 800719a:	2101      	movs	r1, #1
 800719c:	fa01 f202 	lsl.w	r2, r1, r2
 80071a0:	4013      	ands	r3, r2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e079      	b.n	800729e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071aa:	4b1d      	ldr	r3, [pc, #116]	; (8007220 <HAL_RCC_ClockConfig+0x260>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f023 0203 	bic.w	r2, r3, #3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	491a      	ldr	r1, [pc, #104]	; (8007220 <HAL_RCC_ClockConfig+0x260>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071bc:	f7fe fcf4 	bl	8005ba8 <HAL_GetTick>
 80071c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071c2:	e00a      	b.n	80071da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071c4:	f7fe fcf0 	bl	8005ba8 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e061      	b.n	800729e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071da:	4b11      	ldr	r3, [pc, #68]	; (8007220 <HAL_RCC_ClockConfig+0x260>)
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f003 020c 	and.w	r2, r3, #12
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d1eb      	bne.n	80071c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071ec:	4b0b      	ldr	r3, [pc, #44]	; (800721c <HAL_RCC_ClockConfig+0x25c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d214      	bcs.n	8007224 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fa:	4b08      	ldr	r3, [pc, #32]	; (800721c <HAL_RCC_ClockConfig+0x25c>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f023 0207 	bic.w	r2, r3, #7
 8007202:	4906      	ldr	r1, [pc, #24]	; (800721c <HAL_RCC_ClockConfig+0x25c>)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	4313      	orrs	r3, r2
 8007208:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800720a:	4b04      	ldr	r3, [pc, #16]	; (800721c <HAL_RCC_ClockConfig+0x25c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d005      	beq.n	8007224 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e040      	b.n	800729e <HAL_RCC_ClockConfig+0x2de>
 800721c:	40022000 	.word	0x40022000
 8007220:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0304 	and.w	r3, r3, #4
 800722c:	2b00      	cmp	r3, #0
 800722e:	d008      	beq.n	8007242 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007230:	4b1d      	ldr	r3, [pc, #116]	; (80072a8 <HAL_RCC_ClockConfig+0x2e8>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	491a      	ldr	r1, [pc, #104]	; (80072a8 <HAL_RCC_ClockConfig+0x2e8>)
 800723e:	4313      	orrs	r3, r2
 8007240:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0308 	and.w	r3, r3, #8
 800724a:	2b00      	cmp	r3, #0
 800724c:	d009      	beq.n	8007262 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800724e:	4b16      	ldr	r3, [pc, #88]	; (80072a8 <HAL_RCC_ClockConfig+0x2e8>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	4912      	ldr	r1, [pc, #72]	; (80072a8 <HAL_RCC_ClockConfig+0x2e8>)
 800725e:	4313      	orrs	r3, r2
 8007260:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007262:	f000 f829 	bl	80072b8 <HAL_RCC_GetSysClockFreq>
 8007266:	4601      	mov	r1, r0
 8007268:	4b0f      	ldr	r3, [pc, #60]	; (80072a8 <HAL_RCC_ClockConfig+0x2e8>)
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007270:	22f0      	movs	r2, #240	; 0xf0
 8007272:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	fa92 f2a2 	rbit	r2, r2
 800727a:	60fa      	str	r2, [r7, #12]
  return result;
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	fab2 f282 	clz	r2, r2
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	40d3      	lsrs	r3, r2
 8007286:	4a09      	ldr	r2, [pc, #36]	; (80072ac <HAL_RCC_ClockConfig+0x2ec>)
 8007288:	5cd3      	ldrb	r3, [r2, r3]
 800728a:	fa21 f303 	lsr.w	r3, r1, r3
 800728e:	4a08      	ldr	r2, [pc, #32]	; (80072b0 <HAL_RCC_ClockConfig+0x2f0>)
 8007290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007292:	4b08      	ldr	r3, [pc, #32]	; (80072b4 <HAL_RCC_ClockConfig+0x2f4>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4618      	mov	r0, r3
 8007298:	f7fe fc42 	bl	8005b20 <HAL_InitTick>
  
  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3778      	adds	r7, #120	; 0x78
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	40021000 	.word	0x40021000
 80072ac:	08011254 	.word	0x08011254
 80072b0:	20000000 	.word	0x20000000
 80072b4:	20000020 	.word	0x20000020

080072b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b08b      	sub	sp, #44	; 0x2c
 80072bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	61fb      	str	r3, [r7, #28]
 80072c2:	2300      	movs	r3, #0
 80072c4:	61bb      	str	r3, [r7, #24]
 80072c6:	2300      	movs	r3, #0
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
 80072ca:	2300      	movs	r3, #0
 80072cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80072d2:	4b29      	ldr	r3, [pc, #164]	; (8007378 <HAL_RCC_GetSysClockFreq+0xc0>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	f003 030c 	and.w	r3, r3, #12
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d002      	beq.n	80072e8 <HAL_RCC_GetSysClockFreq+0x30>
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d003      	beq.n	80072ee <HAL_RCC_GetSysClockFreq+0x36>
 80072e6:	e03c      	b.n	8007362 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80072e8:	4b24      	ldr	r3, [pc, #144]	; (800737c <HAL_RCC_GetSysClockFreq+0xc4>)
 80072ea:	623b      	str	r3, [r7, #32]
      break;
 80072ec:	e03c      	b.n	8007368 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80072f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80072f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	fa92 f2a2 	rbit	r2, r2
 8007300:	607a      	str	r2, [r7, #4]
  return result;
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	fab2 f282 	clz	r2, r2
 8007308:	b2d2      	uxtb	r2, r2
 800730a:	40d3      	lsrs	r3, r2
 800730c:	4a1c      	ldr	r2, [pc, #112]	; (8007380 <HAL_RCC_GetSysClockFreq+0xc8>)
 800730e:	5cd3      	ldrb	r3, [r2, r3]
 8007310:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007312:	4b19      	ldr	r3, [pc, #100]	; (8007378 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007316:	f003 030f 	and.w	r3, r3, #15
 800731a:	220f      	movs	r2, #15
 800731c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	fa92 f2a2 	rbit	r2, r2
 8007324:	60fa      	str	r2, [r7, #12]
  return result;
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	fab2 f282 	clz	r2, r2
 800732c:	b2d2      	uxtb	r2, r2
 800732e:	40d3      	lsrs	r3, r2
 8007330:	4a14      	ldr	r2, [pc, #80]	; (8007384 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007332:	5cd3      	ldrb	r3, [r2, r3]
 8007334:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d008      	beq.n	8007352 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007340:	4a0e      	ldr	r2, [pc, #56]	; (800737c <HAL_RCC_GetSysClockFreq+0xc4>)
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	fbb2 f2f3 	udiv	r2, r2, r3
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	fb02 f303 	mul.w	r3, r2, r3
 800734e:	627b      	str	r3, [r7, #36]	; 0x24
 8007350:	e004      	b.n	800735c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	4a0c      	ldr	r2, [pc, #48]	; (8007388 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007356:	fb02 f303 	mul.w	r3, r2, r3
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	623b      	str	r3, [r7, #32]
      break;
 8007360:	e002      	b.n	8007368 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007362:	4b06      	ldr	r3, [pc, #24]	; (800737c <HAL_RCC_GetSysClockFreq+0xc4>)
 8007364:	623b      	str	r3, [r7, #32]
      break;
 8007366:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007368:	6a3b      	ldr	r3, [r7, #32]
}
 800736a:	4618      	mov	r0, r3
 800736c:	372c      	adds	r7, #44	; 0x2c
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	40021000 	.word	0x40021000
 800737c:	007a1200 	.word	0x007a1200
 8007380:	08013d70 	.word	0x08013d70
 8007384:	08013d80 	.word	0x08013d80
 8007388:	003d0900 	.word	0x003d0900

0800738c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b092      	sub	sp, #72	; 0x48
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 80d7 	beq.w	8007558 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80073aa:	2300      	movs	r3, #0
 80073ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073b0:	4b4e      	ldr	r3, [pc, #312]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10e      	bne.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073bc:	4b4b      	ldr	r3, [pc, #300]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	4a4a      	ldr	r2, [pc, #296]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073c6:	61d3      	str	r3, [r2, #28]
 80073c8:	4b48      	ldr	r3, [pc, #288]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073d0:	60bb      	str	r3, [r7, #8]
 80073d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073d4:	2301      	movs	r3, #1
 80073d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073da:	4b45      	ldr	r3, [pc, #276]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d118      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073e6:	4b42      	ldr	r3, [pc, #264]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a41      	ldr	r2, [pc, #260]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073f2:	f7fe fbd9 	bl	8005ba8 <HAL_GetTick>
 80073f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073f8:	e008      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073fa:	f7fe fbd5 	bl	8005ba8 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b64      	cmp	r3, #100	; 0x64
 8007406:	d901      	bls.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e169      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800740c:	4b38      	ldr	r3, [pc, #224]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0f0      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007418:	4b34      	ldr	r3, [pc, #208]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007420:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 8084 	beq.w	8007532 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007432:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007434:	429a      	cmp	r2, r3
 8007436:	d07c      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007438:	4b2c      	ldr	r3, [pc, #176]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007446:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	fa93 f3a3 	rbit	r3, r3
 800744e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007452:	fab3 f383 	clz	r3, r3
 8007456:	b2db      	uxtb	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	4b26      	ldr	r3, [pc, #152]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800745c:	4413      	add	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	461a      	mov	r2, r3
 8007462:	2301      	movs	r3, #1
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800746a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800746c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746e:	fa93 f3a3 	rbit	r3, r3
 8007472:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007476:	fab3 f383 	clz	r3, r3
 800747a:	b2db      	uxtb	r3, r3
 800747c:	461a      	mov	r2, r3
 800747e:	4b1d      	ldr	r3, [pc, #116]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007480:	4413      	add	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	461a      	mov	r2, r3
 8007486:	2300      	movs	r3, #0
 8007488:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800748a:	4a18      	ldr	r2, [pc, #96]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800748c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800748e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d04b      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800749a:	f7fe fb85 	bl	8005ba8 <HAL_GetTick>
 800749e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074a0:	e00a      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a2:	f7fe fb81 	bl	8005ba8 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d901      	bls.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e113      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80074b8:	2302      	movs	r3, #2
 80074ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	fa93 f3a3 	rbit	r3, r3
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
 80074c4:	2302      	movs	r3, #2
 80074c6:	623b      	str	r3, [r7, #32]
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	fa93 f3a3 	rbit	r3, r3
 80074ce:	61fb      	str	r3, [r7, #28]
  return result;
 80074d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074d2:	fab3 f383 	clz	r3, r3
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	095b      	lsrs	r3, r3, #5
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	f043 0302 	orr.w	r3, r3, #2
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d108      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80074e6:	4b01      	ldr	r3, [pc, #4]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	e00d      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80074ec:	40021000 	.word	0x40021000
 80074f0:	40007000 	.word	0x40007000
 80074f4:	10908100 	.word	0x10908100
 80074f8:	2302      	movs	r3, #2
 80074fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	fa93 f3a3 	rbit	r3, r3
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	4b78      	ldr	r3, [pc, #480]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	2202      	movs	r2, #2
 800750a:	613a      	str	r2, [r7, #16]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	fa92 f2a2 	rbit	r2, r2
 8007512:	60fa      	str	r2, [r7, #12]
  return result;
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	fab2 f282 	clz	r2, r2
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007520:	b2d2      	uxtb	r2, r2
 8007522:	f002 021f 	and.w	r2, r2, #31
 8007526:	2101      	movs	r1, #1
 8007528:	fa01 f202 	lsl.w	r2, r1, r2
 800752c:	4013      	ands	r3, r2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d0b7      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007532:	4b6d      	ldr	r3, [pc, #436]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	496a      	ldr	r1, [pc, #424]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007540:	4313      	orrs	r3, r2
 8007542:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007544:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007548:	2b01      	cmp	r3, #1
 800754a:	d105      	bne.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800754c:	4b66      	ldr	r3, [pc, #408]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	4a65      	ldr	r2, [pc, #404]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007556:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	2b00      	cmp	r3, #0
 8007562:	d008      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007564:	4b60      	ldr	r3, [pc, #384]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007568:	f023 0203 	bic.w	r2, r3, #3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	495d      	ldr	r1, [pc, #372]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007572:	4313      	orrs	r3, r2
 8007574:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b00      	cmp	r3, #0
 8007580:	d008      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007582:	4b59      	ldr	r3, [pc, #356]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	4956      	ldr	r1, [pc, #344]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007590:	4313      	orrs	r3, r2
 8007592:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0304 	and.w	r3, r3, #4
 800759c:	2b00      	cmp	r3, #0
 800759e:	d008      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80075a0:	4b51      	ldr	r3, [pc, #324]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	494e      	ldr	r1, [pc, #312]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d008      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075be:	4b4a      	ldr	r3, [pc, #296]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c2:	f023 0210 	bic.w	r2, r3, #16
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	4947      	ldr	r1, [pc, #284]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d008      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80075dc:	4b42      	ldr	r3, [pc, #264]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e8:	493f      	ldr	r1, [pc, #252]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d008      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075fa:	4b3b      	ldr	r3, [pc, #236]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fe:	f023 0220 	bic.w	r2, r3, #32
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	4938      	ldr	r1, [pc, #224]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007608:	4313      	orrs	r3, r2
 800760a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0308 	and.w	r3, r3, #8
 8007614:	2b00      	cmp	r3, #0
 8007616:	d008      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007618:	4b33      	ldr	r3, [pc, #204]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800761a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	4930      	ldr	r1, [pc, #192]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007626:	4313      	orrs	r3, r2
 8007628:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0310 	and.w	r3, r3, #16
 8007632:	2b00      	cmp	r3, #0
 8007634:	d008      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007636:	4b2c      	ldr	r3, [pc, #176]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	4929      	ldr	r1, [pc, #164]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007644:	4313      	orrs	r3, r2
 8007646:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007650:	2b00      	cmp	r3, #0
 8007652:	d008      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007654:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	4921      	ldr	r1, [pc, #132]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007662:	4313      	orrs	r3, r2
 8007664:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766e:	2b00      	cmp	r3, #0
 8007670:	d008      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007672:	4b1d      	ldr	r3, [pc, #116]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007676:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	491a      	ldr	r1, [pc, #104]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007680:	4313      	orrs	r3, r2
 8007682:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768c:	2b00      	cmp	r3, #0
 800768e:	d008      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007690:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769c:	4912      	ldr	r1, [pc, #72]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d008      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80076ae:	4b0e      	ldr	r3, [pc, #56]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	490b      	ldr	r1, [pc, #44]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d008      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d8:	4903      	ldr	r1, [pc, #12]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3748      	adds	r7, #72	; 0x48
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	40021000 	.word	0x40021000

080076ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e084      	b.n	8007808 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d106      	bne.n	800771e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7fa fc3b 	bl	8001f94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2202      	movs	r2, #2
 8007722:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007734:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800773e:	d902      	bls.n	8007746 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007740:	2300      	movs	r3, #0
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	e002      	b.n	800774c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800774a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007754:	d007      	beq.n	8007766 <HAL_SPI_Init+0x7a>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800775e:	d002      	beq.n	8007766 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10b      	bne.n	8007786 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007776:	d903      	bls.n	8007780 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	631a      	str	r2, [r3, #48]	; 0x30
 800777e:	e002      	b.n	8007786 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	431a      	orrs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	431a      	orrs	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	431a      	orrs	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	ea42 0103 	orr.w	r1, r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	0c1b      	lsrs	r3, r3, #16
 80077c6:	f003 0204 	and.w	r2, r3, #4
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	431a      	orrs	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	ea42 0103 	orr.w	r1, r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	69da      	ldr	r2, [r3, #28]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b088      	sub	sp, #32
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	4613      	mov	r3, r2
 800781e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800782a:	2b01      	cmp	r3, #1
 800782c:	d101      	bne.n	8007832 <HAL_SPI_Transmit+0x22>
 800782e:	2302      	movs	r3, #2
 8007830:	e150      	b.n	8007ad4 <HAL_SPI_Transmit+0x2c4>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800783a:	f7fe f9b5 	bl	8005ba8 <HAL_GetTick>
 800783e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007840:	88fb      	ldrh	r3, [r7, #6]
 8007842:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b01      	cmp	r3, #1
 800784e:	d002      	beq.n	8007856 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007850:	2302      	movs	r3, #2
 8007852:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007854:	e135      	b.n	8007ac2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <HAL_SPI_Transmit+0x52>
 800785c:	88fb      	ldrh	r3, [r7, #6]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d102      	bne.n	8007868 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007866:	e12c      	b.n	8007ac2 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2203      	movs	r2, #3
 800786c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	88fa      	ldrh	r2, [r7, #6]
 8007880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	88fa      	ldrh	r2, [r7, #6]
 8007886:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b2:	d107      	bne.n	80078c4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d007      	beq.n	80078e2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078ea:	d94b      	bls.n	8007984 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <HAL_SPI_Transmit+0xea>
 80078f4:	8afb      	ldrh	r3, [r7, #22]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d13e      	bne.n	8007978 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	881a      	ldrh	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790a:	1c9a      	adds	r2, r3, #2
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007914:	b29b      	uxth	r3, r3
 8007916:	3b01      	subs	r3, #1
 8007918:	b29a      	uxth	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800791e:	e02b      	b.n	8007978 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b02      	cmp	r3, #2
 800792c:	d112      	bne.n	8007954 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	881a      	ldrh	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793e:	1c9a      	adds	r2, r3, #2
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007952:	e011      	b.n	8007978 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007954:	f7fe f928 	bl	8005ba8 <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d803      	bhi.n	800796c <HAL_SPI_Transmit+0x15c>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796a:	d102      	bne.n	8007972 <HAL_SPI_Transmit+0x162>
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d102      	bne.n	8007978 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007976:	e0a4      	b.n	8007ac2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800797c:	b29b      	uxth	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1ce      	bne.n	8007920 <HAL_SPI_Transmit+0x110>
 8007982:	e07c      	b.n	8007a7e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <HAL_SPI_Transmit+0x182>
 800798c:	8afb      	ldrh	r3, [r7, #22]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d170      	bne.n	8007a74 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007996:	b29b      	uxth	r3, r3
 8007998:	2b01      	cmp	r3, #1
 800799a:	d912      	bls.n	80079c2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a0:	881a      	ldrh	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ac:	1c9a      	adds	r2, r3, #2
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	3b02      	subs	r3, #2
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079c0:	e058      	b.n	8007a74 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	330c      	adds	r3, #12
 80079cc:	7812      	ldrb	r2, [r2, #0]
 80079ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079de:	b29b      	uxth	r3, r3
 80079e0:	3b01      	subs	r3, #1
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80079e8:	e044      	b.n	8007a74 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d12b      	bne.n	8007a50 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d912      	bls.n	8007a28 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a06:	881a      	ldrh	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	1c9a      	adds	r2, r3, #2
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3b02      	subs	r3, #2
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a26:	e025      	b.n	8007a74 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	330c      	adds	r3, #12
 8007a32:	7812      	ldrb	r2, [r2, #0]
 8007a34:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a4e:	e011      	b.n	8007a74 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a50:	f7fe f8aa 	bl	8005ba8 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d803      	bhi.n	8007a68 <HAL_SPI_Transmit+0x258>
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d102      	bne.n	8007a6e <HAL_SPI_Transmit+0x25e>
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d102      	bne.n	8007a74 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a72:	e026      	b.n	8007ac2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1b5      	bne.n	80079ea <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 fc94 	bl	80083b0 <SPI_EndRxTxTransaction>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d002      	beq.n	8007a94 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2220      	movs	r2, #32
 8007a92:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10a      	bne.n	8007ab2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	613b      	str	r3, [r7, #16]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	613b      	str	r3, [r7, #16]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	613b      	str	r3, [r7, #16]
 8007ab0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	77fb      	strb	r3, [r7, #31]
 8007abe:	e000      	b.n	8007ac2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8007ac0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3720      	adds	r7, #32
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007af8:	d112      	bne.n	8007b20 <HAL_SPI_Receive+0x44>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10e      	bne.n	8007b20 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2204      	movs	r2, #4
 8007b06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b0a:	88fa      	ldrh	r2, [r7, #6]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	4613      	mov	r3, r2
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	68b9      	ldr	r1, [r7, #8]
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 f908 	bl	8007d2c <HAL_SPI_TransmitReceive>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	e101      	b.n	8007d24 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d101      	bne.n	8007b2e <HAL_SPI_Receive+0x52>
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	e0fa      	b.n	8007d24 <HAL_SPI_Receive+0x248>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b36:	f7fe f837 	bl	8005ba8 <HAL_GetTick>
 8007b3a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d002      	beq.n	8007b4e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007b48:	2302      	movs	r3, #2
 8007b4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b4c:	e0e1      	b.n	8007d12 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d002      	beq.n	8007b5a <HAL_SPI_Receive+0x7e>
 8007b54:	88fb      	ldrh	r3, [r7, #6]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d102      	bne.n	8007b60 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b5e:	e0d8      	b.n	8007d12 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2204      	movs	r2, #4
 8007b64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	88fa      	ldrh	r2, [r7, #6]
 8007b78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	88fa      	ldrh	r2, [r7, #6]
 8007b80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007baa:	d908      	bls.n	8007bbe <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bba:	605a      	str	r2, [r3, #4]
 8007bbc:	e007      	b.n	8007bce <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	685a      	ldr	r2, [r3, #4]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007bcc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bd6:	d107      	bne.n	8007be8 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007be6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf2:	2b40      	cmp	r3, #64	; 0x40
 8007bf4:	d007      	beq.n	8007c06 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c04:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c0e:	d867      	bhi.n	8007ce0 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007c10:	e030      	b.n	8007c74 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d117      	bne.n	8007c50 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f103 020c 	add.w	r2, r3, #12
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2c:	7812      	ldrb	r2, [r2, #0]
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	3b01      	subs	r3, #1
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007c4e:	e011      	b.n	8007c74 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c50:	f7fd ffaa 	bl	8005ba8 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d803      	bhi.n	8007c68 <HAL_SPI_Receive+0x18c>
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c66:	d102      	bne.n	8007c6e <HAL_SPI_Receive+0x192>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d102      	bne.n	8007c74 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c72:	e04e      	b.n	8007d12 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1c8      	bne.n	8007c12 <HAL_SPI_Receive+0x136>
 8007c80:	e034      	b.n	8007cec <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d115      	bne.n	8007cbc <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9a:	b292      	uxth	r2, r2
 8007c9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	1c9a      	adds	r2, r3, #2
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007cba:	e011      	b.n	8007ce0 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cbc:	f7fd ff74 	bl	8005ba8 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d803      	bhi.n	8007cd4 <HAL_SPI_Receive+0x1f8>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd2:	d102      	bne.n	8007cda <HAL_SPI_Receive+0x1fe>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d102      	bne.n	8007ce0 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007cde:	e018      	b.n	8007d12 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1ca      	bne.n	8007c82 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 fb05 	bl	8008300 <SPI_EndRxTransaction>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	75fb      	strb	r3, [r7, #23]
 8007d0e:	e000      	b.n	8007d12 <HAL_SPI_Receive+0x236>
  }

error :
 8007d10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08a      	sub	sp, #40	; 0x28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d101      	bne.n	8007d52 <HAL_SPI_TransmitReceive+0x26>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	e1fb      	b.n	800814a <HAL_SPI_TransmitReceive+0x41e>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d5a:	f7fd ff25 	bl	8005ba8 <HAL_GetTick>
 8007d5e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d66:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007d6e:	887b      	ldrh	r3, [r7, #2]
 8007d70:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007d72:	887b      	ldrh	r3, [r7, #2]
 8007d74:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d76:	7efb      	ldrb	r3, [r7, #27]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d00e      	beq.n	8007d9a <HAL_SPI_TransmitReceive+0x6e>
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d82:	d106      	bne.n	8007d92 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d102      	bne.n	8007d92 <HAL_SPI_TransmitReceive+0x66>
 8007d8c:	7efb      	ldrb	r3, [r7, #27]
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d003      	beq.n	8007d9a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007d92:	2302      	movs	r3, #2
 8007d94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007d98:	e1cd      	b.n	8008136 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d005      	beq.n	8007dac <HAL_SPI_TransmitReceive+0x80>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <HAL_SPI_TransmitReceive+0x80>
 8007da6:	887b      	ldrh	r3, [r7, #2]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d103      	bne.n	8007db4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007db2:	e1c0      	b.n	8008136 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d003      	beq.n	8007dc8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2205      	movs	r2, #5
 8007dc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	887a      	ldrh	r2, [r7, #2]
 8007dd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	887a      	ldrh	r2, [r7, #2]
 8007de0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	887a      	ldrh	r2, [r7, #2]
 8007dee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	887a      	ldrh	r2, [r7, #2]
 8007df4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e0a:	d802      	bhi.n	8007e12 <HAL_SPI_TransmitReceive+0xe6>
 8007e0c:	8a3b      	ldrh	r3, [r7, #16]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d908      	bls.n	8007e24 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e20:	605a      	str	r2, [r3, #4]
 8007e22:	e007      	b.n	8007e34 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e32:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3e:	2b40      	cmp	r3, #64	; 0x40
 8007e40:	d007      	beq.n	8007e52 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e5a:	d97c      	bls.n	8007f56 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <HAL_SPI_TransmitReceive+0x13e>
 8007e64:	8a7b      	ldrh	r3, [r7, #18]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d169      	bne.n	8007f3e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6e:	881a      	ldrh	r2, [r3, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	1c9a      	adds	r2, r3, #2
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	3b01      	subs	r3, #1
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e8e:	e056      	b.n	8007f3e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d11b      	bne.n	8007ed6 <HAL_SPI_TransmitReceive+0x1aa>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d016      	beq.n	8007ed6 <HAL_SPI_TransmitReceive+0x1aa>
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d113      	bne.n	8007ed6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb2:	881a      	ldrh	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebe:	1c9a      	adds	r2, r3, #2
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d11c      	bne.n	8007f1e <HAL_SPI_TransmitReceive+0x1f2>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d016      	beq.n	8007f1e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	b292      	uxth	r2, r2
 8007efc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	1c9a      	adds	r2, r3, #2
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	3b01      	subs	r3, #1
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f1e:	f7fd fe43 	bl	8005ba8 <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d807      	bhi.n	8007f3e <HAL_SPI_TransmitReceive+0x212>
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f34:	d003      	beq.n	8007f3e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007f3c:	e0fb      	b.n	8008136 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1a3      	bne.n	8007e90 <HAL_SPI_TransmitReceive+0x164>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d19d      	bne.n	8007e90 <HAL_SPI_TransmitReceive+0x164>
 8007f54:	e0df      	b.n	8008116 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <HAL_SPI_TransmitReceive+0x23a>
 8007f5e:	8a7b      	ldrh	r3, [r7, #18]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	f040 80cb 	bne.w	80080fc <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d912      	bls.n	8007f96 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	881a      	ldrh	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f80:	1c9a      	adds	r2, r3, #2
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	3b02      	subs	r3, #2
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f94:	e0b2      	b.n	80080fc <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	330c      	adds	r3, #12
 8007fa0:	7812      	ldrb	r2, [r2, #0]
 8007fa2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa8:	1c5a      	adds	r2, r3, #1
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fbc:	e09e      	b.n	80080fc <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f003 0302 	and.w	r3, r3, #2
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d134      	bne.n	8008036 <HAL_SPI_TransmitReceive+0x30a>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d02f      	beq.n	8008036 <HAL_SPI_TransmitReceive+0x30a>
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d12c      	bne.n	8008036 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d912      	bls.n	800800c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fea:	881a      	ldrh	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff6:	1c9a      	adds	r2, r3, #2
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008000:	b29b      	uxth	r3, r3
 8008002:	3b02      	subs	r3, #2
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	87da      	strh	r2, [r3, #62]	; 0x3e
 800800a:	e012      	b.n	8008032 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	330c      	adds	r3, #12
 8008016:	7812      	ldrb	r2, [r2, #0]
 8008018:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008028:	b29b      	uxth	r3, r3
 800802a:	3b01      	subs	r3, #1
 800802c:	b29a      	uxth	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	2b01      	cmp	r3, #1
 8008042:	d148      	bne.n	80080d6 <HAL_SPI_TransmitReceive+0x3aa>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800804a:	b29b      	uxth	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d042      	beq.n	80080d6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008056:	b29b      	uxth	r3, r3
 8008058:	2b01      	cmp	r3, #1
 800805a:	d923      	bls.n	80080a4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	b292      	uxth	r2, r2
 8008068:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	1c9a      	adds	r2, r3, #2
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800807a:	b29b      	uxth	r3, r3
 800807c:	3b02      	subs	r3, #2
 800807e:	b29a      	uxth	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800808c:	b29b      	uxth	r3, r3
 800808e:	2b01      	cmp	r3, #1
 8008090:	d81f      	bhi.n	80080d2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080a0:	605a      	str	r2, [r3, #4]
 80080a2:	e016      	b.n	80080d2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f103 020c 	add.w	r2, r3, #12
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b0:	7812      	ldrb	r2, [r2, #0]
 80080b2:	b2d2      	uxtb	r2, r2
 80080b4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080d2:	2301      	movs	r3, #1
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80080d6:	f7fd fd67 	bl	8005ba8 <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d803      	bhi.n	80080ee <HAL_SPI_TransmitReceive+0x3c2>
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ec:	d102      	bne.n	80080f4 <HAL_SPI_TransmitReceive+0x3c8>
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d103      	bne.n	80080fc <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80080fa:	e01c      	b.n	8008136 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008100:	b29b      	uxth	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	f47f af5b 	bne.w	8007fbe <HAL_SPI_TransmitReceive+0x292>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800810e:	b29b      	uxth	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	f47f af54 	bne.w	8007fbe <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008116:	69fa      	ldr	r2, [r7, #28]
 8008118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 f948 	bl	80083b0 <SPI_EndRxTxTransaction>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d006      	beq.n	8008134 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2220      	movs	r2, #32
 8008130:	661a      	str	r2, [r3, #96]	; 0x60
 8008132:	e000      	b.n	8008136 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008134:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008146:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800814a:	4618      	mov	r0, r3
 800814c:	3728      	adds	r7, #40	; 0x28
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	603b      	str	r3, [r7, #0]
 800815e:	4613      	mov	r3, r2
 8008160:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008162:	e04c      	b.n	80081fe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816a:	d048      	beq.n	80081fe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800816c:	f7fd fd1c 	bl	8005ba8 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	429a      	cmp	r2, r3
 800817a:	d902      	bls.n	8008182 <SPI_WaitFlagStateUntilTimeout+0x30>
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d13d      	bne.n	80081fe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800819a:	d111      	bne.n	80081c0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081a4:	d004      	beq.n	80081b0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ae:	d107      	bne.n	80081c0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c8:	d10f      	bne.n	80081ea <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e00f      	b.n	800821e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	4013      	ands	r3, r2
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	429a      	cmp	r2, r3
 800820c:	bf0c      	ite	eq
 800820e:	2301      	moveq	r3, #1
 8008210:	2300      	movne	r3, #0
 8008212:	b2db      	uxtb	r3, r3
 8008214:	461a      	mov	r2, r3
 8008216:	79fb      	ldrb	r3, [r7, #7]
 8008218:	429a      	cmp	r2, r3
 800821a:	d1a3      	bne.n	8008164 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b084      	sub	sp, #16
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	607a      	str	r2, [r7, #4]
 8008232:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8008234:	e057      	b.n	80082e6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800823c:	d106      	bne.n	800824c <SPI_WaitFifoStateUntilTimeout+0x26>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d103      	bne.n	800824c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	330c      	adds	r3, #12
 800824a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008252:	d048      	beq.n	80082e6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008254:	f7fd fca8 	bl	8005ba8 <HAL_GetTick>
 8008258:	4602      	mov	r2, r0
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	429a      	cmp	r2, r3
 8008262:	d902      	bls.n	800826a <SPI_WaitFifoStateUntilTimeout+0x44>
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d13d      	bne.n	80082e6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008278:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008282:	d111      	bne.n	80082a8 <SPI_WaitFifoStateUntilTimeout+0x82>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800828c:	d004      	beq.n	8008298 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008296:	d107      	bne.n	80082a8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082b0:	d10f      	bne.n	80082d2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e008      	b.n	80082f8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	4013      	ands	r3, r2
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d19f      	bne.n	8008236 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af02      	add	r7, sp, #8
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008314:	d111      	bne.n	800833a <SPI_EndRxTransaction+0x3a>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800831e:	d004      	beq.n	800832a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008328:	d107      	bne.n	800833a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008338:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2200      	movs	r2, #0
 8008342:	2180      	movs	r1, #128	; 0x80
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f7ff ff04 	bl	8008152 <SPI_WaitFlagStateUntilTimeout>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008354:	f043 0220 	orr.w	r2, r3, #32
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e023      	b.n	80083a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008368:	d11d      	bne.n	80083a6 <SPI_EndRxTransaction+0xa6>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008372:	d004      	beq.n	800837e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800837c:	d113      	bne.n	80083a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2200      	movs	r2, #0
 8008386:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f7ff ff4b 	bl	8008226 <SPI_WaitFifoStateUntilTimeout>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d007      	beq.n	80083a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800839a:	f043 0220 	orr.w	r2, r3, #32
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e000      	b.n	80083a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f7ff ff2c 	bl	8008226 <SPI_WaitFifoStateUntilTimeout>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d007      	beq.n	80083e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083d8:	f043 0220 	orr.w	r2, r3, #32
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e027      	b.n	8008434 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2200      	movs	r2, #0
 80083ec:	2180      	movs	r1, #128	; 0x80
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7ff feaf 	bl	8008152 <SPI_WaitFlagStateUntilTimeout>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d007      	beq.n	800840a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083fe:	f043 0220 	orr.w	r2, r3, #32
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e014      	b.n	8008434 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2200      	movs	r2, #0
 8008412:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f7ff ff05 	bl	8008226 <SPI_WaitFifoStateUntilTimeout>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d007      	beq.n	8008432 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008426:	f043 0220 	orr.w	r2, r3, #32
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e000      	b.n	8008434 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e01d      	b.n	800848a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d106      	bne.n	8008468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7fa f86e 	bl	8002544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	3304      	adds	r3, #4
 8008478:	4619      	mov	r1, r3
 800847a:	4610      	mov	r0, r2
 800847c:	f000 fc4a 	bl	8008d14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68da      	ldr	r2, [r3, #12]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0201 	orr.w	r2, r2, #1
 80084aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689a      	ldr	r2, [r3, #8]
 80084b2:	4b0c      	ldr	r3, [pc, #48]	; (80084e4 <HAL_TIM_Base_Start_IT+0x50>)
 80084b4:	4013      	ands	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b06      	cmp	r3, #6
 80084bc:	d00b      	beq.n	80084d6 <HAL_TIM_Base_Start_IT+0x42>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084c4:	d007      	beq.n	80084d6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f042 0201 	orr.w	r2, r2, #1
 80084d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	00010007 	.word	0x00010007

080084e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e01d      	b.n	8008536 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d106      	bne.n	8008514 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f815 	bl	800853e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2202      	movs	r2, #2
 8008518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3304      	adds	r3, #4
 8008524:	4619      	mov	r1, r3
 8008526:	4610      	mov	r0, r2
 8008528:	f000 fbf4 	bl	8008d14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008546:	bf00      	nop
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
	...

08008554 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2201      	movs	r2, #1
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	4618      	mov	r0, r3
 8008568:	f000 ffd4 	bl	8009514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1e      	ldr	r2, [pc, #120]	; (80085ec <HAL_TIM_PWM_Start+0x98>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d013      	beq.n	800859e <HAL_TIM_PWM_Start+0x4a>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1d      	ldr	r2, [pc, #116]	; (80085f0 <HAL_TIM_PWM_Start+0x9c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d00e      	beq.n	800859e <HAL_TIM_PWM_Start+0x4a>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a1b      	ldr	r2, [pc, #108]	; (80085f4 <HAL_TIM_PWM_Start+0xa0>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d009      	beq.n	800859e <HAL_TIM_PWM_Start+0x4a>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a1a      	ldr	r2, [pc, #104]	; (80085f8 <HAL_TIM_PWM_Start+0xa4>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d004      	beq.n	800859e <HAL_TIM_PWM_Start+0x4a>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a18      	ldr	r2, [pc, #96]	; (80085fc <HAL_TIM_PWM_Start+0xa8>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d101      	bne.n	80085a2 <HAL_TIM_PWM_Start+0x4e>
 800859e:	2301      	movs	r3, #1
 80085a0:	e000      	b.n	80085a4 <HAL_TIM_PWM_Start+0x50>
 80085a2:	2300      	movs	r3, #0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d007      	beq.n	80085b8 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689a      	ldr	r2, [r3, #8]
 80085be:	4b10      	ldr	r3, [pc, #64]	; (8008600 <HAL_TIM_PWM_Start+0xac>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b06      	cmp	r3, #6
 80085c8:	d00b      	beq.n	80085e2 <HAL_TIM_PWM_Start+0x8e>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085d0:	d007      	beq.n	80085e2 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f042 0201 	orr.w	r2, r2, #1
 80085e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	40012c00 	.word	0x40012c00
 80085f0:	40013400 	.word	0x40013400
 80085f4:	40014000 	.word	0x40014000
 80085f8:	40014400 	.word	0x40014400
 80085fc:	40014800 	.word	0x40014800
 8008600:	00010007 	.word	0x00010007

08008604 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2200      	movs	r2, #0
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	4618      	mov	r0, r3
 8008618:	f000 ff7c 	bl	8009514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a2a      	ldr	r2, [pc, #168]	; (80086cc <HAL_TIM_PWM_Stop+0xc8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d013      	beq.n	800864e <HAL_TIM_PWM_Stop+0x4a>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a29      	ldr	r2, [pc, #164]	; (80086d0 <HAL_TIM_PWM_Stop+0xcc>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d00e      	beq.n	800864e <HAL_TIM_PWM_Stop+0x4a>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a27      	ldr	r2, [pc, #156]	; (80086d4 <HAL_TIM_PWM_Stop+0xd0>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d009      	beq.n	800864e <HAL_TIM_PWM_Stop+0x4a>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a26      	ldr	r2, [pc, #152]	; (80086d8 <HAL_TIM_PWM_Stop+0xd4>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d004      	beq.n	800864e <HAL_TIM_PWM_Stop+0x4a>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a24      	ldr	r2, [pc, #144]	; (80086dc <HAL_TIM_PWM_Stop+0xd8>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d101      	bne.n	8008652 <HAL_TIM_PWM_Stop+0x4e>
 800864e:	2301      	movs	r3, #1
 8008650:	e000      	b.n	8008654 <HAL_TIM_PWM_Stop+0x50>
 8008652:	2300      	movs	r3, #0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d017      	beq.n	8008688 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6a1a      	ldr	r2, [r3, #32]
 800865e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008662:	4013      	ands	r3, r2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10f      	bne.n	8008688 <HAL_TIM_PWM_Stop+0x84>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6a1a      	ldr	r2, [r3, #32]
 800866e:	f240 4344 	movw	r3, #1092	; 0x444
 8008672:	4013      	ands	r3, r2
 8008674:	2b00      	cmp	r3, #0
 8008676:	d107      	bne.n	8008688 <HAL_TIM_PWM_Stop+0x84>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008686:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6a1a      	ldr	r2, [r3, #32]
 800868e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008692:	4013      	ands	r3, r2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10f      	bne.n	80086b8 <HAL_TIM_PWM_Stop+0xb4>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6a1a      	ldr	r2, [r3, #32]
 800869e:	f240 4344 	movw	r3, #1092	; 0x444
 80086a2:	4013      	ands	r3, r2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d107      	bne.n	80086b8 <HAL_TIM_PWM_Stop+0xb4>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f022 0201 	bic.w	r2, r2, #1
 80086b6:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	40012c00 	.word	0x40012c00
 80086d0:	40013400 	.word	0x40013400
 80086d4:	40014000 	.word	0x40014000
 80086d8:	40014400 	.word	0x40014400
 80086dc:	40014800 	.word	0x40014800

080086e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	f003 0302 	and.w	r3, r3, #2
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d122      	bne.n	800873c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b02      	cmp	r3, #2
 8008702:	d11b      	bne.n	800873c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f06f 0202 	mvn.w	r2, #2
 800870c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d003      	beq.n	800872a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fad7 	bl	8008cd6 <HAL_TIM_IC_CaptureCallback>
 8008728:	e005      	b.n	8008736 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fac9 	bl	8008cc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fada 	bl	8008cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	f003 0304 	and.w	r3, r3, #4
 8008746:	2b04      	cmp	r3, #4
 8008748:	d122      	bne.n	8008790 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	f003 0304 	and.w	r3, r3, #4
 8008754:	2b04      	cmp	r3, #4
 8008756:	d11b      	bne.n	8008790 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f06f 0204 	mvn.w	r2, #4
 8008760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2202      	movs	r2, #2
 8008766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 faad 	bl	8008cd6 <HAL_TIM_IC_CaptureCallback>
 800877c:	e005      	b.n	800878a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fa9f 	bl	8008cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fab0 	bl	8008cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	f003 0308 	and.w	r3, r3, #8
 800879a:	2b08      	cmp	r3, #8
 800879c:	d122      	bne.n	80087e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	f003 0308 	and.w	r3, r3, #8
 80087a8:	2b08      	cmp	r3, #8
 80087aa:	d11b      	bne.n	80087e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f06f 0208 	mvn.w	r2, #8
 80087b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2204      	movs	r2, #4
 80087ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	f003 0303 	and.w	r3, r3, #3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fa83 	bl	8008cd6 <HAL_TIM_IC_CaptureCallback>
 80087d0:	e005      	b.n	80087de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fa75 	bl	8008cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fa86 	bl	8008cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	f003 0310 	and.w	r3, r3, #16
 80087ee:	2b10      	cmp	r3, #16
 80087f0:	d122      	bne.n	8008838 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	f003 0310 	and.w	r3, r3, #16
 80087fc:	2b10      	cmp	r3, #16
 80087fe:	d11b      	bne.n	8008838 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f06f 0210 	mvn.w	r2, #16
 8008808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2208      	movs	r2, #8
 800880e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800881a:	2b00      	cmp	r3, #0
 800881c:	d003      	beq.n	8008826 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fa59 	bl	8008cd6 <HAL_TIM_IC_CaptureCallback>
 8008824:	e005      	b.n	8008832 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fa4b 	bl	8008cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fa5c 	bl	8008cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	2b01      	cmp	r3, #1
 8008844:	d10e      	bne.n	8008864 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b01      	cmp	r3, #1
 8008852:	d107      	bne.n	8008864 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f06f 0201 	mvn.w	r2, #1
 800885c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7f9 fae8 	bl	8001e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800886e:	2b80      	cmp	r3, #128	; 0x80
 8008870:	d10e      	bne.n	8008890 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800887c:	2b80      	cmp	r3, #128	; 0x80
 800887e:	d107      	bne.n	8008890 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fef2 	bl	8009674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800889a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800889e:	d10e      	bne.n	80088be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088aa:	2b80      	cmp	r3, #128	; 0x80
 80088ac:	d107      	bne.n	80088be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fee5 	bl	8009688 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c8:	2b40      	cmp	r3, #64	; 0x40
 80088ca:	d10e      	bne.n	80088ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d6:	2b40      	cmp	r3, #64	; 0x40
 80088d8:	d107      	bne.n	80088ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fa0a 	bl	8008cfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	f003 0320 	and.w	r3, r3, #32
 80088f4:	2b20      	cmp	r3, #32
 80088f6:	d10e      	bne.n	8008916 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	f003 0320 	and.w	r3, r3, #32
 8008902:	2b20      	cmp	r3, #32
 8008904:	d107      	bne.n	8008916 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f06f 0220 	mvn.w	r2, #32
 800890e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 fea5 	bl	8009660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008932:	2b01      	cmp	r3, #1
 8008934:	d101      	bne.n	800893a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008936:	2302      	movs	r3, #2
 8008938:	e105      	b.n	8008b46 <HAL_TIM_PWM_ConfigChannel+0x226>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2202      	movs	r2, #2
 8008946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b14      	cmp	r3, #20
 800894e:	f200 80f0 	bhi.w	8008b32 <HAL_TIM_PWM_ConfigChannel+0x212>
 8008952:	a201      	add	r2, pc, #4	; (adr r2, 8008958 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	080089ad 	.word	0x080089ad
 800895c:	08008b33 	.word	0x08008b33
 8008960:	08008b33 	.word	0x08008b33
 8008964:	08008b33 	.word	0x08008b33
 8008968:	080089ed 	.word	0x080089ed
 800896c:	08008b33 	.word	0x08008b33
 8008970:	08008b33 	.word	0x08008b33
 8008974:	08008b33 	.word	0x08008b33
 8008978:	08008a2f 	.word	0x08008a2f
 800897c:	08008b33 	.word	0x08008b33
 8008980:	08008b33 	.word	0x08008b33
 8008984:	08008b33 	.word	0x08008b33
 8008988:	08008a6f 	.word	0x08008a6f
 800898c:	08008b33 	.word	0x08008b33
 8008990:	08008b33 	.word	0x08008b33
 8008994:	08008b33 	.word	0x08008b33
 8008998:	08008ab1 	.word	0x08008ab1
 800899c:	08008b33 	.word	0x08008b33
 80089a0:	08008b33 	.word	0x08008b33
 80089a4:	08008b33 	.word	0x08008b33
 80089a8:	08008af1 	.word	0x08008af1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68b9      	ldr	r1, [r7, #8]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fa3e 	bl	8008e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	699a      	ldr	r2, [r3, #24]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f042 0208 	orr.w	r2, r2, #8
 80089c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	699a      	ldr	r2, [r3, #24]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 0204 	bic.w	r2, r2, #4
 80089d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6999      	ldr	r1, [r3, #24]
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	691a      	ldr	r2, [r3, #16]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	619a      	str	r2, [r3, #24]
      break;
 80089ea:	e0a3      	b.n	8008b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68b9      	ldr	r1, [r7, #8]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 faae 	bl	8008f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	699a      	ldr	r2, [r3, #24]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699a      	ldr	r2, [r3, #24]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6999      	ldr	r1, [r3, #24]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	021a      	lsls	r2, r3, #8
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	619a      	str	r2, [r3, #24]
      break;
 8008a2c:	e082      	b.n	8008b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68b9      	ldr	r1, [r7, #8]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 fb17 	bl	8009068 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69da      	ldr	r2, [r3, #28]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f042 0208 	orr.w	r2, r2, #8
 8008a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69da      	ldr	r2, [r3, #28]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f022 0204 	bic.w	r2, r2, #4
 8008a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69d9      	ldr	r1, [r3, #28]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	691a      	ldr	r2, [r3, #16]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	430a      	orrs	r2, r1
 8008a6a:	61da      	str	r2, [r3, #28]
      break;
 8008a6c:	e062      	b.n	8008b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68b9      	ldr	r1, [r7, #8]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 fb7f 	bl	8009178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	69da      	ldr	r2, [r3, #28]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69da      	ldr	r2, [r3, #28]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	69d9      	ldr	r1, [r3, #28]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	021a      	lsls	r2, r3, #8
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	61da      	str	r2, [r3, #28]
      break;
 8008aae:	e041      	b.n	8008b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68b9      	ldr	r1, [r7, #8]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 fbc8 	bl	800924c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f042 0208 	orr.w	r2, r2, #8
 8008aca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f022 0204 	bic.w	r2, r2, #4
 8008ada:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	691a      	ldr	r2, [r3, #16]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	430a      	orrs	r2, r1
 8008aec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008aee:	e021      	b.n	8008b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68b9      	ldr	r1, [r7, #8]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 fc0c 	bl	8009314 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	021a      	lsls	r2, r3, #8
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	430a      	orrs	r2, r1
 8008b2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b30:	e000      	b.n	8008b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8008b32:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop

08008b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d101      	bne.n	8008b68 <HAL_TIM_ConfigClockSource+0x18>
 8008b64:	2302      	movs	r3, #2
 8008b66:	e0a8      	b.n	8008cba <HAL_TIM_ConfigClockSource+0x16a>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b40      	cmp	r3, #64	; 0x40
 8008ba2:	d067      	beq.n	8008c74 <HAL_TIM_ConfigClockSource+0x124>
 8008ba4:	2b40      	cmp	r3, #64	; 0x40
 8008ba6:	d80b      	bhi.n	8008bc0 <HAL_TIM_ConfigClockSource+0x70>
 8008ba8:	2b10      	cmp	r3, #16
 8008baa:	d073      	beq.n	8008c94 <HAL_TIM_ConfigClockSource+0x144>
 8008bac:	2b10      	cmp	r3, #16
 8008bae:	d802      	bhi.n	8008bb6 <HAL_TIM_ConfigClockSource+0x66>
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d06f      	beq.n	8008c94 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008bb4:	e078      	b.n	8008ca8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008bb6:	2b20      	cmp	r3, #32
 8008bb8:	d06c      	beq.n	8008c94 <HAL_TIM_ConfigClockSource+0x144>
 8008bba:	2b30      	cmp	r3, #48	; 0x30
 8008bbc:	d06a      	beq.n	8008c94 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8008bbe:	e073      	b.n	8008ca8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008bc0:	2b70      	cmp	r3, #112	; 0x70
 8008bc2:	d00d      	beq.n	8008be0 <HAL_TIM_ConfigClockSource+0x90>
 8008bc4:	2b70      	cmp	r3, #112	; 0x70
 8008bc6:	d804      	bhi.n	8008bd2 <HAL_TIM_ConfigClockSource+0x82>
 8008bc8:	2b50      	cmp	r3, #80	; 0x50
 8008bca:	d033      	beq.n	8008c34 <HAL_TIM_ConfigClockSource+0xe4>
 8008bcc:	2b60      	cmp	r3, #96	; 0x60
 8008bce:	d041      	beq.n	8008c54 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8008bd0:	e06a      	b.n	8008ca8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd6:	d066      	beq.n	8008ca6 <HAL_TIM_ConfigClockSource+0x156>
 8008bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bdc:	d017      	beq.n	8008c0e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8008bde:	e063      	b.n	8008ca8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6818      	ldr	r0, [r3, #0]
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	6899      	ldr	r1, [r3, #8]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f000 fc70 	bl	80094d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	609a      	str	r2, [r3, #8]
      break;
 8008c0c:	e04c      	b.n	8008ca8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6818      	ldr	r0, [r3, #0]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	6899      	ldr	r1, [r3, #8]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	f000 fc59 	bl	80094d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c30:	609a      	str	r2, [r3, #8]
      break;
 8008c32:	e039      	b.n	8008ca8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6818      	ldr	r0, [r3, #0]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	6859      	ldr	r1, [r3, #4]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	461a      	mov	r2, r3
 8008c42:	f000 fbcd 	bl	80093e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2150      	movs	r1, #80	; 0x50
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fc26 	bl	800949e <TIM_ITRx_SetConfig>
      break;
 8008c52:	e029      	b.n	8008ca8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6818      	ldr	r0, [r3, #0]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	6859      	ldr	r1, [r3, #4]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	461a      	mov	r2, r3
 8008c62:	f000 fbec 	bl	800943e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2160      	movs	r1, #96	; 0x60
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 fc16 	bl	800949e <TIM_ITRx_SetConfig>
      break;
 8008c72:	e019      	b.n	8008ca8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	6859      	ldr	r1, [r3, #4]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	461a      	mov	r2, r3
 8008c82:	f000 fbad 	bl	80093e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2140      	movs	r1, #64	; 0x40
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 fc06 	bl	800949e <TIM_ITRx_SetConfig>
      break;
 8008c92:	e009      	b.n	8008ca8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	f000 fbfd 	bl	800949e <TIM_ITRx_SetConfig>
      break;
 8008ca4:	e000      	b.n	8008ca8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8008ca6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b083      	sub	sp, #12
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cca:	bf00      	nop
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008cde:	bf00      	nop
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cf2:	bf00      	nop
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
	...

08008d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a3c      	ldr	r2, [pc, #240]	; (8008e18 <TIM_Base_SetConfig+0x104>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d00f      	beq.n	8008d4c <TIM_Base_SetConfig+0x38>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d32:	d00b      	beq.n	8008d4c <TIM_Base_SetConfig+0x38>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a39      	ldr	r2, [pc, #228]	; (8008e1c <TIM_Base_SetConfig+0x108>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d007      	beq.n	8008d4c <TIM_Base_SetConfig+0x38>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a38      	ldr	r2, [pc, #224]	; (8008e20 <TIM_Base_SetConfig+0x10c>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d003      	beq.n	8008d4c <TIM_Base_SetConfig+0x38>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a37      	ldr	r2, [pc, #220]	; (8008e24 <TIM_Base_SetConfig+0x110>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d108      	bne.n	8008d5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a2d      	ldr	r2, [pc, #180]	; (8008e18 <TIM_Base_SetConfig+0x104>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d01b      	beq.n	8008d9e <TIM_Base_SetConfig+0x8a>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d6c:	d017      	beq.n	8008d9e <TIM_Base_SetConfig+0x8a>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a2a      	ldr	r2, [pc, #168]	; (8008e1c <TIM_Base_SetConfig+0x108>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d013      	beq.n	8008d9e <TIM_Base_SetConfig+0x8a>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a29      	ldr	r2, [pc, #164]	; (8008e20 <TIM_Base_SetConfig+0x10c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d00f      	beq.n	8008d9e <TIM_Base_SetConfig+0x8a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a28      	ldr	r2, [pc, #160]	; (8008e24 <TIM_Base_SetConfig+0x110>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d00b      	beq.n	8008d9e <TIM_Base_SetConfig+0x8a>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a27      	ldr	r2, [pc, #156]	; (8008e28 <TIM_Base_SetConfig+0x114>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d007      	beq.n	8008d9e <TIM_Base_SetConfig+0x8a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a26      	ldr	r2, [pc, #152]	; (8008e2c <TIM_Base_SetConfig+0x118>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d003      	beq.n	8008d9e <TIM_Base_SetConfig+0x8a>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a25      	ldr	r2, [pc, #148]	; (8008e30 <TIM_Base_SetConfig+0x11c>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d108      	bne.n	8008db0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a10      	ldr	r2, [pc, #64]	; (8008e18 <TIM_Base_SetConfig+0x104>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d00f      	beq.n	8008dfc <TIM_Base_SetConfig+0xe8>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a11      	ldr	r2, [pc, #68]	; (8008e24 <TIM_Base_SetConfig+0x110>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00b      	beq.n	8008dfc <TIM_Base_SetConfig+0xe8>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a10      	ldr	r2, [pc, #64]	; (8008e28 <TIM_Base_SetConfig+0x114>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d007      	beq.n	8008dfc <TIM_Base_SetConfig+0xe8>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a0f      	ldr	r2, [pc, #60]	; (8008e2c <TIM_Base_SetConfig+0x118>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d003      	beq.n	8008dfc <TIM_Base_SetConfig+0xe8>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a0e      	ldr	r2, [pc, #56]	; (8008e30 <TIM_Base_SetConfig+0x11c>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d103      	bne.n	8008e04 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	691a      	ldr	r2, [r3, #16]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	615a      	str	r2, [r3, #20]
}
 8008e0a:	bf00      	nop
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	40012c00 	.word	0x40012c00
 8008e1c:	40000400 	.word	0x40000400
 8008e20:	40000800 	.word	0x40000800
 8008e24:	40013400 	.word	0x40013400
 8008e28:	40014000 	.word	0x40014000
 8008e2c:	40014400 	.word	0x40014400
 8008e30:	40014800 	.word	0x40014800

08008e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	f023 0201 	bic.w	r2, r3, #1
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f023 0303 	bic.w	r3, r3, #3
 8008e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	f023 0302 	bic.w	r3, r3, #2
 8008e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a2c      	ldr	r2, [pc, #176]	; (8008f40 <TIM_OC1_SetConfig+0x10c>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d00f      	beq.n	8008eb4 <TIM_OC1_SetConfig+0x80>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a2b      	ldr	r2, [pc, #172]	; (8008f44 <TIM_OC1_SetConfig+0x110>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d00b      	beq.n	8008eb4 <TIM_OC1_SetConfig+0x80>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a2a      	ldr	r2, [pc, #168]	; (8008f48 <TIM_OC1_SetConfig+0x114>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d007      	beq.n	8008eb4 <TIM_OC1_SetConfig+0x80>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a29      	ldr	r2, [pc, #164]	; (8008f4c <TIM_OC1_SetConfig+0x118>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d003      	beq.n	8008eb4 <TIM_OC1_SetConfig+0x80>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a28      	ldr	r2, [pc, #160]	; (8008f50 <TIM_OC1_SetConfig+0x11c>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d10c      	bne.n	8008ece <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	f023 0308 	bic.w	r3, r3, #8
 8008eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f023 0304 	bic.w	r3, r3, #4
 8008ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a1b      	ldr	r2, [pc, #108]	; (8008f40 <TIM_OC1_SetConfig+0x10c>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d00f      	beq.n	8008ef6 <TIM_OC1_SetConfig+0xc2>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a1a      	ldr	r2, [pc, #104]	; (8008f44 <TIM_OC1_SetConfig+0x110>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d00b      	beq.n	8008ef6 <TIM_OC1_SetConfig+0xc2>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a19      	ldr	r2, [pc, #100]	; (8008f48 <TIM_OC1_SetConfig+0x114>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d007      	beq.n	8008ef6 <TIM_OC1_SetConfig+0xc2>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a18      	ldr	r2, [pc, #96]	; (8008f4c <TIM_OC1_SetConfig+0x118>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d003      	beq.n	8008ef6 <TIM_OC1_SetConfig+0xc2>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a17      	ldr	r2, [pc, #92]	; (8008f50 <TIM_OC1_SetConfig+0x11c>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d111      	bne.n	8008f1a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	621a      	str	r2, [r3, #32]
}
 8008f34:	bf00      	nop
 8008f36:	371c      	adds	r7, #28
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	40012c00 	.word	0x40012c00
 8008f44:	40013400 	.word	0x40013400
 8008f48:	40014000 	.word	0x40014000
 8008f4c:	40014400 	.word	0x40014400
 8008f50:	40014800 	.word	0x40014800

08008f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a1b      	ldr	r3, [r3, #32]
 8008f62:	f023 0210 	bic.w	r2, r3, #16
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	021b      	lsls	r3, r3, #8
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	f023 0320 	bic.w	r3, r3, #32
 8008fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	011b      	lsls	r3, r3, #4
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a28      	ldr	r2, [pc, #160]	; (8009054 <TIM_OC2_SetConfig+0x100>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d003      	beq.n	8008fc0 <TIM_OC2_SetConfig+0x6c>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a27      	ldr	r2, [pc, #156]	; (8009058 <TIM_OC2_SetConfig+0x104>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d10d      	bne.n	8008fdc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	011b      	lsls	r3, r3, #4
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a1d      	ldr	r2, [pc, #116]	; (8009054 <TIM_OC2_SetConfig+0x100>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d00f      	beq.n	8009004 <TIM_OC2_SetConfig+0xb0>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a1c      	ldr	r2, [pc, #112]	; (8009058 <TIM_OC2_SetConfig+0x104>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d00b      	beq.n	8009004 <TIM_OC2_SetConfig+0xb0>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a1b      	ldr	r2, [pc, #108]	; (800905c <TIM_OC2_SetConfig+0x108>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d007      	beq.n	8009004 <TIM_OC2_SetConfig+0xb0>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a1a      	ldr	r2, [pc, #104]	; (8009060 <TIM_OC2_SetConfig+0x10c>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d003      	beq.n	8009004 <TIM_OC2_SetConfig+0xb0>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a19      	ldr	r2, [pc, #100]	; (8009064 <TIM_OC2_SetConfig+0x110>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d113      	bne.n	800902c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800900a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009012:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	695b      	ldr	r3, [r3, #20]
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	4313      	orrs	r3, r2
 800901e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	693a      	ldr	r2, [r7, #16]
 8009028:	4313      	orrs	r3, r2
 800902a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	621a      	str	r2, [r3, #32]
}
 8009046:	bf00      	nop
 8009048:	371c      	adds	r7, #28
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	40012c00 	.word	0x40012c00
 8009058:	40013400 	.word	0x40013400
 800905c:	40014000 	.word	0x40014000
 8009060:	40014400 	.word	0x40014400
 8009064:	40014800 	.word	0x40014800

08009068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009068:	b480      	push	{r7}
 800906a:	b087      	sub	sp, #28
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a1b      	ldr	r3, [r3, #32]
 8009082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800909a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f023 0303 	bic.w	r3, r3, #3
 80090a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	021b      	lsls	r3, r3, #8
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	4313      	orrs	r3, r2
 80090c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a27      	ldr	r2, [pc, #156]	; (8009164 <TIM_OC3_SetConfig+0xfc>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d003      	beq.n	80090d2 <TIM_OC3_SetConfig+0x6a>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a26      	ldr	r2, [pc, #152]	; (8009168 <TIM_OC3_SetConfig+0x100>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d10d      	bne.n	80090ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	021b      	lsls	r3, r3, #8
 80090e0:	697a      	ldr	r2, [r7, #20]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090ec:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a1c      	ldr	r2, [pc, #112]	; (8009164 <TIM_OC3_SetConfig+0xfc>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d00f      	beq.n	8009116 <TIM_OC3_SetConfig+0xae>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a1b      	ldr	r2, [pc, #108]	; (8009168 <TIM_OC3_SetConfig+0x100>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d00b      	beq.n	8009116 <TIM_OC3_SetConfig+0xae>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a1a      	ldr	r2, [pc, #104]	; (800916c <TIM_OC3_SetConfig+0x104>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d007      	beq.n	8009116 <TIM_OC3_SetConfig+0xae>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a19      	ldr	r2, [pc, #100]	; (8009170 <TIM_OC3_SetConfig+0x108>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d003      	beq.n	8009116 <TIM_OC3_SetConfig+0xae>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a18      	ldr	r2, [pc, #96]	; (8009174 <TIM_OC3_SetConfig+0x10c>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d113      	bne.n	800913e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800911c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	011b      	lsls	r3, r3, #4
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	4313      	orrs	r3, r2
 8009130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	011b      	lsls	r3, r3, #4
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	4313      	orrs	r3, r2
 800913c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	621a      	str	r2, [r3, #32]
}
 8009158:	bf00      	nop
 800915a:	371c      	adds	r7, #28
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	40012c00 	.word	0x40012c00
 8009168:	40013400 	.word	0x40013400
 800916c:	40014000 	.word	0x40014000
 8009170:	40014400 	.word	0x40014400
 8009174:	40014800 	.word	0x40014800

08009178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009178:	b480      	push	{r7}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	021b      	lsls	r3, r3, #8
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	4313      	orrs	r3, r2
 80091be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	031b      	lsls	r3, r3, #12
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a18      	ldr	r2, [pc, #96]	; (8009238 <TIM_OC4_SetConfig+0xc0>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d00f      	beq.n	80091fc <TIM_OC4_SetConfig+0x84>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a17      	ldr	r2, [pc, #92]	; (800923c <TIM_OC4_SetConfig+0xc4>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d00b      	beq.n	80091fc <TIM_OC4_SetConfig+0x84>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a16      	ldr	r2, [pc, #88]	; (8009240 <TIM_OC4_SetConfig+0xc8>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d007      	beq.n	80091fc <TIM_OC4_SetConfig+0x84>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a15      	ldr	r2, [pc, #84]	; (8009244 <TIM_OC4_SetConfig+0xcc>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d003      	beq.n	80091fc <TIM_OC4_SetConfig+0x84>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a14      	ldr	r2, [pc, #80]	; (8009248 <TIM_OC4_SetConfig+0xd0>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d109      	bne.n	8009210 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	019b      	lsls	r3, r3, #6
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	4313      	orrs	r3, r2
 800920e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	621a      	str	r2, [r3, #32]
}
 800922a:	bf00      	nop
 800922c:	371c      	adds	r7, #28
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	40012c00 	.word	0x40012c00
 800923c:	40013400 	.word	0x40013400
 8009240:	40014000 	.word	0x40014000
 8009244:	40014400 	.word	0x40014400
 8009248:	40014800 	.word	0x40014800

0800924c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800927a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009290:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	041b      	lsls	r3, r3, #16
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	4313      	orrs	r3, r2
 800929c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a17      	ldr	r2, [pc, #92]	; (8009300 <TIM_OC5_SetConfig+0xb4>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d00f      	beq.n	80092c6 <TIM_OC5_SetConfig+0x7a>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a16      	ldr	r2, [pc, #88]	; (8009304 <TIM_OC5_SetConfig+0xb8>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d00b      	beq.n	80092c6 <TIM_OC5_SetConfig+0x7a>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a15      	ldr	r2, [pc, #84]	; (8009308 <TIM_OC5_SetConfig+0xbc>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d007      	beq.n	80092c6 <TIM_OC5_SetConfig+0x7a>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a14      	ldr	r2, [pc, #80]	; (800930c <TIM_OC5_SetConfig+0xc0>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d003      	beq.n	80092c6 <TIM_OC5_SetConfig+0x7a>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a13      	ldr	r2, [pc, #76]	; (8009310 <TIM_OC5_SetConfig+0xc4>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d109      	bne.n	80092da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	021b      	lsls	r3, r3, #8
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	697a      	ldr	r2, [r7, #20]
 80092de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	685a      	ldr	r2, [r3, #4]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	621a      	str	r2, [r3, #32]
}
 80092f4:	bf00      	nop
 80092f6:	371c      	adds	r7, #28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	40012c00 	.word	0x40012c00
 8009304:	40013400 	.word	0x40013400
 8009308:	40014000 	.word	0x40014000
 800930c:	40014400 	.word	0x40014400
 8009310:	40014800 	.word	0x40014800

08009314 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009314:	b480      	push	{r7}
 8009316:	b087      	sub	sp, #28
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800933a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	021b      	lsls	r3, r3, #8
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	4313      	orrs	r3, r2
 8009352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800935a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	051b      	lsls	r3, r3, #20
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	4313      	orrs	r3, r2
 8009366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a18      	ldr	r2, [pc, #96]	; (80093cc <TIM_OC6_SetConfig+0xb8>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d00f      	beq.n	8009390 <TIM_OC6_SetConfig+0x7c>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a17      	ldr	r2, [pc, #92]	; (80093d0 <TIM_OC6_SetConfig+0xbc>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d00b      	beq.n	8009390 <TIM_OC6_SetConfig+0x7c>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a16      	ldr	r2, [pc, #88]	; (80093d4 <TIM_OC6_SetConfig+0xc0>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d007      	beq.n	8009390 <TIM_OC6_SetConfig+0x7c>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a15      	ldr	r2, [pc, #84]	; (80093d8 <TIM_OC6_SetConfig+0xc4>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d003      	beq.n	8009390 <TIM_OC6_SetConfig+0x7c>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a14      	ldr	r2, [pc, #80]	; (80093dc <TIM_OC6_SetConfig+0xc8>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d109      	bne.n	80093a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009396:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	029b      	lsls	r3, r3, #10
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	621a      	str	r2, [r3, #32]
}
 80093be:	bf00      	nop
 80093c0:	371c      	adds	r7, #28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	40012c00 	.word	0x40012c00
 80093d0:	40013400 	.word	0x40013400
 80093d4:	40014000 	.word	0x40014000
 80093d8:	40014400 	.word	0x40014400
 80093dc:	40014800 	.word	0x40014800

080093e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6a1b      	ldr	r3, [r3, #32]
 80093f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6a1b      	ldr	r3, [r3, #32]
 80093f6:	f023 0201 	bic.w	r2, r3, #1
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800940a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	011b      	lsls	r3, r3, #4
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	4313      	orrs	r3, r2
 8009414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f023 030a 	bic.w	r3, r3, #10
 800941c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	4313      	orrs	r3, r2
 8009424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	621a      	str	r2, [r3, #32]
}
 8009432:	bf00      	nop
 8009434:	371c      	adds	r7, #28
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800943e:	b480      	push	{r7}
 8009440:	b087      	sub	sp, #28
 8009442:	af00      	add	r7, sp, #0
 8009444:	60f8      	str	r0, [r7, #12]
 8009446:	60b9      	str	r1, [r7, #8]
 8009448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6a1b      	ldr	r3, [r3, #32]
 800944e:	f023 0210 	bic.w	r2, r3, #16
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009468:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	031b      	lsls	r3, r3, #12
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	4313      	orrs	r3, r2
 8009472:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800947a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	011b      	lsls	r3, r3, #4
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	4313      	orrs	r3, r2
 8009484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	621a      	str	r2, [r3, #32]
}
 8009492:	bf00      	nop
 8009494:	371c      	adds	r7, #28
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr

0800949e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800949e:	b480      	push	{r7}
 80094a0:	b085      	sub	sp, #20
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	f043 0307 	orr.w	r3, r3, #7
 80094c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	609a      	str	r2, [r3, #8]
}
 80094c8:	bf00      	nop
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b087      	sub	sp, #28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
 80094e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	021a      	lsls	r2, r3, #8
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	431a      	orrs	r2, r3
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	4313      	orrs	r3, r2
 8009500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	609a      	str	r2, [r3, #8]
}
 8009508:	bf00      	nop
 800950a:	371c      	adds	r7, #28
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f003 031f 	and.w	r3, r3, #31
 8009526:	2201      	movs	r2, #1
 8009528:	fa02 f303 	lsl.w	r3, r2, r3
 800952c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6a1a      	ldr	r2, [r3, #32]
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	43db      	mvns	r3, r3
 8009536:	401a      	ands	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6a1a      	ldr	r2, [r3, #32]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f003 031f 	and.w	r3, r3, #31
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	fa01 f303 	lsl.w	r3, r1, r3
 800954c:	431a      	orrs	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	621a      	str	r2, [r3, #32]
}
 8009552:	bf00      	nop
 8009554:	371c      	adds	r7, #28
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
	...

08009560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009570:	2b01      	cmp	r3, #1
 8009572:	d101      	bne.n	8009578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009574:	2302      	movs	r3, #2
 8009576:	e063      	b.n	8009640 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a2b      	ldr	r2, [pc, #172]	; (800964c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d004      	beq.n	80095ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a2a      	ldr	r2, [pc, #168]	; (8009650 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d108      	bne.n	80095be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80095b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a1b      	ldr	r2, [pc, #108]	; (800964c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d018      	beq.n	8009614 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ea:	d013      	beq.n	8009614 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a18      	ldr	r2, [pc, #96]	; (8009654 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d00e      	beq.n	8009614 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a17      	ldr	r2, [pc, #92]	; (8009658 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d009      	beq.n	8009614 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a12      	ldr	r2, [pc, #72]	; (8009650 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d004      	beq.n	8009614 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a13      	ldr	r2, [pc, #76]	; (800965c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d10c      	bne.n	800962e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800961a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	4313      	orrs	r3, r2
 8009624:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3714      	adds	r7, #20
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr
 800964c:	40012c00 	.word	0x40012c00
 8009650:	40013400 	.word	0x40013400
 8009654:	40000400 	.word	0x40000400
 8009658:	40000800 	.word	0x40000800
 800965c:	40014000 	.word	0x40014000

08009660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
//PARTITION VolToPart[] = {{0,1}, {0,2}, {1,0}};
/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800969c:	b580      	push	{r7, lr}
 800969e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80096a0:	4904      	ldr	r1, [pc, #16]	; (80096b4 <MX_FATFS_Init+0x18>)
 80096a2:	4805      	ldr	r0, [pc, #20]	; (80096b8 <MX_FATFS_Init+0x1c>)
 80096a4:	f003 f8a0 	bl	800c7e8 <FATFS_LinkDriver>
 80096a8:	4603      	mov	r3, r0
 80096aa:	461a      	mov	r2, r3
 80096ac:	4b03      	ldr	r3, [pc, #12]	; (80096bc <MX_FATFS_Init+0x20>)
 80096ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80096b0:	bf00      	nop
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	20000e10 	.word	0x20000e10
 80096b8:	2000002c 	.word	0x2000002c
 80096bc:	20000e14 	.word	0x20000e14

080096c0 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80096c0:	b480      	push	{r7}
 80096c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80096c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//return SD_disk_initialize(pdrv);
	Stat = STA_NOINIT;
 80096da:	4b1a      	ldr	r3, [pc, #104]	; (8009744 <USER_initialize+0x74>)
 80096dc:	2201      	movs	r2, #1
 80096de:	701a      	strb	r2, [r3, #0]
	// write your own code here to initialize the drive
	if(SDSPI_Init(spi_handle) == 0) {
 80096e0:	4b19      	ldr	r3, [pc, #100]	; (8009748 <USER_initialize+0x78>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fb fb8f 	bl	8004e08 <SDSPI_Init>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d122      	bne.n	8009736 <USER_initialize+0x66>
		if(SDSPI_ReadInfo(spi_handle, &sector, &capacity) == 0) {
 80096f0:	4b15      	ldr	r3, [pc, #84]	; (8009748 <USER_initialize+0x78>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a15      	ldr	r2, [pc, #84]	; (800974c <USER_initialize+0x7c>)
 80096f6:	4916      	ldr	r1, [pc, #88]	; (8009750 <USER_initialize+0x80>)
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fb fe87 	bl	800540c <SDSPI_ReadInfo>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d118      	bne.n	8009736 <USER_initialize+0x66>
			Stat &= ~STA_NOINIT;
 8009704:	4b0f      	ldr	r3, [pc, #60]	; (8009744 <USER_initialize+0x74>)
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	b2db      	uxtb	r3, r3
 800970a:	f023 0301 	bic.w	r3, r3, #1
 800970e:	b2da      	uxtb	r2, r3
 8009710:	4b0c      	ldr	r3, [pc, #48]	; (8009744 <USER_initialize+0x74>)
 8009712:	701a      	strb	r2, [r3, #0]
			if(sector > 512) {
 8009714:	4b0e      	ldr	r3, [pc, #56]	; (8009750 <USER_initialize+0x80>)
 8009716:	881b      	ldrh	r3, [r3, #0]
 8009718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800971c:	d903      	bls.n	8009726 <USER_initialize+0x56>
				sector = 512;
 800971e:	4b0c      	ldr	r3, [pc, #48]	; (8009750 <USER_initialize+0x80>)
 8009720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009724:	801a      	strh	r2, [r3, #0]
			}
			capacity = capacity / sector;
 8009726:	4b09      	ldr	r3, [pc, #36]	; (800974c <USER_initialize+0x7c>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a09      	ldr	r2, [pc, #36]	; (8009750 <USER_initialize+0x80>)
 800972c:	8812      	ldrh	r2, [r2, #0]
 800972e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009732:	4a06      	ldr	r2, [pc, #24]	; (800974c <USER_initialize+0x7c>)
 8009734:	6013      	str	r3, [r2, #0]
		}
	}
	return Stat;
 8009736:	4b03      	ldr	r3, [pc, #12]	; (8009744 <USER_initialize+0x74>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800973c:	4618      	mov	r0, r3
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20000025 	.word	0x20000025
 8009748:	20000028 	.word	0x20000028
 800974c:	20000238 	.word	0x20000238
 8009750:	2000023c 	.word	0x2000023c

08009754 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
   //return SD_disk_status(pdrv);
	return Stat;
 800975e:	4b04      	ldr	r3, [pc, #16]	; (8009770 <USER_status+0x1c>)
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009764:	4618      	mov	r0, r3
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	20000025 	.word	0x20000025

08009774 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	60b9      	str	r1, [r7, #8]
 800977c:	607a      	str	r2, [r7, #4]
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	4603      	mov	r3, r0
 8009782:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return SD_disk_read(pdrv, buff, sector, count);
	for(UINT i = 0; i < count; i++) {
 8009784:	2300      	movs	r3, #0
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	e015      	b.n	80097b6 <USER_read+0x42>
		if(SDSPI_ReadBlock(spi_handle, (sector + i) * 512, buff + (i * 512), 512) != 0) {
 800978a:	4b0f      	ldr	r3, [pc, #60]	; (80097c8 <USER_read+0x54>)
 800978c:	6818      	ldr	r0, [r3, #0]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	4413      	add	r3, r2
 8009794:	0259      	lsls	r1, r3, #9
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	025b      	lsls	r3, r3, #9
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	441a      	add	r2, r3
 800979e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097a2:	f7fb fe1f 	bl	80053e4 <SDSPI_ReadBlock>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d001      	beq.n	80097b0 <USER_read+0x3c>
			return RES_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	e007      	b.n	80097c0 <USER_read+0x4c>
	for(UINT i = 0; i < count; i++) {
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	3301      	adds	r3, #1
 80097b4:	617b      	str	r3, [r7, #20]
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d3e5      	bcc.n	800978a <USER_read+0x16>
		}
	}
	return RES_OK;
 80097be:	2300      	movs	r3, #0

  /* USER CODE END READ */
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3718      	adds	r7, #24
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	20000028 	.word	0x20000028

080097cc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60b9      	str	r1, [r7, #8]
 80097d4:	607a      	str	r2, [r7, #4]
 80097d6:	603b      	str	r3, [r7, #0]
 80097d8:	4603      	mov	r3, r0
 80097da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	for(UINT i = 0; i < count; i++) {
 80097dc:	2300      	movs	r3, #0
 80097de:	617b      	str	r3, [r7, #20]
 80097e0:	e015      	b.n	800980e <USER_write+0x42>
		if(SDSPI_WriteBlock(spi_handle, (sector + i) * 512, (uint8_t *)buff + (i * 512), 512) != 0) {
 80097e2:	4b0f      	ldr	r3, [pc, #60]	; (8009820 <USER_write+0x54>)
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	4413      	add	r3, r2
 80097ec:	0259      	lsls	r1, r3, #9
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	025b      	lsls	r3, r3, #9
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	441a      	add	r2, r3
 80097f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097fa:	f7fb fd07 	bl	800520c <SDSPI_WriteBlock>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <USER_write+0x3c>
			return RES_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e007      	b.n	8009818 <USER_write+0x4c>
	for(UINT i = 0; i < count; i++) {
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	3301      	adds	r3, #1
 800980c:	617b      	str	r3, [r7, #20]
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	429a      	cmp	r2, r3
 8009814:	d3e5      	bcc.n	80097e2 <USER_write+0x16>
		}
	}
	return RES_OK;
 8009816:	2300      	movs	r3, #0

    //return SD_disk_write(pdrv, buff, sector, count);
  /* USER CODE END WRITE */
}
 8009818:	4618      	mov	r0, r3
 800981a:	3718      	adds	r7, #24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	20000028 	.word	0x20000028

08009824 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	603a      	str	r2, [r7, #0]
 800982e:	71fb      	strb	r3, [r7, #7]
 8009830:	460b      	mov	r3, r1
 8009832:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	73fb      	strb	r3, [r7, #15]
	switch (cmd) {
 8009838:	79bb      	ldrb	r3, [r7, #6]
 800983a:	2b03      	cmp	r3, #3
 800983c:	d824      	bhi.n	8009888 <USER_ioctl+0x64>
 800983e:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <USER_ioctl+0x20>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	08009855 	.word	0x08009855
 8009848:	0800985b 	.word	0x0800985b
 800984c:	08009869 	.word	0x08009869
 8009850:	08009879 	.word	0x08009879
	/* Make sure that no pending write process */
	case CTRL_SYNC:
		res = RES_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	73fb      	strb	r3, [r7, #15]
		break;
 8009858:	e018      	b.n	800988c <USER_ioctl+0x68>

	/* Get number of sectors on the disk (DWORD) */
	case GET_SECTOR_COUNT :
		*(DWORD*)buff = capacity;
 800985a:	4b10      	ldr	r3, [pc, #64]	; (800989c <USER_ioctl+0x78>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]
		break;
 8009866:	e011      	b.n	800988c <USER_ioctl+0x68>

	/* Get R/W sector size (WORD) */
	case GET_SECTOR_SIZE :
		*(DWORD*)buff = sector;
 8009868:	4b0d      	ldr	r3, [pc, #52]	; (80098a0 <USER_ioctl+0x7c>)
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	461a      	mov	r2, r3
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	73fb      	strb	r3, [r7, #15]
		break;
 8009876:	e009      	b.n	800988c <USER_ioctl+0x68>

	/* Get erase block size in unit of sector (DWORD) */
	case GET_BLOCK_SIZE :
		*(DWORD*)buff = sector;
 8009878:	4b09      	ldr	r3, [pc, #36]	; (80098a0 <USER_ioctl+0x7c>)
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	461a      	mov	r2, r3
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
		break;
 8009886:	e001      	b.n	800988c <USER_ioctl+0x68>

	default:
		res = RES_PARERR;
 8009888:	2304      	movs	r3, #4
 800988a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800988c:	7bfb      	ldrb	r3, [r7, #15]

	//return SD_disk_ioctl(pdrv, cmd, buff);
  /* USER CODE END IOCTL */
}
 800988e:	4618      	mov	r0, r3
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	20000238 	.word	0x20000238
 80098a0:	2000023c 	.word	0x2000023c

080098a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4603      	mov	r3, r0
 80098ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80098ae:	79fb      	ldrb	r3, [r7, #7]
 80098b0:	4a08      	ldr	r2, [pc, #32]	; (80098d4 <disk_status+0x30>)
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	79fa      	ldrb	r2, [r7, #7]
 80098bc:	4905      	ldr	r1, [pc, #20]	; (80098d4 <disk_status+0x30>)
 80098be:	440a      	add	r2, r1
 80098c0:	7a12      	ldrb	r2, [r2, #8]
 80098c2:	4610      	mov	r0, r2
 80098c4:	4798      	blx	r3
 80098c6:	4603      	mov	r3, r0
 80098c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80098ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	20000460 	.word	0x20000460

080098d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	4603      	mov	r3, r0
 80098e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80098e6:	79fb      	ldrb	r3, [r7, #7]
 80098e8:	4a0d      	ldr	r2, [pc, #52]	; (8009920 <disk_initialize+0x48>)
 80098ea:	5cd3      	ldrb	r3, [r2, r3]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d111      	bne.n	8009914 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80098f0:	79fb      	ldrb	r3, [r7, #7]
 80098f2:	4a0b      	ldr	r2, [pc, #44]	; (8009920 <disk_initialize+0x48>)
 80098f4:	2101      	movs	r1, #1
 80098f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80098f8:	79fb      	ldrb	r3, [r7, #7]
 80098fa:	4a09      	ldr	r2, [pc, #36]	; (8009920 <disk_initialize+0x48>)
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	79fa      	ldrb	r2, [r7, #7]
 8009906:	4906      	ldr	r1, [pc, #24]	; (8009920 <disk_initialize+0x48>)
 8009908:	440a      	add	r2, r1
 800990a:	7a12      	ldrb	r2, [r2, #8]
 800990c:	4610      	mov	r0, r2
 800990e:	4798      	blx	r3
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009914:	7bfb      	ldrb	r3, [r7, #15]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	20000460 	.word	0x20000460

08009924 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009924:	b590      	push	{r4, r7, lr}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	607a      	str	r2, [r7, #4]
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	4603      	mov	r3, r0
 8009932:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	4a0a      	ldr	r2, [pc, #40]	; (8009960 <disk_read+0x3c>)
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4413      	add	r3, r2
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	689c      	ldr	r4, [r3, #8]
 8009940:	7bfb      	ldrb	r3, [r7, #15]
 8009942:	4a07      	ldr	r2, [pc, #28]	; (8009960 <disk_read+0x3c>)
 8009944:	4413      	add	r3, r2
 8009946:	7a18      	ldrb	r0, [r3, #8]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	68b9      	ldr	r1, [r7, #8]
 800994e:	47a0      	blx	r4
 8009950:	4603      	mov	r3, r0
 8009952:	75fb      	strb	r3, [r7, #23]
  return res;
 8009954:	7dfb      	ldrb	r3, [r7, #23]
}
 8009956:	4618      	mov	r0, r3
 8009958:	371c      	adds	r7, #28
 800995a:	46bd      	mov	sp, r7
 800995c:	bd90      	pop	{r4, r7, pc}
 800995e:	bf00      	nop
 8009960:	20000460 	.word	0x20000460

08009964 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009964:	b590      	push	{r4, r7, lr}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60b9      	str	r1, [r7, #8]
 800996c:	607a      	str	r2, [r7, #4]
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	4603      	mov	r3, r0
 8009972:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009974:	7bfb      	ldrb	r3, [r7, #15]
 8009976:	4a0a      	ldr	r2, [pc, #40]	; (80099a0 <disk_write+0x3c>)
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	68dc      	ldr	r4, [r3, #12]
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	4a07      	ldr	r2, [pc, #28]	; (80099a0 <disk_write+0x3c>)
 8009984:	4413      	add	r3, r2
 8009986:	7a18      	ldrb	r0, [r3, #8]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	68b9      	ldr	r1, [r7, #8]
 800998e:	47a0      	blx	r4
 8009990:	4603      	mov	r3, r0
 8009992:	75fb      	strb	r3, [r7, #23]
  return res;
 8009994:	7dfb      	ldrb	r3, [r7, #23]
}
 8009996:	4618      	mov	r0, r3
 8009998:	371c      	adds	r7, #28
 800999a:	46bd      	mov	sp, r7
 800999c:	bd90      	pop	{r4, r7, pc}
 800999e:	bf00      	nop
 80099a0:	20000460 	.word	0x20000460

080099a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	603a      	str	r2, [r7, #0]
 80099ae:	71fb      	strb	r3, [r7, #7]
 80099b0:	460b      	mov	r3, r1
 80099b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80099b4:	79fb      	ldrb	r3, [r7, #7]
 80099b6:	4a09      	ldr	r2, [pc, #36]	; (80099dc <disk_ioctl+0x38>)
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	79fa      	ldrb	r2, [r7, #7]
 80099c2:	4906      	ldr	r1, [pc, #24]	; (80099dc <disk_ioctl+0x38>)
 80099c4:	440a      	add	r2, r1
 80099c6:	7a10      	ldrb	r0, [r2, #8]
 80099c8:	79b9      	ldrb	r1, [r7, #6]
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	4798      	blx	r3
 80099ce:	4603      	mov	r3, r0
 80099d0:	73fb      	strb	r3, [r7, #15]
  return res;
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000460 	.word	0x20000460

080099e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80099e0:	b480      	push	{r7}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80099f4:	e007      	b.n	8009a06 <mem_cpy+0x26>
		*d++ = *s++;
 80099f6:	693a      	ldr	r2, [r7, #16]
 80099f8:	1c53      	adds	r3, r2, #1
 80099fa:	613b      	str	r3, [r7, #16]
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	1c59      	adds	r1, r3, #1
 8009a00:	6179      	str	r1, [r7, #20]
 8009a02:	7812      	ldrb	r2, [r2, #0]
 8009a04:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	1e5a      	subs	r2, r3, #1
 8009a0a:	607a      	str	r2, [r7, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1f2      	bne.n	80099f6 <mem_cpy+0x16>
}
 8009a10:	bf00      	nop
 8009a12:	371c      	adds	r7, #28
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009a1c:	b480      	push	{r7}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8009a2c:	e005      	b.n	8009a3a <mem_set+0x1e>
		*d++ = (BYTE)val;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	617a      	str	r2, [r7, #20]
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	b2d2      	uxtb	r2, r2
 8009a38:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	1e5a      	subs	r2, r3, #1
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1f4      	bne.n	8009a2e <mem_set+0x12>
}
 8009a44:	bf00      	nop
 8009a46:	371c      	adds	r7, #28
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8009a50:	b480      	push	{r7}
 8009a52:	b089      	sub	sp, #36	; 0x24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	61fb      	str	r3, [r7, #28]
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009a68:	bf00      	nop
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	1e5a      	subs	r2, r3, #1
 8009a6e:	607a      	str	r2, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00d      	beq.n	8009a90 <mem_cmp+0x40>
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	61fa      	str	r2, [r7, #28]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	1c5a      	adds	r2, r3, #1
 8009a82:	61ba      	str	r2, [r7, #24]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	1acb      	subs	r3, r1, r3
 8009a88:	617b      	str	r3, [r7, #20]
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d0ec      	beq.n	8009a6a <mem_cmp+0x1a>
	return r;
 8009a90:	697b      	ldr	r3, [r7, #20]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3724      	adds	r7, #36	; 0x24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009a9e:	b480      	push	{r7}
 8009aa0:	b083      	sub	sp, #12
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009aa8:	e002      	b.n	8009ab0 <chk_chr+0x12>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3301      	adds	r3, #1
 8009aae:	607b      	str	r3, [r7, #4]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d005      	beq.n	8009ac4 <chk_chr+0x26>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	461a      	mov	r2, r3
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d1f2      	bne.n	8009aaa <chk_chr+0xc>
	return *str;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ade:	2300      	movs	r3, #0
 8009ae0:	60bb      	str	r3, [r7, #8]
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	60fb      	str	r3, [r7, #12]
 8009ae6:	e038      	b.n	8009b5a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8009ae8:	4930      	ldr	r1, [pc, #192]	; (8009bac <chk_lock+0xd8>)
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	4613      	mov	r3, r2
 8009aee:	005b      	lsls	r3, r3, #1
 8009af0:	4413      	add	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	440b      	add	r3, r1
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d029      	beq.n	8009b50 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009afc:	492b      	ldr	r1, [pc, #172]	; (8009bac <chk_lock+0xd8>)
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	4613      	mov	r3, r2
 8009b02:	005b      	lsls	r3, r3, #1
 8009b04:	4413      	add	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	440b      	add	r3, r1
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d11e      	bne.n	8009b54 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8009b16:	4925      	ldr	r1, [pc, #148]	; (8009bac <chk_lock+0xd8>)
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	005b      	lsls	r3, r3, #1
 8009b1e:	4413      	add	r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	440b      	add	r3, r1
 8009b24:	3304      	adds	r3, #4
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d110      	bne.n	8009b54 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8009b32:	491e      	ldr	r1, [pc, #120]	; (8009bac <chk_lock+0xd8>)
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	4613      	mov	r3, r2
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	4413      	add	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	440b      	add	r3, r1
 8009b40:	3308      	adds	r3, #8
 8009b42:	881a      	ldrh	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d102      	bne.n	8009b54 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8009b4e:	e007      	b.n	8009b60 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8009b50:	2301      	movs	r3, #1
 8009b52:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	3301      	adds	r3, #1
 8009b58:	60fb      	str	r3, [r7, #12]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d9c3      	bls.n	8009ae8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d109      	bne.n	8009b7a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d102      	bne.n	8009b72 <chk_lock+0x9e>
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d101      	bne.n	8009b76 <chk_lock+0xa2>
 8009b72:	2300      	movs	r3, #0
 8009b74:	e013      	b.n	8009b9e <chk_lock+0xca>
 8009b76:	2312      	movs	r3, #18
 8009b78:	e011      	b.n	8009b9e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10b      	bne.n	8009b98 <chk_lock+0xc4>
 8009b80:	490a      	ldr	r1, [pc, #40]	; (8009bac <chk_lock+0xd8>)
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	4613      	mov	r3, r2
 8009b86:	005b      	lsls	r3, r3, #1
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	440b      	add	r3, r1
 8009b8e:	330a      	adds	r3, #10
 8009b90:	881b      	ldrh	r3, [r3, #0]
 8009b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b96:	d101      	bne.n	8009b9c <chk_lock+0xc8>
 8009b98:	2310      	movs	r3, #16
 8009b9a:	e000      	b.n	8009b9e <chk_lock+0xca>
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	20000248 	.word	0x20000248

08009bb0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	607b      	str	r3, [r7, #4]
 8009bba:	e002      	b.n	8009bc2 <enq_lock+0x12>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	607b      	str	r3, [r7, #4]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d809      	bhi.n	8009bdc <enq_lock+0x2c>
 8009bc8:	490a      	ldr	r1, [pc, #40]	; (8009bf4 <enq_lock+0x44>)
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	005b      	lsls	r3, r3, #1
 8009bd0:	4413      	add	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	440b      	add	r3, r1
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1ef      	bne.n	8009bbc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	bf14      	ite	ne
 8009be2:	2301      	movne	r3, #1
 8009be4:	2300      	moveq	r3, #0
 8009be6:	b2db      	uxtb	r3, r3
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr
 8009bf4:	20000248 	.word	0x20000248

08009bf8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c02:	2300      	movs	r3, #0
 8009c04:	60fb      	str	r3, [r7, #12]
 8009c06:	e02b      	b.n	8009c60 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8009c08:	4956      	ldr	r1, [pc, #344]	; (8009d64 <inc_lock+0x16c>)
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	005b      	lsls	r3, r3, #1
 8009c10:	4413      	add	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	440b      	add	r3, r1
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d11b      	bne.n	8009c5a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8009c22:	4950      	ldr	r1, [pc, #320]	; (8009d64 <inc_lock+0x16c>)
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	4613      	mov	r3, r2
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	4413      	add	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	440b      	add	r3, r1
 8009c30:	3304      	adds	r3, #4
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d10d      	bne.n	8009c5a <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8009c3e:	4949      	ldr	r1, [pc, #292]	; (8009d64 <inc_lock+0x16c>)
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	4613      	mov	r3, r2
 8009c44:	005b      	lsls	r3, r3, #1
 8009c46:	4413      	add	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	440b      	add	r3, r1
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	881a      	ldrh	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d006      	beq.n	8009c68 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	60fb      	str	r3, [r7, #12]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d9d0      	bls.n	8009c08 <inc_lock+0x10>
 8009c66:	e000      	b.n	8009c6a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8009c68:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d145      	bne.n	8009cfc <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009c70:	2300      	movs	r3, #0
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	e002      	b.n	8009c7c <inc_lock+0x84>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d809      	bhi.n	8009c96 <inc_lock+0x9e>
 8009c82:	4938      	ldr	r1, [pc, #224]	; (8009d64 <inc_lock+0x16c>)
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	4613      	mov	r3, r2
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	440b      	add	r3, r1
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1ef      	bne.n	8009c76 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d101      	bne.n	8009ca0 <inc_lock+0xa8>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	e05a      	b.n	8009d56 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8009ca6:	482f      	ldr	r0, [pc, #188]	; (8009d64 <inc_lock+0x16c>)
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	4613      	mov	r3, r2
 8009cac:	005b      	lsls	r3, r3, #1
 8009cae:	4413      	add	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4403      	add	r3, r0
 8009cb4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8009cbc:	4829      	ldr	r0, [pc, #164]	; (8009d64 <inc_lock+0x16c>)
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	4413      	add	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4403      	add	r3, r0
 8009cca:	3304      	adds	r3, #4
 8009ccc:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8009cd4:	4923      	ldr	r1, [pc, #140]	; (8009d64 <inc_lock+0x16c>)
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	005b      	lsls	r3, r3, #1
 8009cdc:	4413      	add	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	440b      	add	r3, r1
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8009ce8:	491e      	ldr	r1, [pc, #120]	; (8009d64 <inc_lock+0x16c>)
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	4613      	mov	r3, r2
 8009cee:	005b      	lsls	r3, r3, #1
 8009cf0:	4413      	add	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	440b      	add	r3, r1
 8009cf6:	330a      	adds	r3, #10
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00c      	beq.n	8009d1c <inc_lock+0x124>
 8009d02:	4918      	ldr	r1, [pc, #96]	; (8009d64 <inc_lock+0x16c>)
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	4613      	mov	r3, r2
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	4413      	add	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	440b      	add	r3, r1
 8009d10:	330a      	adds	r3, #10
 8009d12:	881b      	ldrh	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <inc_lock+0x124>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e01c      	b.n	8009d56 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10b      	bne.n	8009d3a <inc_lock+0x142>
 8009d22:	4910      	ldr	r1, [pc, #64]	; (8009d64 <inc_lock+0x16c>)
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	4613      	mov	r3, r2
 8009d28:	005b      	lsls	r3, r3, #1
 8009d2a:	4413      	add	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	440b      	add	r3, r1
 8009d30:	330a      	adds	r3, #10
 8009d32:	881b      	ldrh	r3, [r3, #0]
 8009d34:	3301      	adds	r3, #1
 8009d36:	b299      	uxth	r1, r3
 8009d38:	e001      	b.n	8009d3e <inc_lock+0x146>
 8009d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009d3e:	4809      	ldr	r0, [pc, #36]	; (8009d64 <inc_lock+0x16c>)
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	4613      	mov	r3, r2
 8009d44:	005b      	lsls	r3, r3, #1
 8009d46:	4413      	add	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4403      	add	r3, r0
 8009d4c:	330a      	adds	r3, #10
 8009d4e:	460a      	mov	r2, r1
 8009d50:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	3301      	adds	r3, #1
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	20000248 	.word	0x20000248

08009d68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009d70:	2300      	movs	r3, #0
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	e016      	b.n	8009da4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009d76:	4910      	ldr	r1, [pc, #64]	; (8009db8 <clear_lock+0x50>)
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	4413      	add	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	440b      	add	r3, r1
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d108      	bne.n	8009d9e <clear_lock+0x36>
 8009d8c:	490a      	ldr	r1, [pc, #40]	; (8009db8 <clear_lock+0x50>)
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	4613      	mov	r3, r2
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	4413      	add	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	440b      	add	r3, r1
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3301      	adds	r3, #1
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d9e5      	bls.n	8009d76 <clear_lock+0xe>
	}
}
 8009daa:	bf00      	nop
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	20000248 	.word	0x20000248

08009dbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d038      	beq.n	8009e44 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009dd8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009de0:	6879      	ldr	r1, [r7, #4]
 8009de2:	2301      	movs	r3, #1
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	f7ff fdbd 	bl	8009964 <disk_write>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	73fb      	strb	r3, [r7, #15]
 8009df4:	e026      	b.n	8009e44 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	1ad2      	subs	r2, r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d218      	bcs.n	8009e44 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8009e18:	613b      	str	r3, [r7, #16]
 8009e1a:	e010      	b.n	8009e3e <sync_window+0x82>
					wsect += fs->fsize;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009e22:	697a      	ldr	r2, [r7, #20]
 8009e24:	4413      	add	r3, r2
 8009e26:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009e2e:	6879      	ldr	r1, [r7, #4]
 8009e30:	2301      	movs	r3, #1
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	f7ff fd96 	bl	8009964 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	613b      	str	r3, [r7, #16]
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d8eb      	bhi.n	8009e1c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3718      	adds	r7, #24
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d01b      	beq.n	8009ea0 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7ff ffa7 	bl	8009dbc <sync_window>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d113      	bne.n	8009ea0 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009e7e:	6879      	ldr	r1, [r7, #4]
 8009e80:	2301      	movs	r3, #1
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	f7ff fd4e 	bl	8009924 <disk_read>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d004      	beq.n	8009e98 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e92:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7ff ff82 	bl	8009dbc <sync_window>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f040 809b 	bne.w	8009ffa <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	f040 8088 	bne.w	8009fe0 <sync_fs+0x136>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	f040 8082 	bne.w	8009fe0 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7ff fd99 	bl	8009a1c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2255      	movs	r2, #85	; 0x55
 8009eee:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	22aa      	movs	r2, #170	; 0xaa
 8009ef6:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2252      	movs	r2, #82	; 0x52
 8009efe:	701a      	strb	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2252      	movs	r2, #82	; 0x52
 8009f04:	705a      	strb	r2, [r3, #1]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2261      	movs	r2, #97	; 0x61
 8009f0a:	709a      	strb	r2, [r3, #2]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2241      	movs	r2, #65	; 0x41
 8009f10:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2272      	movs	r2, #114	; 0x72
 8009f16:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2272      	movs	r2, #114	; 0x72
 8009f1e:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2241      	movs	r2, #65	; 0x41
 8009f26:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2261      	movs	r2, #97	; 0x61
 8009f2e:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	0a1b      	lsrs	r3, r3, #8
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009f5a:	0c1b      	lsrs	r3, r3, #16
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009f6a:	0e1b      	lsrs	r3, r3, #24
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	0a1b      	lsrs	r3, r3, #8
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009f9c:	0c1b      	lsrs	r3, r3, #16
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009fac:	0e1b      	lsrs	r3, r3, #24
 8009fae:	b2da      	uxtb	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8009fbc:	1c5a      	adds	r2, r3, #1
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009fca:	6879      	ldr	r1, [r7, #4]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	f7ff fcc6 	bl	8009964 <disk_write>
			fs->fsi_flag = 0;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2100      	movs	r1, #0
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7ff fcda 	bl	80099a4 <disk_ioctl>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <sync_fs+0x150>
			res = FR_DISK_ERR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	3b02      	subs	r3, #2
 800a012:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a01a:	3b02      	subs	r3, #2
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d301      	bcc.n	800a026 <clust2sect+0x22>
 800a022:	2300      	movs	r3, #0
 800a024:	e00a      	b.n	800a03c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a02c:	461a      	mov	r2, r3
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	fb03 f202 	mul.w	r2, r3, r2
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800a03a:	4413      	add	r3, r2
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d905      	bls.n	800a064 <get_fat+0x1c>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	429a      	cmp	r2, r3
 800a062:	d302      	bcc.n	800a06a <get_fat+0x22>
		val = 1;	/* Internal error */
 800a064:	2301      	movs	r3, #1
 800a066:	617b      	str	r3, [r7, #20]
 800a068:	e0a0      	b.n	800a1ac <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a06a:	f04f 33ff 	mov.w	r3, #4294967295
 800a06e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a076:	2b02      	cmp	r3, #2
 800a078:	d044      	beq.n	800a104 <get_fat+0xbc>
 800a07a:	2b03      	cmp	r3, #3
 800a07c:	d063      	beq.n	800a146 <get_fat+0xfe>
 800a07e:	2b01      	cmp	r3, #1
 800a080:	f040 808a 	bne.w	800a198 <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	60fb      	str	r3, [r7, #12]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	085b      	lsrs	r3, r3, #1
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	4413      	add	r3, r2
 800a090:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	0a5b      	lsrs	r3, r3, #9
 800a09c:	4413      	add	r3, r2
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7ff fed4 	bl	8009e4e <move_window>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d178      	bne.n	800a19e <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	1c5a      	adds	r2, r3, #1
 800a0b0:	60fa      	str	r2, [r7, #12]
 800a0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	5cd3      	ldrb	r3, [r2, r3]
 800a0ba:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	0a5b      	lsrs	r3, r3, #9
 800a0c6:	4413      	add	r3, r2
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff febf 	bl	8009e4e <move_window>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d165      	bne.n	800a1a2 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	5cd3      	ldrb	r3, [r2, r3]
 800a0e0:	021b      	lsls	r3, r3, #8
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	f003 0301 	and.w	r3, r3, #1
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <get_fat+0xb2>
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	091b      	lsrs	r3, r3, #4
 800a0f8:	e002      	b.n	800a100 <get_fat+0xb8>
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a100:	617b      	str	r3, [r7, #20]
			break;
 800a102:	e053      	b.n	800a1ac <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	0a1b      	lsrs	r3, r3, #8
 800a10e:	4413      	add	r3, r2
 800a110:	4619      	mov	r1, r3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7ff fe9b 	bl	8009e4e <move_window>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d143      	bne.n	800a1a6 <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	4413      	add	r3, r2
 800a12a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	3301      	adds	r3, #1
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	021b      	lsls	r3, r3, #8
 800a134:	b21a      	sxth	r2, r3
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	b21b      	sxth	r3, r3
 800a13c:	4313      	orrs	r3, r2
 800a13e:	b21b      	sxth	r3, r3
 800a140:	b29b      	uxth	r3, r3
 800a142:	617b      	str	r3, [r7, #20]
			break;
 800a144:	e032      	b.n	800a1ac <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	09db      	lsrs	r3, r3, #7
 800a150:	4413      	add	r3, r2
 800a152:	4619      	mov	r1, r3
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7ff fe7a 	bl	8009e4e <move_window>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d124      	bne.n	800a1aa <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	4413      	add	r3, r2
 800a16c:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	3303      	adds	r3, #3
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	061a      	lsls	r2, r3, #24
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	3302      	adds	r3, #2
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	041b      	lsls	r3, r3, #16
 800a17e:	4313      	orrs	r3, r2
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	3201      	adds	r2, #1
 800a184:	7812      	ldrb	r2, [r2, #0]
 800a186:	0212      	lsls	r2, r2, #8
 800a188:	4313      	orrs	r3, r2
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	7812      	ldrb	r2, [r2, #0]
 800a18e:	4313      	orrs	r3, r2
 800a190:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a194:	617b      	str	r3, [r7, #20]
			break;
 800a196:	e009      	b.n	800a1ac <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 800a198:	2301      	movs	r3, #1
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	e006      	b.n	800a1ac <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a19e:	bf00      	nop
 800a1a0:	e004      	b.n	800a1ac <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1a2:	bf00      	nop
 800a1a4:	e002      	b.n	800a1ac <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a1a6:	bf00      	nop
 800a1a8:	e000      	b.n	800a1ac <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a1aa:	bf00      	nop
		}
	}

	return val;
 800a1ac:	697b      	ldr	r3, [r7, #20]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3718      	adds	r7, #24
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b088      	sub	sp, #32
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	60f8      	str	r0, [r7, #12]
 800a1be:	60b9      	str	r1, [r7, #8]
 800a1c0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d905      	bls.n	800a1d4 <put_fat+0x1e>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d302      	bcc.n	800a1da <put_fat+0x24>
		res = FR_INT_ERR;
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	77fb      	strb	r3, [r7, #31]
 800a1d8:	e0f3      	b.n	800a3c2 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d074      	beq.n	800a2ce <put_fat+0x118>
 800a1e4:	2b03      	cmp	r3, #3
 800a1e6:	f000 8099 	beq.w	800a31c <put_fat+0x166>
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	f040 80df 	bne.w	800a3ae <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	617b      	str	r3, [r7, #20]
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	085b      	lsrs	r3, r3, #1
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	0a5b      	lsrs	r3, r3, #9
 800a208:	4413      	add	r3, r2
 800a20a:	4619      	mov	r1, r3
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f7ff fe1e 	bl	8009e4e <move_window>
 800a212:	4603      	mov	r3, r0
 800a214:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a216:	7ffb      	ldrb	r3, [r7, #31]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f040 80cb 	bne.w	800a3b4 <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	1c5a      	adds	r2, r3, #1
 800a222:	617a      	str	r2, [r7, #20]
 800a224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	4413      	add	r3, r2
 800a22c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	f003 0301 	and.w	r3, r3, #1
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00d      	beq.n	800a254 <put_fat+0x9e>
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	b25b      	sxtb	r3, r3
 800a23e:	f003 030f 	and.w	r3, r3, #15
 800a242:	b25a      	sxtb	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	b2db      	uxtb	r3, r3
 800a248:	011b      	lsls	r3, r3, #4
 800a24a:	b25b      	sxtb	r3, r3
 800a24c:	4313      	orrs	r3, r2
 800a24e:	b25b      	sxtb	r3, r3
 800a250:	b2db      	uxtb	r3, r3
 800a252:	e001      	b.n	800a258 <put_fat+0xa2>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	b2db      	uxtb	r3, r3
 800a258:	69ba      	ldr	r2, [r7, #24]
 800a25a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	0a5b      	lsrs	r3, r3, #9
 800a26e:	4413      	add	r3, r2
 800a270:	4619      	mov	r1, r3
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f7ff fdeb 	bl	8009e4e <move_window>
 800a278:	4603      	mov	r3, r0
 800a27a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a27c:	7ffb      	ldrb	r3, [r7, #31]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	f040 809a 	bne.w	800a3b8 <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	4413      	add	r3, r2
 800a28e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	f003 0301 	and.w	r3, r3, #1
 800a296:	2b00      	cmp	r3, #0
 800a298:	d003      	beq.n	800a2a2 <put_fat+0xec>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	091b      	lsrs	r3, r3, #4
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	e00e      	b.n	800a2c0 <put_fat+0x10a>
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	b25b      	sxtb	r3, r3
 800a2a8:	f023 030f 	bic.w	r3, r3, #15
 800a2ac:	b25a      	sxtb	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	0a1b      	lsrs	r3, r3, #8
 800a2b2:	b25b      	sxtb	r3, r3
 800a2b4:	f003 030f 	and.w	r3, r3, #15
 800a2b8:	b25b      	sxtb	r3, r3
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	b25b      	sxtb	r3, r3
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	69ba      	ldr	r2, [r7, #24]
 800a2c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a2cc:	e079      	b.n	800a3c2 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	0a1b      	lsrs	r3, r3, #8
 800a2d8:	4413      	add	r3, r2
 800a2da:	4619      	mov	r1, r3
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f7ff fdb6 	bl	8009e4e <move_window>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2e6:	7ffb      	ldrb	r3, [r7, #31]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d167      	bne.n	800a3bc <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	005b      	lsls	r3, r3, #1
 800a2f0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	701a      	strb	r2, [r3, #0]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	b29b      	uxth	r3, r3
 800a306:	0a1b      	lsrs	r3, r3, #8
 800a308:	b29a      	uxth	r2, r3
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	3301      	adds	r3, #1
 800a30e:	b2d2      	uxtb	r2, r2
 800a310:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a31a:	e052      	b.n	800a3c2 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	09db      	lsrs	r3, r3, #7
 800a326:	4413      	add	r3, r2
 800a328:	4619      	mov	r1, r3
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f7ff fd8f 	bl	8009e4e <move_window>
 800a330:	4603      	mov	r3, r0
 800a332:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a334:	7ffb      	ldrb	r3, [r7, #31]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d142      	bne.n	800a3c0 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	4413      	add	r3, r2
 800a346:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	3303      	adds	r3, #3
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	061a      	lsls	r2, r3, #24
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	3302      	adds	r3, #2
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	041b      	lsls	r3, r3, #16
 800a358:	4313      	orrs	r3, r2
 800a35a:	69ba      	ldr	r2, [r7, #24]
 800a35c:	3201      	adds	r2, #1
 800a35e:	7812      	ldrb	r2, [r2, #0]
 800a360:	0212      	lsls	r2, r2, #8
 800a362:	4313      	orrs	r3, r2
 800a364:	69ba      	ldr	r2, [r7, #24]
 800a366:	7812      	ldrb	r2, [r2, #0]
 800a368:	4313      	orrs	r3, r2
 800a36a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	4313      	orrs	r3, r2
 800a372:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	b2da      	uxtb	r2, r3
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	701a      	strb	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	b29b      	uxth	r3, r3
 800a380:	0a1b      	lsrs	r3, r3, #8
 800a382:	b29a      	uxth	r2, r3
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	3301      	adds	r3, #1
 800a388:	b2d2      	uxtb	r2, r2
 800a38a:	701a      	strb	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	0c1a      	lsrs	r2, r3, #16
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	3302      	adds	r3, #2
 800a394:	b2d2      	uxtb	r2, r2
 800a396:	701a      	strb	r2, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	0e1a      	lsrs	r2, r3, #24
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	3303      	adds	r3, #3
 800a3a0:	b2d2      	uxtb	r2, r2
 800a3a2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a3ac:	e009      	b.n	800a3c2 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	77fb      	strb	r3, [r7, #31]
 800a3b2:	e006      	b.n	800a3c2 <put_fat+0x20c>
			if (res != FR_OK) break;
 800a3b4:	bf00      	nop
 800a3b6:	e004      	b.n	800a3c2 <put_fat+0x20c>
			if (res != FR_OK) break;
 800a3b8:	bf00      	nop
 800a3ba:	e002      	b.n	800a3c2 <put_fat+0x20c>
			if (res != FR_OK) break;
 800a3bc:	bf00      	nop
 800a3be:	e000      	b.n	800a3c2 <put_fat+0x20c>
			if (res != FR_OK) break;
 800a3c0:	bf00      	nop
		}
	}

	return res;
 800a3c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3720      	adds	r7, #32
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d905      	bls.n	800a3e8 <remove_chain+0x1c>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d302      	bcc.n	800a3ee <remove_chain+0x22>
		res = FR_INT_ERR;
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	73fb      	strb	r3, [r7, #15]
 800a3ec:	e043      	b.n	800a476 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a3f2:	e036      	b.n	800a462 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7ff fe26 	bl	800a048 <get_fat>
 800a3fc:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d035      	beq.n	800a470 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	2b01      	cmp	r3, #1
 800a408:	d102      	bne.n	800a410 <remove_chain+0x44>
 800a40a:	2302      	movs	r3, #2
 800a40c:	73fb      	strb	r3, [r7, #15]
 800a40e:	e032      	b.n	800a476 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a416:	d102      	bne.n	800a41e <remove_chain+0x52>
 800a418:	2301      	movs	r3, #1
 800a41a:	73fb      	strb	r3, [r7, #15]
 800a41c:	e02b      	b.n	800a476 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a41e:	2200      	movs	r2, #0
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7ff fec7 	bl	800a1b6 <put_fat>
 800a428:	4603      	mov	r3, r0
 800a42a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a42c:	7bfb      	ldrb	r3, [r7, #15]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d120      	bne.n	800a474 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43c:	d00f      	beq.n	800a45e <remove_chain+0x92>
				fs->free_clust++;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a444:	1c5a      	adds	r2, r3, #1
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a452:	f043 0301 	orr.w	r3, r3, #1
 800a456:	b2da      	uxtb	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a468:	683a      	ldr	r2, [r7, #0]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d3c2      	bcc.n	800a3f4 <remove_chain+0x28>
 800a46e:	e002      	b.n	800a476 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800a470:	bf00      	nop
 800a472:	e000      	b.n	800a476 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800a474:	bf00      	nop
		}
	}

	return res;
 800a476:	7bfb      	ldrb	r3, [r7, #15]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10f      	bne.n	800a4b0 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a496:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d005      	beq.n	800a4aa <create_chain+0x2a>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d31c      	bcc.n	800a4e4 <create_chain+0x64>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	613b      	str	r3, [r7, #16]
 800a4ae:	e019      	b.n	800a4e4 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a4b0:	6839      	ldr	r1, [r7, #0]
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7ff fdc8 	bl	800a048 <get_fat>
 800a4b8:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d801      	bhi.n	800a4c4 <create_chain+0x44>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e076      	b.n	800a5b2 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ca:	d101      	bne.n	800a4d0 <create_chain+0x50>
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	e070      	b.n	800a5b2 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d201      	bcs.n	800a4e0 <create_chain+0x60>
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	e068      	b.n	800a5b2 <create_chain+0x132>
		scl = clst;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d307      	bcc.n	800a50a <create_chain+0x8a>
			ncl = 2;
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	429a      	cmp	r2, r3
 800a504:	d901      	bls.n	800a50a <create_chain+0x8a>
 800a506:	2300      	movs	r3, #0
 800a508:	e053      	b.n	800a5b2 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a50a:	6979      	ldr	r1, [r7, #20]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7ff fd9b 	bl	800a048 <get_fat>
 800a512:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00e      	beq.n	800a538 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a520:	d002      	beq.n	800a528 <create_chain+0xa8>
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d101      	bne.n	800a52c <create_chain+0xac>
			return cs;
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	e042      	b.n	800a5b2 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	429a      	cmp	r2, r3
 800a532:	d1d9      	bne.n	800a4e8 <create_chain+0x68>
 800a534:	2300      	movs	r3, #0
 800a536:	e03c      	b.n	800a5b2 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800a538:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a53a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a53e:	6979      	ldr	r1, [r7, #20]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f7ff fe38 	bl	800a1b6 <put_fat>
 800a546:	4603      	mov	r3, r0
 800a548:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a54a:	7bfb      	ldrb	r3, [r7, #15]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d109      	bne.n	800a564 <create_chain+0xe4>
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d006      	beq.n	800a564 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f7ff fe2b 	bl	800a1b6 <put_fat>
 800a560:	4603      	mov	r3, r0
 800a562:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a564:	7bfb      	ldrb	r3, [r7, #15]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d11a      	bne.n	800a5a0 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57c:	d018      	beq.n	800a5b0 <create_chain+0x130>
			fs->free_clust--;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a584:	1e5a      	subs	r2, r3, #1
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a592:	f043 0301 	orr.w	r3, r3, #1
 800a596:	b2da      	uxtb	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800a59e:	e007      	b.n	800a5b0 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d102      	bne.n	800a5ac <create_chain+0x12c>
 800a5a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5aa:	e000      	b.n	800a5ae <create_chain+0x12e>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a5b0:	697b      	ldr	r3, [r7, #20]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3718      	adds	r7, #24
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b087      	sub	sp, #28
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	0a5b      	lsrs	r3, r3, #9
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a5d8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a5dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	1d1a      	adds	r2, r3, #4
 800a5e6:	613a      	str	r2, [r7, #16]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d101      	bne.n	800a5f6 <clmt_clust+0x3c>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	e010      	b.n	800a618 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d307      	bcc.n	800a60e <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	617b      	str	r3, [r7, #20]
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	3304      	adds	r3, #4
 800a60a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a60c:	e7e9      	b.n	800a5e2 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800a60e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	4413      	add	r3, r2
}
 800a618:	4618      	mov	r0, r3
 800a61a:	371c      	adds	r7, #28
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	b29a      	uxth	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a63e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d007      	beq.n	800a656 <dir_sdi+0x32>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a64c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a650:	697a      	ldr	r2, [r7, #20]
 800a652:	429a      	cmp	r2, r3
 800a654:	d301      	bcc.n	800a65a <dir_sdi+0x36>
		return FR_INT_ERR;
 800a656:	2302      	movs	r3, #2
 800a658:	e074      	b.n	800a744 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10c      	bne.n	800a67a <dir_sdi+0x56>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a666:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a66a:	2b03      	cmp	r3, #3
 800a66c:	d105      	bne.n	800a67a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a674:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a678:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d111      	bne.n	800a6a4 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a686:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a68a:	461a      	mov	r2, r3
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	4293      	cmp	r3, r2
 800a690:	d301      	bcc.n	800a696 <dir_sdi+0x72>
			return FR_INT_ERR;
 800a692:	2302      	movs	r3, #2
 800a694:	e056      	b.n	800a744 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a69c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a6a0:	613b      	str	r3, [r7, #16]
 800a6a2:	e032      	b.n	800a70a <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6aa:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a6ae:	011b      	lsls	r3, r3, #4
 800a6b0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a6b2:	e01e      	b.n	800a6f2 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6ba:	6979      	ldr	r1, [r7, #20]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7ff fcc3 	bl	800a048 <get_fat>
 800a6c2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ca:	d101      	bne.n	800a6d0 <dir_sdi+0xac>
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e039      	b.n	800a744 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d907      	bls.n	800a6e6 <dir_sdi+0xc2>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d301      	bcc.n	800a6ea <dir_sdi+0xc6>
				return FR_INT_ERR;
 800a6e6:	2302      	movs	r3, #2
 800a6e8:	e02c      	b.n	800a744 <dir_sdi+0x120>
			idx -= ic;
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a6f2:	683a      	ldr	r2, [r7, #0]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d2dc      	bcs.n	800a6b4 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a700:	6979      	ldr	r1, [r7, #20]
 800a702:	4618      	mov	r0, r3
 800a704:	f7ff fc7e 	bl	800a004 <clust2sect>
 800a708:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d101      	bne.n	800a71c <dir_sdi+0xf8>
 800a718:	2302      	movs	r3, #2
 800a71a:	e013      	b.n	800a744 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	091a      	lsrs	r2, r3, #4
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	441a      	add	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a730:	461a      	mov	r2, r3
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	f003 030f 	and.w	r3, r3, #15
 800a738:	015b      	lsls	r3, r3, #5
 800a73a:	441a      	add	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a74c:	b590      	push	{r4, r7, lr}
 800a74e:	b087      	sub	sp, #28
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800a75c:	3301      	adds	r3, #1
 800a75e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	b29b      	uxth	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	d004      	beq.n	800a772 <dir_next+0x26>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <dir_next+0x2a>
		return FR_NO_FILE;
 800a772:	2304      	movs	r3, #4
 800a774:	e0dd      	b.n	800a932 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f003 030f 	and.w	r3, r3, #15
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f040 80c6 	bne.w	800a90e <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a788:	1c5a      	adds	r2, r3, #1
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10b      	bne.n	800a7b2 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7a0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	f0c0 80b0 	bcc.w	800a90e <dir_next+0x1c2>
				return FR_NO_FILE;
 800a7ae:	2304      	movs	r3, #4
 800a7b0:	e0bf      	b.n	800a932 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	091b      	lsrs	r3, r3, #4
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a7bc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a7c0:	3a01      	subs	r2, #1
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f040 80a2 	bne.w	800a90e <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	4610      	mov	r0, r2
 800a7da:	f7ff fc35 	bl	800a048 <get_fat>
 800a7de:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d801      	bhi.n	800a7ea <dir_next+0x9e>
 800a7e6:	2302      	movs	r3, #2
 800a7e8:	e0a3      	b.n	800a932 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f0:	d101      	bne.n	800a7f6 <dir_next+0xaa>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e09d      	b.n	800a932 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a800:	697a      	ldr	r2, [r7, #20]
 800a802:	429a      	cmp	r2, r3
 800a804:	d374      	bcc.n	800a8f0 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d101      	bne.n	800a810 <dir_next+0xc4>
 800a80c:	2304      	movs	r3, #4
 800a80e:	e090      	b.n	800a932 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a81c:	4619      	mov	r1, r3
 800a81e:	4610      	mov	r0, r2
 800a820:	f7ff fe2e 	bl	800a480 <create_chain>
 800a824:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <dir_next+0xe4>
 800a82c:	2307      	movs	r3, #7
 800a82e:	e080      	b.n	800a932 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d101      	bne.n	800a83a <dir_next+0xee>
 800a836:	2302      	movs	r3, #2
 800a838:	e07b      	b.n	800a932 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a840:	d101      	bne.n	800a846 <dir_next+0xfa>
 800a842:	2301      	movs	r3, #1
 800a844:	e075      	b.n	800a932 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7ff fab5 	bl	8009dbc <sync_window>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d001      	beq.n	800a85c <dir_next+0x110>
 800a858:	2301      	movs	r3, #1
 800a85a:	e06a      	b.n	800a932 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a862:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a866:	2100      	movs	r1, #0
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff f8d7 	bl	8009a1c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800a87a:	6979      	ldr	r1, [r7, #20]
 800a87c:	4610      	mov	r0, r2
 800a87e:	f7ff fbc1 	bl	800a004 <clust2sect>
 800a882:	4603      	mov	r3, r0
 800a884:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a888:	2300      	movs	r3, #0
 800a88a:	613b      	str	r3, [r7, #16]
 800a88c:	e01b      	b.n	800a8c6 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a894:	2201      	movs	r2, #1
 800a896:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7ff fa8b 	bl	8009dbc <sync_window>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <dir_next+0x164>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e040      	b.n	800a932 <dir_next+0x1e6>
						dp->fs->winsect++;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8b6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800a8ba:	3201      	adds	r2, #1
 800a8bc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	613b      	str	r3, [r7, #16]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8cc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d3da      	bcc.n	800a88e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8de:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	1a8a      	subs	r2, r1, r2
 800a8ec:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	697a      	ldr	r2, [r7, #20]
 800a8f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8fe:	6979      	ldr	r1, [r7, #20]
 800a900:	4618      	mov	r0, r3
 800a902:	f7ff fb7f 	bl	800a004 <clust2sect>
 800a906:	4602      	mov	r2, r0
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	b29a      	uxth	r2, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a91e:	461a      	mov	r2, r3
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f003 030f 	and.w	r3, r3, #15
 800a926:	015b      	lsls	r3, r3, #5
 800a928:	441a      	add	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	371c      	adds	r7, #28
 800a936:	46bd      	mov	sp, r7
 800a938:	bd90      	pop	{r4, r7, pc}

0800a93a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800a944:	2100      	movs	r1, #0
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f7ff fe6c 	bl	800a624 <dir_sdi>
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d131      	bne.n	800a9ba <dir_alloc+0x80>
		n = 0;
 800a956:	2300      	movs	r3, #0
 800a958:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a966:	4619      	mov	r1, r3
 800a968:	4610      	mov	r0, r2
 800a96a:	f7ff fa70 	bl	8009e4e <move_window>
 800a96e:	4603      	mov	r3, r0
 800a970:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a972:	7bfb      	ldrb	r3, [r7, #15]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d11f      	bne.n	800a9b8 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	2be5      	cmp	r3, #229	; 0xe5
 800a982:	d005      	beq.n	800a990 <dir_alloc+0x56>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d107      	bne.n	800a9a0 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	3301      	adds	r3, #1
 800a994:	60bb      	str	r3, [r7, #8]
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d102      	bne.n	800a9a4 <dir_alloc+0x6a>
 800a99e:	e00c      	b.n	800a9ba <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7ff fed0 	bl	800a74c <dir_next>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d0d1      	beq.n	800a95a <dir_alloc+0x20>
 800a9b6:	e000      	b.n	800a9ba <dir_alloc+0x80>
			if (res != FR_OK) break;
 800a9b8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a9ba:	7bfb      	ldrb	r3, [r7, #15]
 800a9bc:	2b04      	cmp	r3, #4
 800a9be:	d101      	bne.n	800a9c4 <dir_alloc+0x8a>
 800a9c0:	2307      	movs	r3, #7
 800a9c2:	73fb      	strb	r3, [r7, #15]
	return res;
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b085      	sub	sp, #20
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	331b      	adds	r3, #27
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	021b      	lsls	r3, r3, #8
 800a9e0:	b21a      	sxth	r2, r3
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	331a      	adds	r3, #26
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	b21b      	sxth	r3, r3
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	b21b      	sxth	r3, r3
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a9f8:	2b03      	cmp	r3, #3
 800a9fa:	d10f      	bne.n	800aa1c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	3315      	adds	r3, #21
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	021b      	lsls	r3, r3, #8
 800aa04:	b21a      	sxth	r2, r3
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	3314      	adds	r3, #20
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	b21b      	sxth	r3, r3
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	b21b      	sxth	r3, r3
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	041b      	lsls	r3, r3, #16
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	60fb      	str	r3, [r7, #12]

	return cl;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3714      	adds	r7, #20
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b083      	sub	sp, #12
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	331a      	adds	r3, #26
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	b2d2      	uxtb	r2, r2
 800aa3c:	701a      	strb	r2, [r3, #0]
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	0a1b      	lsrs	r3, r3, #8
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	331b      	adds	r3, #27
 800aa4a:	b2d2      	uxtb	r2, r2
 800aa4c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	0c1a      	lsrs	r2, r3, #16
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	3314      	adds	r3, #20
 800aa56:	b2d2      	uxtb	r2, r2
 800aa58:	701a      	strb	r2, [r3, #0]
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	0c1b      	lsrs	r3, r3, #16
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	0a1b      	lsrs	r3, r3, #8
 800aa62:	b29a      	uxth	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	3315      	adds	r3, #21
 800aa68:	b2d2      	uxtb	r2, r2
 800aa6a:	701a      	strb	r2, [r3, #0]
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa8a:	1e5a      	subs	r2, r3, #1
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	4413      	add	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4413      	add	r3, r2
 800aa96:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	613b      	str	r3, [r7, #16]
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800aaa0:	4a2b      	ldr	r2, [pc, #172]	; (800ab50 <cmp_lfn+0xd8>)
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	4413      	add	r3, r2
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	021b      	lsls	r3, r3, #8
 800aab2:	b21a      	sxth	r2, r3
 800aab4:	4926      	ldr	r1, [pc, #152]	; (800ab50 <cmp_lfn+0xd8>)
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	440b      	add	r3, r1
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	4619      	mov	r1, r3
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	440b      	add	r3, r1
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	b21b      	sxth	r3, r3
 800aac6:	4313      	orrs	r3, r2
 800aac8:	b21b      	sxth	r3, r3
 800aaca:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800aacc:	89fb      	ldrh	r3, [r7, #14]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d019      	beq.n	800ab06 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800aad2:	89bb      	ldrh	r3, [r7, #12]
 800aad4:	4618      	mov	r0, r3
 800aad6:	f001 fed3 	bl	800c880 <ff_wtoupper>
 800aada:	4603      	mov	r3, r0
 800aadc:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	2bfe      	cmp	r3, #254	; 0xfe
 800aae2:	d80e      	bhi.n	800ab02 <cmp_lfn+0x8a>
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	1c5a      	adds	r2, r3, #1
 800aae8:	617a      	str	r2, [r7, #20]
 800aaea:	005b      	lsls	r3, r3, #1
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	4413      	add	r3, r2
 800aaf0:	881b      	ldrh	r3, [r3, #0]
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f001 fec4 	bl	800c880 <ff_wtoupper>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	461a      	mov	r2, r3
 800aafc:	89fb      	ldrh	r3, [r7, #14]
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d008      	beq.n	800ab14 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800ab02:	2300      	movs	r3, #0
 800ab04:	e01f      	b.n	800ab46 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800ab06:	89bb      	ldrh	r3, [r7, #12]
 800ab08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d001      	beq.n	800ab14 <cmp_lfn+0x9c>
 800ab10:	2300      	movs	r3, #0
 800ab12:	e018      	b.n	800ab46 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	3301      	adds	r3, #1
 800ab18:	613b      	str	r3, [r7, #16]
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2b0c      	cmp	r3, #12
 800ab1e:	d9bf      	bls.n	800aaa0 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00b      	beq.n	800ab44 <cmp_lfn+0xcc>
 800ab2c:	89fb      	ldrh	r3, [r7, #14]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d008      	beq.n	800ab44 <cmp_lfn+0xcc>
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	005b      	lsls	r3, r3, #1
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	4413      	add	r3, r2
 800ab3a:	881b      	ldrh	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <cmp_lfn+0xcc>
		return 0;
 800ab40:	2300      	movs	r3, #0
 800ab42:	e000      	b.n	800ab46 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800ab44:	2301      	movs	r3, #1
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3718      	adds	r7, #24
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	08013e10 	.word	0x08013e10

0800ab54 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b089      	sub	sp, #36	; 0x24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	4611      	mov	r1, r2
 800ab60:	461a      	mov	r2, r3
 800ab62:	460b      	mov	r3, r1
 800ab64:	71fb      	strb	r3, [r7, #7]
 800ab66:	4613      	mov	r3, r2
 800ab68:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	330d      	adds	r3, #13
 800ab6e:	79ba      	ldrb	r2, [r7, #6]
 800ab70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	330b      	adds	r3, #11
 800ab76:	220f      	movs	r2, #15
 800ab78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	330c      	adds	r3, #12
 800ab7e:	2200      	movs	r2, #0
 800ab80:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	331a      	adds	r3, #26
 800ab86:	2200      	movs	r2, #0
 800ab88:	701a      	strb	r2, [r3, #0]
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	331b      	adds	r3, #27
 800ab8e:	2200      	movs	r2, #0
 800ab90:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800ab92:	79fb      	ldrb	r3, [r7, #7]
 800ab94:	1e5a      	subs	r2, r3, #1
 800ab96:	4613      	mov	r3, r2
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	4413      	add	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	82fb      	strh	r3, [r7, #22]
 800aba6:	2300      	movs	r3, #0
 800aba8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800abaa:	8afb      	ldrh	r3, [r7, #22]
 800abac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d007      	beq.n	800abc4 <fit_lfn+0x70>
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	1c5a      	adds	r2, r3, #1
 800abb8:	61fa      	str	r2, [r7, #28]
 800abba:	005b      	lsls	r3, r3, #1
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	4413      	add	r3, r2
 800abc0:	881b      	ldrh	r3, [r3, #0]
 800abc2:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800abc4:	4a1d      	ldr	r2, [pc, #116]	; (800ac3c <fit_lfn+0xe8>)
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	4413      	add	r3, r2
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	461a      	mov	r2, r3
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	4413      	add	r3, r2
 800abd2:	8afa      	ldrh	r2, [r7, #22]
 800abd4:	b2d2      	uxtb	r2, r2
 800abd6:	701a      	strb	r2, [r3, #0]
 800abd8:	8afb      	ldrh	r3, [r7, #22]
 800abda:	0a1b      	lsrs	r3, r3, #8
 800abdc:	b299      	uxth	r1, r3
 800abde:	4a17      	ldr	r2, [pc, #92]	; (800ac3c <fit_lfn+0xe8>)
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	4413      	add	r3, r2
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	3301      	adds	r3, #1
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	4413      	add	r3, r2
 800abec:	b2ca      	uxtb	r2, r1
 800abee:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800abf0:	8afb      	ldrh	r3, [r7, #22]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d102      	bne.n	800abfc <fit_lfn+0xa8>
 800abf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abfa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	3301      	adds	r3, #1
 800ac00:	61bb      	str	r3, [r7, #24]
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	2b0c      	cmp	r3, #12
 800ac06:	d9d0      	bls.n	800abaa <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800ac08:	8afb      	ldrh	r3, [r7, #22]
 800ac0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d006      	beq.n	800ac20 <fit_lfn+0xcc>
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	005b      	lsls	r3, r3, #1
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4413      	add	r3, r2
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d103      	bne.n	800ac28 <fit_lfn+0xd4>
 800ac20:	79fb      	ldrb	r3, [r7, #7]
 800ac22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac26:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	79fa      	ldrb	r2, [r7, #7]
 800ac2c:	701a      	strb	r2, [r3, #0]
}
 800ac2e:	bf00      	nop
 800ac30:	3724      	adds	r7, #36	; 0x24
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	08013e10 	.word	0x08013e10

0800ac40 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b08c      	sub	sp, #48	; 0x30
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
 800ac4c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ac4e:	220b      	movs	r2, #11
 800ac50:	68b9      	ldr	r1, [r7, #8]
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f7fe fec4 	bl	80099e0 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	2b05      	cmp	r3, #5
 800ac5c:	d92b      	bls.n	800acb6 <gen_numname+0x76>
		sr = seq;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ac62:	e022      	b.n	800acaa <gen_numname+0x6a>
			wc = *lfn++;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	1c9a      	adds	r2, r3, #2
 800ac68:	607a      	str	r2, [r7, #4]
 800ac6a:	881b      	ldrh	r3, [r3, #0]
 800ac6c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ac6e:	2300      	movs	r3, #0
 800ac70:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac72:	e017      	b.n	800aca4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	005a      	lsls	r2, r3, #1
 800ac78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac7a:	f003 0301 	and.w	r3, r3, #1
 800ac7e:	4413      	add	r3, r2
 800ac80:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ac82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac84:	085b      	lsrs	r3, r3, #1
 800ac86:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d005      	beq.n	800ac9e <gen_numname+0x5e>
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ac98:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ac9c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ac9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca0:	3301      	adds	r3, #1
 800aca2:	62bb      	str	r3, [r7, #40]	; 0x28
 800aca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca6:	2b0f      	cmp	r3, #15
 800aca8:	d9e4      	bls.n	800ac74 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	881b      	ldrh	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1d8      	bne.n	800ac64 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800acb6:	2307      	movs	r3, #7
 800acb8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	f003 030f 	and.w	r3, r3, #15
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	3330      	adds	r3, #48	; 0x30
 800acc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800acca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acce:	2b39      	cmp	r3, #57	; 0x39
 800acd0:	d904      	bls.n	800acdc <gen_numname+0x9c>
 800acd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acd6:	3307      	adds	r3, #7
 800acd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acde:	1e5a      	subs	r2, r3, #1
 800ace0:	62ba      	str	r2, [r7, #40]	; 0x28
 800ace2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ace6:	4413      	add	r3, r2
 800ace8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800acec:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	091b      	lsrs	r3, r3, #4
 800acf4:	603b      	str	r3, [r7, #0]
	} while (seq);
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1de      	bne.n	800acba <gen_numname+0x7a>
	ns[i] = '~';
 800acfc:	f107 0214 	add.w	r2, r7, #20
 800ad00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad02:	4413      	add	r3, r2
 800ad04:	227e      	movs	r2, #126	; 0x7e
 800ad06:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ad08:	2300      	movs	r3, #0
 800ad0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad0c:	e002      	b.n	800ad14 <gen_numname+0xd4>
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	3301      	adds	r3, #1
 800ad12:	627b      	str	r3, [r7, #36]	; 0x24
 800ad14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d205      	bcs.n	800ad28 <gen_numname+0xe8>
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad20:	4413      	add	r3, r2
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	2b20      	cmp	r3, #32
 800ad26:	d1f2      	bne.n	800ad0e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	2b07      	cmp	r3, #7
 800ad2c:	d808      	bhi.n	800ad40 <gen_numname+0x100>
 800ad2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad30:	1c5a      	adds	r2, r3, #1
 800ad32:	62ba      	str	r2, [r7, #40]	; 0x28
 800ad34:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ad38:	4413      	add	r3, r2
 800ad3a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ad3e:	e000      	b.n	800ad42 <gen_numname+0x102>
 800ad40:	2120      	movs	r1, #32
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad44:	1c5a      	adds	r2, r3, #1
 800ad46:	627a      	str	r2, [r7, #36]	; 0x24
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	460a      	mov	r2, r1
 800ad4e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	2b07      	cmp	r3, #7
 800ad54:	d9e8      	bls.n	800ad28 <gen_numname+0xe8>
}
 800ad56:	bf00      	nop
 800ad58:	3730      	adds	r7, #48	; 0x30
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ad5e:	b480      	push	{r7}
 800ad60:	b085      	sub	sp, #20
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ad6a:	230b      	movs	r3, #11
 800ad6c:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800ad6e:	7bfb      	ldrb	r3, [r7, #15]
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	0852      	lsrs	r2, r2, #1
 800ad74:	01db      	lsls	r3, r3, #7
 800ad76:	4313      	orrs	r3, r2
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	1c59      	adds	r1, r3, #1
 800ad7e:	6079      	str	r1, [r7, #4]
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	4413      	add	r3, r2
 800ad84:	73fb      	strb	r3, [r7, #15]
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	60bb      	str	r3, [r7, #8]
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1ed      	bne.n	800ad6e <sum_sfn+0x10>
	return sum;
 800ad92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3714      	adds	r7, #20
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ada8:	2100      	movs	r1, #0
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7ff fc3a 	bl	800a624 <dir_sdi>
 800adb0:	4603      	mov	r3, r0
 800adb2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800adb4:	7dfb      	ldrb	r3, [r7, #23]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <dir_find+0x1e>
 800adba:	7dfb      	ldrb	r3, [r7, #23]
 800adbc:	e0ac      	b.n	800af18 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800adbe:	23ff      	movs	r3, #255	; 0xff
 800adc0:	753b      	strb	r3, [r7, #20]
 800adc2:	7d3b      	ldrb	r3, [r7, #20]
 800adc4:	757b      	strb	r3, [r7, #21]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adcc:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800addc:	4619      	mov	r1, r3
 800adde:	4610      	mov	r0, r2
 800ade0:	f7ff f835 	bl	8009e4e <move_window>
 800ade4:	4603      	mov	r3, r0
 800ade6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ade8:	7dfb      	ldrb	r3, [r7, #23]
 800adea:	2b00      	cmp	r3, #0
 800adec:	f040 808e 	bne.w	800af0c <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800adf6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800adfe:	7dbb      	ldrb	r3, [r7, #22]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <dir_find+0x6a>
 800ae04:	2304      	movs	r3, #4
 800ae06:	75fb      	strb	r3, [r7, #23]
 800ae08:	e085      	b.n	800af16 <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	330b      	adds	r3, #11
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae14:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ae16:	7dbb      	ldrb	r3, [r7, #22]
 800ae18:	2be5      	cmp	r3, #229	; 0xe5
 800ae1a:	d007      	beq.n	800ae2c <dir_find+0x8c>
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
 800ae1e:	f003 0308 	and.w	r3, r3, #8
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00a      	beq.n	800ae3c <dir_find+0x9c>
 800ae26:	7bfb      	ldrb	r3, [r7, #15]
 800ae28:	2b0f      	cmp	r3, #15
 800ae2a:	d007      	beq.n	800ae3c <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ae2c:	23ff      	movs	r3, #255	; 0xff
 800ae2e:	757b      	strb	r3, [r7, #21]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae36:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
 800ae3a:	e05c      	b.n	800aef6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ae3c:	7bfb      	ldrb	r3, [r7, #15]
 800ae3e:	2b0f      	cmp	r3, #15
 800ae40:	d133      	bne.n	800aeaa <dir_find+0x10a>
				if (dp->lfn) {
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d054      	beq.n	800aef6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ae4c:	7dbb      	ldrb	r3, [r7, #22]
 800ae4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00e      	beq.n	800ae74 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	7b5b      	ldrb	r3, [r3, #13]
 800ae5a:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800ae5c:	7dbb      	ldrb	r3, [r7, #22]
 800ae5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae62:	75bb      	strb	r3, [r7, #22]
 800ae64:	7dbb      	ldrb	r3, [r7, #22]
 800ae66:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800ae74:	7dba      	ldrb	r2, [r7, #22]
 800ae76:	7d7b      	ldrb	r3, [r7, #21]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d113      	bne.n	800aea4 <dir_find+0x104>
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	330d      	adds	r3, #13
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	7d3a      	ldrb	r2, [r7, #20]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d10d      	bne.n	800aea4 <dir_find+0x104>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ae8e:	6939      	ldr	r1, [r7, #16]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7ff fdf1 	bl	800aa78 <cmp_lfn>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d003      	beq.n	800aea4 <dir_find+0x104>
 800ae9c:	7d7b      	ldrb	r3, [r7, #21]
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	e000      	b.n	800aea6 <dir_find+0x106>
 800aea4:	23ff      	movs	r3, #255	; 0xff
 800aea6:	757b      	strb	r3, [r7, #21]
 800aea8:	e025      	b.n	800aef6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800aeaa:	7d7b      	ldrb	r3, [r7, #21]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d107      	bne.n	800aec0 <dir_find+0x120>
 800aeb0:	6938      	ldr	r0, [r7, #16]
 800aeb2:	f7ff ff54 	bl	800ad5e <sum_sfn>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	461a      	mov	r2, r3
 800aeba:	7d3b      	ldrb	r3, [r7, #20]
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d027      	beq.n	800af10 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aec6:	330b      	adds	r3, #11
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	f003 0301 	and.w	r3, r3, #1
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10a      	bne.n	800aee8 <dir_find+0x148>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aed8:	220b      	movs	r2, #11
 800aeda:	4619      	mov	r1, r3
 800aedc:	6938      	ldr	r0, [r7, #16]
 800aede:	f7fe fdb7 	bl	8009a50 <mem_cmp>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d015      	beq.n	800af14 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800aee8:	23ff      	movs	r3, #255	; 0xff
 800aeea:	757b      	strb	r3, [r7, #21]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aef2:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800aef6:	2100      	movs	r1, #0
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f7ff fc27 	bl	800a74c <dir_next>
 800aefe:	4603      	mov	r3, r0
 800af00:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800af02:	7dfb      	ldrb	r3, [r7, #23]
 800af04:	2b00      	cmp	r3, #0
 800af06:	f43f af63 	beq.w	800add0 <dir_find+0x30>
 800af0a:	e004      	b.n	800af16 <dir_find+0x176>
		if (res != FR_OK) break;
 800af0c:	bf00      	nop
 800af0e:	e002      	b.n	800af16 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800af10:	bf00      	nop
 800af12:	e000      	b.n	800af16 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800af14:	bf00      	nop

	return res;
 800af16:	7dfb      	ldrb	r3, [r7, #23]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3718      	adds	r7, #24
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b08c      	sub	sp, #48	; 0x30
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800af2e:	623b      	str	r3, [r7, #32]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800af36:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800af38:	f107 030c 	add.w	r3, r7, #12
 800af3c:	220c      	movs	r2, #12
 800af3e:	6a39      	ldr	r1, [r7, #32]
 800af40:	4618      	mov	r0, r3
 800af42:	f7fe fd4d 	bl	80099e0 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800af46:	7dfb      	ldrb	r3, [r7, #23]
 800af48:	f003 0301 	and.w	r3, r3, #1
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d037      	beq.n	800afc0 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800af50:	6a3b      	ldr	r3, [r7, #32]
 800af52:	330b      	adds	r3, #11
 800af54:	2200      	movs	r2, #0
 800af56:	701a      	strb	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		for (n = 1; n < 100; n++) {
 800af60:	2301      	movs	r3, #1
 800af62:	62bb      	str	r3, [r7, #40]	; 0x28
 800af64:	e013      	b.n	800af8e <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800af66:	f107 010c 	add.w	r1, r7, #12
 800af6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6c:	69fa      	ldr	r2, [r7, #28]
 800af6e:	6a38      	ldr	r0, [r7, #32]
 800af70:	f7ff fe66 	bl	800ac40 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f7ff ff13 	bl	800ada0 <dir_find>
 800af7a:	4603      	mov	r3, r0
 800af7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800af80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af84:	2b00      	cmp	r3, #0
 800af86:	d106      	bne.n	800af96 <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 800af88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8a:	3301      	adds	r3, #1
 800af8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af90:	2b63      	cmp	r3, #99	; 0x63
 800af92:	d9e8      	bls.n	800af66 <dir_register+0x46>
 800af94:	e000      	b.n	800af98 <dir_register+0x78>
			if (res != FR_OK) break;
 800af96:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800af98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9a:	2b64      	cmp	r3, #100	; 0x64
 800af9c:	d101      	bne.n	800afa2 <dir_register+0x82>
 800af9e:	2307      	movs	r3, #7
 800afa0:	e0c5      	b.n	800b12e <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800afa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afa6:	2b04      	cmp	r3, #4
 800afa8:	d002      	beq.n	800afb0 <dir_register+0x90>
 800afaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afae:	e0be      	b.n	800b12e <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800afb0:	6a3b      	ldr	r3, [r7, #32]
 800afb2:	330b      	adds	r3, #11
 800afb4:	7dfa      	ldrb	r2, [r7, #23]
 800afb6:	701a      	strb	r2, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	69fa      	ldr	r2, [r7, #28]
 800afbc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800afc0:	7dfb      	ldrb	r3, [r7, #23]
 800afc2:	f003 0302 	and.w	r3, r3, #2
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d014      	beq.n	800aff4 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800afca:	2300      	movs	r3, #0
 800afcc:	62bb      	str	r3, [r7, #40]	; 0x28
 800afce:	e002      	b.n	800afd6 <dir_register+0xb6>
 800afd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd2:	3301      	adds	r3, #1
 800afd4:	62bb      	str	r3, [r7, #40]	; 0x28
 800afd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd8:	005b      	lsls	r3, r3, #1
 800afda:	69fa      	ldr	r2, [r7, #28]
 800afdc:	4413      	add	r3, r2
 800afde:	881b      	ldrh	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1f5      	bne.n	800afd0 <dir_register+0xb0>
		nent = (n + 25) / 13;
 800afe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe6:	3319      	adds	r3, #25
 800afe8:	4a53      	ldr	r2, [pc, #332]	; (800b138 <dir_register+0x218>)
 800afea:	fba2 2303 	umull	r2, r3, r2, r3
 800afee:	089b      	lsrs	r3, r3, #2
 800aff0:	627b      	str	r3, [r7, #36]	; 0x24
 800aff2:	e001      	b.n	800aff8 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800aff4:	2301      	movs	r3, #1
 800aff6:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800aff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7ff fc9d 	bl	800a93a <dir_alloc>
 800b000:	4603      	mov	r3, r0
 800b002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b006:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d153      	bne.n	800b0b6 <dir_register+0x196>
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	3b01      	subs	r3, #1
 800b012:	627b      	str	r3, [r7, #36]	; 0x24
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	2b00      	cmp	r3, #0
 800b018:	d04d      	beq.n	800b0b6 <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800b020:	461a      	mov	r2, r3
 800b022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	4619      	mov	r1, r3
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7ff fafb 	bl	800a624 <dir_sdi>
 800b02e:	4603      	mov	r3, r0
 800b030:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b034:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d13c      	bne.n	800b0b6 <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b042:	4618      	mov	r0, r3
 800b044:	f7ff fe8b 	bl	800ad5e <sum_sfn>
 800b048:	4603      	mov	r3, r0
 800b04a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b058:	4619      	mov	r1, r3
 800b05a:	4610      	mov	r0, r2
 800b05c:	f7fe fef7 	bl	8009e4e <move_window>
 800b060:	4603      	mov	r3, r0
 800b062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b066:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d122      	bne.n	800b0b4 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 800b07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	7efb      	ldrb	r3, [r7, #27]
 800b080:	f7ff fd68 	bl	800ab54 <fit_lfn>
				dp->fs->wflag = 1;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 800b090:	2100      	movs	r1, #0
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7ff fb5a 	bl	800a74c <dir_next>
 800b098:	4603      	mov	r3, r0
 800b09a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b09e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d107      	bne.n	800b0b6 <dir_register+0x196>
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	627b      	str	r3, [r7, #36]	; 0x24
 800b0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1cc      	bne.n	800b04c <dir_register+0x12c>
 800b0b2:	e000      	b.n	800b0b6 <dir_register+0x196>
				if (res != FR_OK) break;
 800b0b4:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800b0b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d135      	bne.n	800b12a <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	f7fe febe 	bl	8009e4e <move_window>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b0d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d124      	bne.n	800b12a <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b0e6:	2220      	movs	r2, #32
 800b0e8:	2100      	movs	r1, #0
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fe fc96 	bl	8009a1c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b0fc:	220b      	movs	r2, #11
 800b0fe:	4619      	mov	r1, r3
 800b100:	f7fe fc6e 	bl	80099e0 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b10a:	330b      	adds	r3, #11
 800b10c:	781a      	ldrb	r2, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b114:	330c      	adds	r3, #12
 800b116:	f002 0218 	and.w	r2, r2, #24
 800b11a:	b2d2      	uxtb	r2, r2
 800b11c:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b124:	2201      	movs	r2, #1
 800b126:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800b12a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3730      	adds	r7, #48	; 0x30
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	4ec4ec4f 	.word	0x4ec4ec4f

0800b13c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b08a      	sub	sp, #40	; 0x28
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	613b      	str	r3, [r7, #16]
 800b14c:	e002      	b.n	800b154 <create_name+0x18>
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	3301      	adds	r3, #1
 800b152:	613b      	str	r3, [r7, #16]
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	2b2f      	cmp	r3, #47	; 0x2f
 800b15a:	d0f8      	beq.n	800b14e <create_name+0x12>
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	2b5c      	cmp	r3, #92	; 0x5c
 800b162:	d0f4      	beq.n	800b14e <create_name+0x12>
	lfn = dp->lfn;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b16a:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	617b      	str	r3, [r7, #20]
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	1c5a      	adds	r2, r3, #1
 800b178:	61ba      	str	r2, [r7, #24]
 800b17a:	693a      	ldr	r2, [r7, #16]
 800b17c:	4413      	add	r3, r2
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800b182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b184:	2b1f      	cmp	r3, #31
 800b186:	d92f      	bls.n	800b1e8 <create_name+0xac>
 800b188:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b18a:	2b2f      	cmp	r3, #47	; 0x2f
 800b18c:	d02c      	beq.n	800b1e8 <create_name+0xac>
 800b18e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b190:	2b5c      	cmp	r3, #92	; 0x5c
 800b192:	d029      	beq.n	800b1e8 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	2bfe      	cmp	r3, #254	; 0xfe
 800b198:	d901      	bls.n	800b19e <create_name+0x62>
			return FR_INVALID_NAME;
 800b19a:	2306      	movs	r3, #6
 800b19c:	e17b      	b.n	800b496 <create_name+0x35a>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b19e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b1a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1a6:	2101      	movs	r1, #1
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f001 fb2d 	bl	800c808 <ff_convert>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b1b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <create_name+0x80>
 800b1b8:	2306      	movs	r3, #6
 800b1ba:	e16c      	b.n	800b496 <create_name+0x35a>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800b1bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1be:	2b7f      	cmp	r3, #127	; 0x7f
 800b1c0:	d809      	bhi.n	800b1d6 <create_name+0x9a>
 800b1c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	48b6      	ldr	r0, [pc, #728]	; (800b4a0 <create_name+0x364>)
 800b1c8:	f7fe fc69 	bl	8009a9e <chk_chr>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <create_name+0x9a>
			return FR_INVALID_NAME;
 800b1d2:	2306      	movs	r3, #6
 800b1d4:	e15f      	b.n	800b496 <create_name+0x35a>
		lfn[di++] = w;					/* Store the Unicode character */
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	1c5a      	adds	r2, r3, #1
 800b1da:	617a      	str	r2, [r7, #20]
 800b1dc:	005b      	lsls	r3, r3, #1
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b1e4:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b1e6:	e7c5      	b.n	800b174 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b1e8:	693a      	ldr	r2, [r7, #16]
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	441a      	add	r2, r3
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800b1f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1f4:	2b1f      	cmp	r3, #31
 800b1f6:	d801      	bhi.n	800b1fc <create_name+0xc0>
 800b1f8:	2304      	movs	r3, #4
 800b1fa:	e000      	b.n	800b1fe <create_name+0xc2>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800b202:	e011      	b.n	800b228 <create_name+0xec>
		w = lfn[di - 1];
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b20a:	3b01      	subs	r3, #1
 800b20c:	005b      	lsls	r3, r3, #1
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	4413      	add	r3, r2
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b218:	2b20      	cmp	r3, #32
 800b21a:	d002      	beq.n	800b222 <create_name+0xe6>
 800b21c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b21e:	2b2e      	cmp	r3, #46	; 0x2e
 800b220:	d106      	bne.n	800b230 <create_name+0xf4>
		di--;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	3b01      	subs	r3, #1
 800b226:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1ea      	bne.n	800b204 <create_name+0xc8>
 800b22e:	e000      	b.n	800b232 <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 800b230:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d101      	bne.n	800b23c <create_name+0x100>
 800b238:	2306      	movs	r3, #6
 800b23a:	e12c      	b.n	800b496 <create_name+0x35a>

	lfn[di] = 0;						/* LFN is created */
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	005b      	lsls	r3, r3, #1
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	4413      	add	r3, r2
 800b244:	2200      	movs	r2, #0
 800b246:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b24e:	220b      	movs	r2, #11
 800b250:	2120      	movs	r1, #32
 800b252:	4618      	mov	r0, r3
 800b254:	f7fe fbe2 	bl	8009a1c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b258:	2300      	movs	r3, #0
 800b25a:	61bb      	str	r3, [r7, #24]
 800b25c:	e002      	b.n	800b264 <create_name+0x128>
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	3301      	adds	r3, #1
 800b262:	61bb      	str	r3, [r7, #24]
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	005b      	lsls	r3, r3, #1
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	4413      	add	r3, r2
 800b26c:	881b      	ldrh	r3, [r3, #0]
 800b26e:	2b20      	cmp	r3, #32
 800b270:	d0f5      	beq.n	800b25e <create_name+0x122>
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	005b      	lsls	r3, r3, #1
 800b276:	68fa      	ldr	r2, [r7, #12]
 800b278:	4413      	add	r3, r2
 800b27a:	881b      	ldrh	r3, [r3, #0]
 800b27c:	2b2e      	cmp	r3, #46	; 0x2e
 800b27e:	d0ee      	beq.n	800b25e <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d009      	beq.n	800b29a <create_name+0x15e>
 800b286:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b28a:	f043 0303 	orr.w	r3, r3, #3
 800b28e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b292:	e002      	b.n	800b29a <create_name+0x15e>
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	3b01      	subs	r3, #1
 800b298:	617b      	str	r3, [r7, #20]
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d009      	beq.n	800b2b4 <create_name+0x178>
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	005b      	lsls	r3, r3, #1
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	881b      	ldrh	r3, [r3, #0]
 800b2b0:	2b2e      	cmp	r3, #46	; 0x2e
 800b2b2:	d1ef      	bne.n	800b294 <create_name+0x158>

	b = i = 0; ni = 8;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	623b      	str	r3, [r7, #32]
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b2be:	2308      	movs	r3, #8
 800b2c0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	1c5a      	adds	r2, r3, #1
 800b2c6:	61ba      	str	r2, [r7, #24]
 800b2c8:	005b      	lsls	r3, r3, #1
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	881b      	ldrh	r3, [r3, #0]
 800b2d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b2d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f000 8090 	beq.w	800b3fa <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b2da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2dc:	2b20      	cmp	r3, #32
 800b2de:	d006      	beq.n	800b2ee <create_name+0x1b2>
 800b2e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2e2:	2b2e      	cmp	r3, #46	; 0x2e
 800b2e4:	d10a      	bne.n	800b2fc <create_name+0x1c0>
 800b2e6:	69ba      	ldr	r2, [r7, #24]
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d006      	beq.n	800b2fc <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 800b2ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2f2:	f043 0303 	orr.w	r3, r3, #3
 800b2f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b2fa:	e07d      	b.n	800b3f8 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b2fc:	6a3a      	ldr	r2, [r7, #32]
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	429a      	cmp	r2, r3
 800b302:	d203      	bcs.n	800b30c <create_name+0x1d0>
 800b304:	69ba      	ldr	r2, [r7, #24]
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d123      	bne.n	800b354 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	2b0b      	cmp	r3, #11
 800b310:	d106      	bne.n	800b320 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 800b312:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b316:	f043 0303 	orr.w	r3, r3, #3
 800b31a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b31e:	e06f      	b.n	800b400 <create_name+0x2c4>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b320:	69ba      	ldr	r2, [r7, #24]
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	429a      	cmp	r2, r3
 800b326:	d005      	beq.n	800b334 <create_name+0x1f8>
 800b328:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b32c:	f043 0303 	orr.w	r3, r3, #3
 800b330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800b334:	69ba      	ldr	r2, [r7, #24]
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d860      	bhi.n	800b3fe <create_name+0x2c2>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	61bb      	str	r3, [r7, #24]
 800b340:	2308      	movs	r3, #8
 800b342:	623b      	str	r3, [r7, #32]
 800b344:	230b      	movs	r3, #11
 800b346:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b352:	e051      	b.n	800b3f8 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b356:	2b7f      	cmp	r3, #127	; 0x7f
 800b358:	d914      	bls.n	800b384 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b35a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b35c:	2100      	movs	r1, #0
 800b35e:	4618      	mov	r0, r3
 800b360:	f001 fa52 	bl	800c808 <ff_convert>
 800b364:	4603      	mov	r3, r0
 800b366:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d004      	beq.n	800b378 <create_name+0x23c>
 800b36e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b370:	3b80      	subs	r3, #128	; 0x80
 800b372:	4a4c      	ldr	r2, [pc, #304]	; (800b4a4 <create_name+0x368>)
 800b374:	5cd3      	ldrb	r3, [r2, r3]
 800b376:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b378:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b37c:	f043 0302 	orr.w	r3, r3, #2
 800b380:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b386:	2b00      	cmp	r3, #0
 800b388:	d007      	beq.n	800b39a <create_name+0x25e>
 800b38a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b38c:	4619      	mov	r1, r3
 800b38e:	4846      	ldr	r0, [pc, #280]	; (800b4a8 <create_name+0x36c>)
 800b390:	f7fe fb85 	bl	8009a9e <chk_chr>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d008      	beq.n	800b3ac <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b39a:	235f      	movs	r3, #95	; 0x5f
 800b39c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b39e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3a2:	f043 0303 	orr.w	r3, r3, #3
 800b3a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b3aa:	e01b      	b.n	800b3e4 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b3ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3ae:	2b40      	cmp	r3, #64	; 0x40
 800b3b0:	d909      	bls.n	800b3c6 <create_name+0x28a>
 800b3b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3b4:	2b5a      	cmp	r3, #90	; 0x5a
 800b3b6:	d806      	bhi.n	800b3c6 <create_name+0x28a>
					b |= 2;
 800b3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3bc:	f043 0302 	orr.w	r3, r3, #2
 800b3c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3c4:	e00e      	b.n	800b3e4 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b3c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3c8:	2b60      	cmp	r3, #96	; 0x60
 800b3ca:	d90b      	bls.n	800b3e4 <create_name+0x2a8>
 800b3cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3ce:	2b7a      	cmp	r3, #122	; 0x7a
 800b3d0:	d808      	bhi.n	800b3e4 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 800b3d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3d6:	f043 0301 	orr.w	r3, r3, #1
 800b3da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3e0:	3b20      	subs	r3, #32
 800b3e2:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b3ea:	6a3b      	ldr	r3, [r7, #32]
 800b3ec:	1c59      	adds	r1, r3, #1
 800b3ee:	6239      	str	r1, [r7, #32]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b3f4:	b2d2      	uxtb	r2, r2
 800b3f6:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800b3f8:	e763      	b.n	800b2c2 <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 800b3fa:	bf00      	nop
 800b3fc:	e000      	b.n	800b400 <create_name+0x2c4>
			if (si > di) break;			/* No extension */
 800b3fe:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	2be5      	cmp	r3, #229	; 0xe5
 800b40a:	d104      	bne.n	800b416 <create_name+0x2da>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b412:	2205      	movs	r2, #5
 800b414:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	2b08      	cmp	r3, #8
 800b41a:	d104      	bne.n	800b426 <create_name+0x2ea>
 800b41c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800b426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b42a:	f003 030c 	and.w	r3, r3, #12
 800b42e:	2b0c      	cmp	r3, #12
 800b430:	d005      	beq.n	800b43e <create_name+0x302>
 800b432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b436:	f003 0303 	and.w	r3, r3, #3
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	d105      	bne.n	800b44a <create_name+0x30e>
		cf |= NS_LFN;
 800b43e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b442:	f043 0302 	orr.w	r3, r3, #2
 800b446:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b44a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b44e:	f003 0302 	and.w	r3, r3, #2
 800b452:	2b00      	cmp	r3, #0
 800b454:	d117      	bne.n	800b486 <create_name+0x34a>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b45a:	f003 0303 	and.w	r3, r3, #3
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d105      	bne.n	800b46e <create_name+0x332>
 800b462:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b466:	f043 0310 	orr.w	r3, r3, #16
 800b46a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b46e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b472:	f003 030c 	and.w	r3, r3, #12
 800b476:	2b04      	cmp	r3, #4
 800b478:	d105      	bne.n	800b486 <create_name+0x34a>
 800b47a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b47e:	f043 0308 	orr.w	r3, r3, #8
 800b482:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b48c:	330b      	adds	r3, #11
 800b48e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b492:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b494:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800b496:	4618      	mov	r0, r3
 800b498:	3728      	adds	r7, #40	; 0x28
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	0801120c 	.word	0x0801120c
 800b4a4:	08013d90 	.word	0x08013d90
 800b4a8:	08011218 	.word	0x08011218

0800b4ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	2b2f      	cmp	r3, #47	; 0x2f
 800b4bc:	d003      	beq.n	800b4c6 <follow_path+0x1a>
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	2b5c      	cmp	r3, #92	; 0x5c
 800b4c4:	d102      	bne.n	800b4cc <follow_path+0x20>
		path++;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	2b1f      	cmp	r3, #31
 800b4da:	d80a      	bhi.n	800b4f2 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800b4dc:	2100      	movs	r1, #0
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7ff f8a0 	bl	800a624 <dir_sdi>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b4f0:	e045      	b.n	800b57e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b4f2:	463b      	mov	r3, r7
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f7ff fe20 	bl	800b13c <create_name>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d136      	bne.n	800b574 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f7ff fc4a 	bl	800ada0 <dir_find>
 800b50c:	4603      	mov	r3, r0
 800b50e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b516:	7adb      	ldrb	r3, [r3, #11]
 800b518:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800b51a:	7bfb      	ldrb	r3, [r7, #15]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00a      	beq.n	800b536 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b520:	7bfb      	ldrb	r3, [r7, #15]
 800b522:	2b04      	cmp	r3, #4
 800b524:	d128      	bne.n	800b578 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b526:	7bbb      	ldrb	r3, [r7, #14]
 800b528:	f003 0304 	and.w	r3, r3, #4
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d123      	bne.n	800b578 <follow_path+0xcc>
 800b530:	2305      	movs	r3, #5
 800b532:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800b534:	e020      	b.n	800b578 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b536:	7bbb      	ldrb	r3, [r7, #14]
 800b538:	f003 0304 	and.w	r3, r3, #4
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d11d      	bne.n	800b57c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b546:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	330b      	adds	r3, #11
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	f003 0310 	and.w	r3, r3, #16
 800b552:	2b00      	cmp	r3, #0
 800b554:	d102      	bne.n	800b55c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800b556:	2305      	movs	r3, #5
 800b558:	73fb      	strb	r3, [r7, #15]
 800b55a:	e010      	b.n	800b57e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b562:	68b9      	ldr	r1, [r7, #8]
 800b564:	4618      	mov	r0, r3
 800b566:	f7ff fa32 	bl	800a9ce <ld_clust>
 800b56a:	4602      	mov	r2, r0
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b572:	e7be      	b.n	800b4f2 <follow_path+0x46>
			if (res != FR_OK) break;
 800b574:	bf00      	nop
 800b576:	e002      	b.n	800b57e <follow_path+0xd2>
				break;
 800b578:	bf00      	nop
 800b57a:	e000      	b.n	800b57e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b57c:	bf00      	nop
		}
	}

	return res;
 800b57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b588:	b480      	push	{r7}
 800b58a:	b087      	sub	sp, #28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b590:	f04f 33ff 	mov.w	r3, #4294967295
 800b594:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d031      	beq.n	800b602 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	617b      	str	r3, [r7, #20]
 800b5a4:	e002      	b.n	800b5ac <get_ldnumber+0x24>
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	617b      	str	r3, [r7, #20]
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	2b1f      	cmp	r3, #31
 800b5b2:	d903      	bls.n	800b5bc <get_ldnumber+0x34>
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	2b3a      	cmp	r3, #58	; 0x3a
 800b5ba:	d1f4      	bne.n	800b5a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	2b3a      	cmp	r3, #58	; 0x3a
 800b5c2:	d11c      	bne.n	800b5fe <get_ldnumber+0x76>
			tp = *path;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	1c5a      	adds	r2, r3, #1
 800b5ce:	60fa      	str	r2, [r7, #12]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	3b30      	subs	r3, #48	; 0x30
 800b5d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	2b09      	cmp	r3, #9
 800b5da:	d80e      	bhi.n	800b5fa <get_ldnumber+0x72>
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d10a      	bne.n	800b5fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d107      	bne.n	800b5fa <get_ldnumber+0x72>
					vol = (int)i;
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	617b      	str	r3, [r7, #20]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	e002      	b.n	800b604 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b5fe:	2300      	movs	r3, #0
 800b600:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b602:	693b      	ldr	r3, [r7, #16]
}
 800b604:	4618      	mov	r0, r3
 800b606:	371c      	adds	r7, #28
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f04f 32ff 	mov.w	r2, #4294967295
 800b628:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800b62c:	6839      	ldr	r1, [r7, #0]
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7fe fc0d 	bl	8009e4e <move_window>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d001      	beq.n	800b63e <check_fs+0x2e>
		return 3;
 800b63a:	2303      	movs	r3, #3
 800b63c:	e04a      	b.n	800b6d4 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b644:	3301      	adds	r3, #1
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	021b      	lsls	r3, r3, #8
 800b64a:	b21a      	sxth	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b652:	b21b      	sxth	r3, r3
 800b654:	4313      	orrs	r3, r2
 800b656:	b21b      	sxth	r3, r3
 800b658:	4a20      	ldr	r2, [pc, #128]	; (800b6dc <check_fs+0xcc>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d001      	beq.n	800b662 <check_fs+0x52>
		return 2;
 800b65e:	2302      	movs	r3, #2
 800b660:	e038      	b.n	800b6d4 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	3336      	adds	r3, #54	; 0x36
 800b666:	3303      	adds	r3, #3
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	061a      	lsls	r2, r3, #24
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	3336      	adds	r3, #54	; 0x36
 800b670:	3302      	adds	r3, #2
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	041b      	lsls	r3, r3, #16
 800b676:	4313      	orrs	r3, r2
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	3236      	adds	r2, #54	; 0x36
 800b67c:	3201      	adds	r2, #1
 800b67e:	7812      	ldrb	r2, [r2, #0]
 800b680:	0212      	lsls	r2, r2, #8
 800b682:	4313      	orrs	r3, r2
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800b68a:	4313      	orrs	r3, r2
 800b68c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b690:	4a13      	ldr	r2, [pc, #76]	; (800b6e0 <check_fs+0xd0>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d101      	bne.n	800b69a <check_fs+0x8a>
		return 0;
 800b696:	2300      	movs	r3, #0
 800b698:	e01c      	b.n	800b6d4 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	3352      	adds	r3, #82	; 0x52
 800b69e:	3303      	adds	r3, #3
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	061a      	lsls	r2, r3, #24
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	3352      	adds	r3, #82	; 0x52
 800b6a8:	3302      	adds	r3, #2
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	041b      	lsls	r3, r3, #16
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	3252      	adds	r2, #82	; 0x52
 800b6b4:	3201      	adds	r2, #1
 800b6b6:	7812      	ldrb	r2, [r2, #0]
 800b6b8:	0212      	lsls	r2, r2, #8
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b6c8:	4a05      	ldr	r2, [pc, #20]	; (800b6e0 <check_fs+0xd0>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d101      	bne.n	800b6d2 <check_fs+0xc2>
		return 0;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	e000      	b.n	800b6d4 <check_fs+0xc4>

	return 1;
 800b6d2:	2301      	movs	r3, #1
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3708      	adds	r7, #8
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	ffffaa55 	.word	0xffffaa55
 800b6e0:	00544146 	.word	0x00544146

0800b6e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b096      	sub	sp, #88	; 0x58
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b6f8:	68b8      	ldr	r0, [r7, #8]
 800b6fa:	f7ff ff45 	bl	800b588 <get_ldnumber>
 800b6fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b702:	2b00      	cmp	r3, #0
 800b704:	da01      	bge.n	800b70a <find_volume+0x26>
 800b706:	230b      	movs	r3, #11
 800b708:	e2aa      	b.n	800bc60 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b70a:	4a9e      	ldr	r2, [pc, #632]	; (800b984 <find_volume+0x2a0>)
 800b70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b712:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b716:	2b00      	cmp	r3, #0
 800b718:	d101      	bne.n	800b71e <find_volume+0x3a>
 800b71a:	230c      	movs	r3, #12
 800b71c:	e2a0      	b.n	800bc60 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b722:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800b724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b726:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d01b      	beq.n	800b766 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800b72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b730:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b734:	4618      	mov	r0, r3
 800b736:	f7fe f8b5 	bl	80098a4 <disk_status>
 800b73a:	4603      	mov	r3, r0
 800b73c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b740:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b744:	f003 0301 	and.w	r3, r3, #1
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10c      	bne.n	800b766 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800b74c:	79fb      	ldrb	r3, [r7, #7]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d007      	beq.n	800b762 <find_volume+0x7e>
 800b752:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b756:	f003 0304 	and.w	r3, r3, #4
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d001      	beq.n	800b762 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800b75e:	230a      	movs	r3, #10
 800b760:	e27e      	b.n	800bc60 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 800b762:	2300      	movs	r3, #0
 800b764:	e27c      	b.n	800bc60 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b768:	2200      	movs	r2, #0
 800b76a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b770:	b2da      	uxtb	r2, r3
 800b772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b774:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fe f8aa 	bl	80098d8 <disk_initialize>
 800b784:	4603      	mov	r3, r0
 800b786:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800b78a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b78e:	f003 0301 	and.w	r3, r3, #1
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b796:	2303      	movs	r3, #3
 800b798:	e262      	b.n	800bc60 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800b79a:	79fb      	ldrb	r3, [r7, #7]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d007      	beq.n	800b7b0 <find_volume+0xcc>
 800b7a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7a4:	f003 0304 	and.w	r3, r3, #4
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d001      	beq.n	800b7b0 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800b7ac:	230a      	movs	r3, #10
 800b7ae:	e257      	b.n	800bc60 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800b7b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b7b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7b8:	f7ff ff2a 	bl	800b610 <check_fs>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800b7c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d155      	bne.n	800b876 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	643b      	str	r3, [r7, #64]	; 0x40
 800b7ce:	e029      	b.n	800b824 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800b7d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7d4:	011b      	lsls	r3, r3, #4
 800b7d6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b7da:	4413      	add	r3, r2
 800b7dc:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800b7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d012      	beq.n	800b80e <find_volume+0x12a>
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ea:	330b      	adds	r3, #11
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	061a      	lsls	r2, r3, #24
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f2:	330a      	adds	r3, #10
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	041b      	lsls	r3, r3, #16
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7fc:	3209      	adds	r2, #9
 800b7fe:	7812      	ldrb	r2, [r2, #0]
 800b800:	0212      	lsls	r2, r2, #8
 800b802:	4313      	orrs	r3, r2
 800b804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b806:	3208      	adds	r2, #8
 800b808:	7812      	ldrb	r2, [r2, #0]
 800b80a:	431a      	orrs	r2, r3
 800b80c:	e000      	b.n	800b810 <find_volume+0x12c>
 800b80e:	2200      	movs	r2, #0
 800b810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b818:	440b      	add	r3, r1
 800b81a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b81e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b820:	3301      	adds	r3, #1
 800b822:	643b      	str	r3, [r7, #64]	; 0x40
 800b824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b826:	2b03      	cmp	r3, #3
 800b828:	d9d2      	bls.n	800b7d0 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800b82a:	2300      	movs	r3, #0
 800b82c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b82e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b830:	2b00      	cmp	r3, #0
 800b832:	d002      	beq.n	800b83a <find_volume+0x156>
 800b834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b836:	3b01      	subs	r3, #1
 800b838:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800b83a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b842:	4413      	add	r3, r2
 800b844:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b848:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800b84a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d005      	beq.n	800b85c <find_volume+0x178>
 800b850:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b852:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b854:	f7ff fedc 	bl	800b610 <check_fs>
 800b858:	4603      	mov	r3, r0
 800b85a:	e000      	b.n	800b85e <find_volume+0x17a>
 800b85c:	2302      	movs	r3, #2
 800b85e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800b862:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b866:	2b00      	cmp	r3, #0
 800b868:	d005      	beq.n	800b876 <find_volume+0x192>
 800b86a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b86c:	3301      	adds	r3, #1
 800b86e:	643b      	str	r3, [r7, #64]	; 0x40
 800b870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b872:	2b03      	cmp	r3, #3
 800b874:	d9e1      	bls.n	800b83a <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b876:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	d101      	bne.n	800b882 <find_volume+0x19e>
 800b87e:	2301      	movs	r3, #1
 800b880:	e1ee      	b.n	800bc60 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b882:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b886:	2b00      	cmp	r3, #0
 800b888:	d001      	beq.n	800b88e <find_volume+0x1aa>
 800b88a:	230d      	movs	r3, #13
 800b88c:	e1e8      	b.n	800bc60 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b890:	7b1b      	ldrb	r3, [r3, #12]
 800b892:	021b      	lsls	r3, r3, #8
 800b894:	b21a      	sxth	r2, r3
 800b896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b898:	7adb      	ldrb	r3, [r3, #11]
 800b89a:	b21b      	sxth	r3, r3
 800b89c:	4313      	orrs	r3, r2
 800b89e:	b21b      	sxth	r3, r3
 800b8a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8a4:	d001      	beq.n	800b8aa <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 800b8a6:	230d      	movs	r3, #13
 800b8a8:	e1da      	b.n	800bc60 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ac:	7ddb      	ldrb	r3, [r3, #23]
 800b8ae:	021b      	lsls	r3, r3, #8
 800b8b0:	b21a      	sxth	r2, r3
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b4:	7d9b      	ldrb	r3, [r3, #22]
 800b8b6:	b21b      	sxth	r3, r3
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	b21b      	sxth	r3, r3
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b8c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d112      	bne.n	800b8ec <find_volume+0x208>
 800b8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b8cc:	061a      	lsls	r2, r3, #24
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b8d4:	041b      	lsls	r3, r3, #16
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8da:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800b8de:	0212      	lsls	r2, r2, #8
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8e4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f6:	7c1a      	ldrb	r2, [r3, #16]
 800b8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fa:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b900:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b904:	2b01      	cmp	r3, #1
 800b906:	d006      	beq.n	800b916 <find_volume+0x232>
 800b908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d001      	beq.n	800b916 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 800b912:	230d      	movs	r3, #13
 800b914:	e1a4      	b.n	800bc60 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b918:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b91c:	461a      	mov	r2, r3
 800b91e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b920:	fb02 f303 	mul.w	r3, r2, r3
 800b924:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b928:	7b5a      	ldrb	r2, [r3, #13]
 800b92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92c:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b932:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00a      	beq.n	800b950 <find_volume+0x26c>
 800b93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b940:	461a      	mov	r2, r3
 800b942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b944:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b948:	3b01      	subs	r3, #1
 800b94a:	4013      	ands	r3, r2
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 800b950:	230d      	movs	r3, #13
 800b952:	e185      	b.n	800bc60 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b956:	7c9b      	ldrb	r3, [r3, #18]
 800b958:	021b      	lsls	r3, r3, #8
 800b95a:	b21a      	sxth	r2, r3
 800b95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95e:	7c5b      	ldrb	r3, [r3, #17]
 800b960:	b21b      	sxth	r3, r3
 800b962:	4313      	orrs	r3, r2
 800b964:	b21b      	sxth	r3, r3
 800b966:	b29a      	uxth	r2, r3
 800b968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b970:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b974:	f003 030f 	and.w	r3, r3, #15
 800b978:	b29b      	uxth	r3, r3
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d004      	beq.n	800b988 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 800b97e:	230d      	movs	r3, #13
 800b980:	e16e      	b.n	800bc60 <find_volume+0x57c>
 800b982:	bf00      	nop
 800b984:	20000240 	.word	0x20000240

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98a:	7d1b      	ldrb	r3, [r3, #20]
 800b98c:	021b      	lsls	r3, r3, #8
 800b98e:	b21a      	sxth	r2, r3
 800b990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b992:	7cdb      	ldrb	r3, [r3, #19]
 800b994:	b21b      	sxth	r3, r3
 800b996:	4313      	orrs	r3, r2
 800b998:	b21b      	sxth	r3, r3
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b99e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d112      	bne.n	800b9ca <find_volume+0x2e6>
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b9aa:	061a      	lsls	r2, r3, #24
 800b9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ae:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b9b2:	041b      	lsls	r3, r3, #16
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9b8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b9bc:	0212      	lsls	r2, r2, #8
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9cc:	7bdb      	ldrb	r3, [r3, #15]
 800b9ce:	021b      	lsls	r3, r3, #8
 800b9d0:	b21a      	sxth	r2, r3
 800b9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d4:	7b9b      	ldrb	r3, [r3, #14]
 800b9d6:	b21b      	sxth	r3, r3
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	b21b      	sxth	r3, r3
 800b9dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b9de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d101      	bne.n	800b9e8 <find_volume+0x304>
 800b9e4:	230d      	movs	r3, #13
 800b9e6:	e13b      	b.n	800bc60 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b9e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ec:	4413      	add	r3, r2
 800b9ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9f0:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800b9f4:	0912      	lsrs	r2, r2, #4
 800b9f6:	b292      	uxth	r2, r2
 800b9f8:	4413      	add	r3, r2
 800b9fa:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b9fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d201      	bcs.n	800ba08 <find_volume+0x324>
 800ba04:	230d      	movs	r3, #13
 800ba06:	e12b      	b.n	800bc60 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800ba08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0c:	1ad3      	subs	r3, r2, r3
 800ba0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba10:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800ba14:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba18:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d101      	bne.n	800ba24 <find_volume+0x340>
 800ba20:	230d      	movs	r3, #13
 800ba22:	e11d      	b.n	800bc60 <find_volume+0x57c>
	fmt = FS_FAT12;
 800ba24:	2301      	movs	r3, #1
 800ba26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d902      	bls.n	800ba3a <find_volume+0x356>
 800ba34:	2302      	movs	r3, #2
 800ba36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d902      	bls.n	800ba4a <find_volume+0x366>
 800ba44:	2303      	movs	r3, #3
 800ba46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	1c9a      	adds	r2, r3, #2
 800ba4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800ba54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba58:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800ba5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba60:	441a      	add	r2, r3
 800ba62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba64:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800ba68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6c:	441a      	add	r2, r3
 800ba6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba70:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800ba74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba78:	2b03      	cmp	r3, #3
 800ba7a:	d121      	bne.n	800bac0 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800ba7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <find_volume+0x3a6>
 800ba86:	230d      	movs	r3, #13
 800ba88:	e0ea      	b.n	800bc60 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800ba8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba90:	061a      	lsls	r2, r3, #24
 800ba92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba94:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ba98:	041b      	lsls	r3, r3, #16
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba9e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800baa2:	0212      	lsls	r2, r2, #8
 800baa4:	4313      	orrs	r3, r2
 800baa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baa8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800baac:	431a      	orrs	r2, r3
 800baae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab0:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800bab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	647b      	str	r3, [r7, #68]	; 0x44
 800babe:	e025      	b.n	800bb0c <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800bac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d101      	bne.n	800bace <find_volume+0x3ea>
 800baca:	230d      	movs	r3, #13
 800bacc:	e0c8      	b.n	800bc60 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800bace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800bad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad6:	441a      	add	r2, r3
 800bad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bada:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bade:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bae2:	2b02      	cmp	r3, #2
 800bae4:	d104      	bne.n	800baf0 <find_volume+0x40c>
 800bae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800baec:	005b      	lsls	r3, r3, #1
 800baee:	e00c      	b.n	800bb0a <find_volume+0x426>
 800baf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800baf6:	4613      	mov	r3, r2
 800baf8:	005b      	lsls	r3, r3, #1
 800bafa:	4413      	add	r3, r2
 800bafc:	085a      	lsrs	r2, r3, #1
 800bafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb04:	f003 0301 	and.w	r3, r3, #1
 800bb08:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800bb0a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800bb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bb12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb14:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bb18:	0a5b      	lsrs	r3, r3, #9
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d201      	bcs.n	800bb22 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800bb1e:	230d      	movs	r3, #13
 800bb20:	e09e      	b.n	800bc60 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800bb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb24:	f04f 32ff 	mov.w	r2, #4294967295
 800bb28:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800bb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3a:	2280      	movs	r2, #128	; 0x80
 800bb3c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800bb40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb44:	2b03      	cmp	r3, #3
 800bb46:	d177      	bne.n	800bc38 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800bb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb4e:	021b      	lsls	r3, r3, #8
 800bb50:	b21a      	sxth	r2, r3
 800bb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb58:	b21b      	sxth	r3, r3
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	b21b      	sxth	r3, r3
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d16a      	bne.n	800bc38 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 800bb62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb64:	3301      	adds	r3, #1
 800bb66:	4619      	mov	r1, r3
 800bb68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb6a:	f7fe f970 	bl	8009e4e <move_window>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d161      	bne.n	800bc38 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 800bb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb76:	2200      	movs	r2, #0
 800bb78:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800bb82:	021b      	lsls	r3, r3, #8
 800bb84:	b21a      	sxth	r2, r3
 800bb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb88:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800bb8c:	b21b      	sxth	r3, r3
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	b21b      	sxth	r3, r3
 800bb92:	4a35      	ldr	r2, [pc, #212]	; (800bc68 <find_volume+0x584>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d14f      	bne.n	800bc38 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800bb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9a:	78db      	ldrb	r3, [r3, #3]
 800bb9c:	061a      	lsls	r2, r3, #24
 800bb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba0:	789b      	ldrb	r3, [r3, #2]
 800bba2:	041b      	lsls	r3, r3, #16
 800bba4:	4313      	orrs	r3, r2
 800bba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bba8:	7852      	ldrb	r2, [r2, #1]
 800bbaa:	0212      	lsls	r2, r2, #8
 800bbac:	4313      	orrs	r3, r2
 800bbae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbb0:	7812      	ldrb	r2, [r2, #0]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	4a2d      	ldr	r2, [pc, #180]	; (800bc6c <find_volume+0x588>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d13e      	bne.n	800bc38 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800bbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbc:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800bbc0:	061a      	lsls	r2, r3, #24
 800bbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc4:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800bbc8:	041b      	lsls	r3, r3, #16
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbce:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800bbd2:	0212      	lsls	r2, r2, #8
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbd8:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	4a24      	ldr	r2, [pc, #144]	; (800bc70 <find_volume+0x58c>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d129      	bne.n	800bc38 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800bbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe6:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800bbea:	061a      	lsls	r2, r3, #24
 800bbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbee:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800bbf2:	041b      	lsls	r3, r3, #16
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbf8:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800bbfc:	0212      	lsls	r2, r2, #8
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc02:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800bc06:	431a      	orrs	r2, r3
 800bc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800bc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc10:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800bc14:	061a      	lsls	r2, r3, #24
 800bc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc18:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800bc1c:	041b      	lsls	r3, r3, #16
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc22:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800bc26:	0212      	lsls	r2, r2, #8
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc2c:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800bc30:	431a      	orrs	r2, r3
 800bc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800bc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bc3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800bc42:	4b0c      	ldr	r3, [pc, #48]	; (800bc74 <find_volume+0x590>)
 800bc44:	881b      	ldrh	r3, [r3, #0]
 800bc46:	3301      	adds	r3, #1
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	4b0a      	ldr	r3, [pc, #40]	; (800bc74 <find_volume+0x590>)
 800bc4c:	801a      	strh	r2, [r3, #0]
 800bc4e:	4b09      	ldr	r3, [pc, #36]	; (800bc74 <find_volume+0x590>)
 800bc50:	881a      	ldrh	r2, [r3, #0]
 800bc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc54:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800bc58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc5a:	f7fe f885 	bl	8009d68 <clear_lock>
#endif

	return FR_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3758      	adds	r7, #88	; 0x58
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	ffffaa55 	.word	0xffffaa55
 800bc6c:	41615252 	.word	0x41615252
 800bc70:	61417272 	.word	0x61417272
 800bc74:	20000244 	.word	0x20000244

0800bc78 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d022      	beq.n	800bcd0 <validate+0x58>
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d01d      	beq.n	800bcd0 <validate+0x58>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc9a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d016      	beq.n	800bcd0 <validate+0x58>
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bca8:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d10c      	bne.n	800bcd0 <validate+0x58>
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bcbc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7fd fdef 	bl	80098a4 <disk_status>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	f003 0301 	and.w	r3, r3, #1
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d001      	beq.n	800bcd4 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800bcd0:	2309      	movs	r3, #9
 800bcd2:	e000      	b.n	800bcd6 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
	...

0800bce0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b088      	sub	sp, #32
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	4613      	mov	r3, r2
 800bcec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800bcf2:	f107 0310 	add.w	r3, r7, #16
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff fc46 	bl	800b588 <get_ldnumber>
 800bcfc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	da01      	bge.n	800bd08 <f_mount+0x28>
 800bd04:	230b      	movs	r3, #11
 800bd06:	e02d      	b.n	800bd64 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bd08:	4a18      	ldr	r2, [pc, #96]	; (800bd6c <f_mount+0x8c>)
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d006      	beq.n	800bd26 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800bd18:	69b8      	ldr	r0, [r7, #24]
 800bd1a:	f7fe f825 	bl	8009d68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d003      	beq.n	800bd34 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bd34:	68fa      	ldr	r2, [r7, #12]
 800bd36:	490d      	ldr	r1, [pc, #52]	; (800bd6c <f_mount+0x8c>)
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d002      	beq.n	800bd4a <f_mount+0x6a>
 800bd44:	79fb      	ldrb	r3, [r7, #7]
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d001      	beq.n	800bd4e <f_mount+0x6e>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	e00a      	b.n	800bd64 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800bd4e:	f107 0108 	add.w	r1, r7, #8
 800bd52:	f107 030c 	add.w	r3, r7, #12
 800bd56:	2200      	movs	r2, #0
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7ff fcc3 	bl	800b6e4 <find_volume>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bd62:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3720      	adds	r7, #32
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	20000240 	.word	0x20000240

0800bd70 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	f107 030c 	add.w	r3, r7, #12
 800bd7c:	6018      	str	r0, [r3, #0]
 800bd7e:	f107 0308 	add.w	r3, r7, #8
 800bd82:	6019      	str	r1, [r3, #0]
 800bd84:	1dfb      	adds	r3, r7, #7
 800bd86:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800bd88:	f107 030c 	add.w	r3, r7, #12
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d101      	bne.n	800bd96 <f_open+0x26>
 800bd92:	2309      	movs	r3, #9
 800bd94:	e1f9      	b.n	800c18a <f_open+0x41a>
	fp->fs = 0;			/* Clear file object */
 800bd96:	f107 030c 	add.w	r3, r7, #12
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800bda2:	1dfb      	adds	r3, r7, #7
 800bda4:	1dfa      	adds	r2, r7, #7
 800bda6:	7812      	ldrb	r2, [r2, #0]
 800bda8:	f002 021f 	and.w	r2, r2, #31
 800bdac:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800bdae:	1dfb      	adds	r3, r7, #7
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	f023 0301 	bic.w	r3, r3, #1
 800bdb6:	b2da      	uxtb	r2, r3
 800bdb8:	f107 0108 	add.w	r1, r7, #8
 800bdbc:	f107 0320 	add.w	r3, r7, #32
 800bdc0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7ff fc8d 	bl	800b6e4 <find_volume>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800bdd0:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f040 81d6 	bne.w	800c186 <f_open+0x416>
		INIT_BUF(dj);
 800bdda:	f107 0320 	add.w	r3, r7, #32
 800bdde:	f107 0214 	add.w	r2, r7, #20
 800bde2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800bde6:	f107 0320 	add.w	r3, r7, #32
 800bdea:	4a8b      	ldr	r2, [pc, #556]	; (800c018 <f_open+0x2a8>)
 800bdec:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 800bdf0:	f107 0308 	add.w	r3, r7, #8
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	f107 0320 	add.w	r3, r7, #32
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7ff fb55 	bl	800b4ac <follow_path>
 800be02:	4603      	mov	r3, r0
 800be04:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
		dir = dj.dir;
 800be08:	f107 0320 	add.w	r3, r7, #32
 800be0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be10:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800be14:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d11a      	bne.n	800be52 <f_open+0xe2>
			if (!dir)	/* Default directory itself */
 800be1c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800be20:	2b00      	cmp	r3, #0
 800be22:	d103      	bne.n	800be2c <f_open+0xbc>
				res = FR_INVALID_NAME;
 800be24:	2306      	movs	r3, #6
 800be26:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800be2a:	e012      	b.n	800be52 <f_open+0xe2>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800be2c:	1dfb      	adds	r3, r7, #7
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	f023 0301 	bic.w	r3, r3, #1
 800be34:	2b00      	cmp	r3, #0
 800be36:	bf14      	ite	ne
 800be38:	2301      	movne	r3, #1
 800be3a:	2300      	moveq	r3, #0
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	461a      	mov	r2, r3
 800be40:	f107 0320 	add.w	r3, r7, #32
 800be44:	4611      	mov	r1, r2
 800be46:	4618      	mov	r0, r3
 800be48:	f7fd fe44 	bl	8009ad4 <chk_lock>
 800be4c:	4603      	mov	r3, r0
 800be4e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800be52:	1dfb      	adds	r3, r7, #7
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	f003 031c 	and.w	r3, r3, #28
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f000 80cc 	beq.w	800bff8 <f_open+0x288>
			if (res != FR_OK) {					/* No file, create new */
 800be60:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800be64:	2b00      	cmp	r3, #0
 800be66:	d01f      	beq.n	800bea8 <f_open+0x138>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800be68:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800be6c:	2b04      	cmp	r3, #4
 800be6e:	d10e      	bne.n	800be8e <f_open+0x11e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800be70:	f7fd fe9e 	bl	8009bb0 <enq_lock>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d006      	beq.n	800be88 <f_open+0x118>
 800be7a:	f107 0320 	add.w	r3, r7, #32
 800be7e:	4618      	mov	r0, r3
 800be80:	f7ff f84e 	bl	800af20 <dir_register>
 800be84:	4603      	mov	r3, r0
 800be86:	e000      	b.n	800be8a <f_open+0x11a>
 800be88:	2312      	movs	r3, #18
 800be8a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800be8e:	1dfb      	adds	r3, r7, #7
 800be90:	1dfa      	adds	r2, r7, #7
 800be92:	7812      	ldrb	r2, [r2, #0]
 800be94:	f042 0208 	orr.w	r2, r2, #8
 800be98:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800be9a:	f107 0320 	add.w	r3, r7, #32
 800be9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bea2:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800bea6:	e014      	b.n	800bed2 <f_open+0x162>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bea8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800beac:	330b      	adds	r3, #11
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	f003 0311 	and.w	r3, r3, #17
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d003      	beq.n	800bec0 <f_open+0x150>
					res = FR_DENIED;
 800beb8:	2307      	movs	r3, #7
 800beba:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800bebe:	e008      	b.n	800bed2 <f_open+0x162>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800bec0:	1dfb      	adds	r3, r7, #7
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	f003 0304 	and.w	r3, r3, #4
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <f_open+0x162>
						res = FR_EXIST;
 800becc:	2308      	movs	r3, #8
 800bece:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bed2:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f040 80b1 	bne.w	800c03e <f_open+0x2ce>
 800bedc:	1dfb      	adds	r3, r7, #7
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	f003 0308 	and.w	r3, r3, #8
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f000 80aa 	beq.w	800c03e <f_open+0x2ce>
				dw = GET_FATTIME();				/* Created time */
 800beea:	f7fd fbe9 	bl	80096c0 <get_fattime>
 800beee:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800bef2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bef6:	330e      	adds	r3, #14
 800bef8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800befc:	b2d2      	uxtb	r2, r2
 800befe:	701a      	strb	r2, [r3, #0]
 800bf00:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	0a1b      	lsrs	r3, r3, #8
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bf0e:	330f      	adds	r3, #15
 800bf10:	b2d2      	uxtb	r2, r2
 800bf12:	701a      	strb	r2, [r3, #0]
 800bf14:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800bf18:	0c1a      	lsrs	r2, r3, #16
 800bf1a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bf1e:	3310      	adds	r3, #16
 800bf20:	b2d2      	uxtb	r2, r2
 800bf22:	701a      	strb	r2, [r3, #0]
 800bf24:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800bf28:	0e1a      	lsrs	r2, r3, #24
 800bf2a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bf2e:	3311      	adds	r3, #17
 800bf30:	b2d2      	uxtb	r2, r2
 800bf32:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800bf34:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bf38:	330b      	adds	r3, #11
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800bf3e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bf42:	331c      	adds	r3, #28
 800bf44:	2200      	movs	r2, #0
 800bf46:	701a      	strb	r2, [r3, #0]
 800bf48:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bf4c:	331d      	adds	r3, #29
 800bf4e:	2200      	movs	r2, #0
 800bf50:	701a      	strb	r2, [r3, #0]
 800bf52:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bf56:	331e      	adds	r3, #30
 800bf58:	2200      	movs	r2, #0
 800bf5a:	701a      	strb	r2, [r3, #0]
 800bf5c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bf60:	331f      	adds	r3, #31
 800bf62:	2200      	movs	r2, #0
 800bf64:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800bf66:	f107 0320 	add.w	r3, r7, #32
 800bf6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf6e:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fe fd2b 	bl	800a9ce <ld_clust>
 800bf78:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
				st_clust(dir, 0);				/* cluster = 0 */
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 800bf82:	f7fe fd52 	bl	800aa2a <st_clust>
				dj.fs->wflag = 1;
 800bf86:	f107 0320 	add.w	r3, r7, #32
 800bf8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800bf94:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d050      	beq.n	800c03e <f_open+0x2ce>
					dw = dj.fs->winsect;
 800bf9c:	f107 0320 	add.w	r3, r7, #32
 800bfa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bfa4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800bfa8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					res = remove_chain(dj.fs, cl);
 800bfac:	f107 0320 	add.w	r3, r7, #32
 800bfb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bfb4:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fe fa07 	bl	800a3cc <remove_chain>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
					if (res == FR_OK) {
 800bfc4:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d138      	bne.n	800c03e <f_open+0x2ce>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800bfcc:	f107 0320 	add.w	r3, r7, #32
 800bfd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bfd4:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800bfd8:	3a01      	subs	r2, #1
 800bfda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800bfde:	f107 0320 	add.w	r3, r7, #32
 800bfe2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bfe6:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7fd ff2f 	bl	8009e4e <move_window>
 800bff0:	4603      	mov	r3, r0
 800bff2:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800bff6:	e022      	b.n	800c03e <f_open+0x2ce>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800bff8:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d11e      	bne.n	800c03e <f_open+0x2ce>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800c000:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c004:	330b      	adds	r3, #11
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	f003 0310 	and.w	r3, r3, #16
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d005      	beq.n	800c01c <f_open+0x2ac>
					res = FR_NO_FILE;
 800c010:	2304      	movs	r3, #4
 800c012:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800c016:	e012      	b.n	800c03e <f_open+0x2ce>
 800c018:	20000260 	.word	0x20000260
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800c01c:	1dfb      	adds	r3, r7, #7
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	f003 0302 	and.w	r3, r3, #2
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00a      	beq.n	800c03e <f_open+0x2ce>
 800c028:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c02c:	330b      	adds	r3, #11
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <f_open+0x2ce>
						res = FR_DENIED;
 800c038:	2307      	movs	r3, #7
 800c03a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
		}
		if (res == FR_OK) {
 800c03e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800c042:	2b00      	cmp	r3, #0
 800c044:	d13d      	bne.n	800c0c2 <f_open+0x352>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c046:	1dfb      	adds	r3, r7, #7
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	f003 0308 	and.w	r3, r3, #8
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d005      	beq.n	800c05e <f_open+0x2ee>
				mode |= FA__WRITTEN;
 800c052:	1dfb      	adds	r3, r7, #7
 800c054:	1dfa      	adds	r2, r7, #7
 800c056:	7812      	ldrb	r2, [r2, #0]
 800c058:	f042 0220 	orr.w	r2, r2, #32
 800c05c:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800c05e:	f107 0320 	add.w	r3, r7, #32
 800c062:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c066:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800c06a:	f107 030c 	add.w	r3, r7, #12
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800c074:	f107 030c 	add.w	r3, r7, #12
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800c07e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c082:	1dfb      	adds	r3, r7, #7
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	f023 0301 	bic.w	r3, r3, #1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	bf14      	ite	ne
 800c08e:	2301      	movne	r3, #1
 800c090:	2300      	moveq	r3, #0
 800c092:	b2db      	uxtb	r3, r3
 800c094:	461a      	mov	r2, r3
 800c096:	f107 0320 	add.w	r3, r7, #32
 800c09a:	4611      	mov	r1, r2
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fd fdab 	bl	8009bf8 <inc_lock>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	f107 030c 	add.w	r3, r7, #12
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800c0ae:	f107 030c 	add.w	r3, r7, #12
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d102      	bne.n	800c0c2 <f_open+0x352>
 800c0bc:	2302      	movs	r3, #2
 800c0be:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800c0c2:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d15d      	bne.n	800c186 <f_open+0x416>
			fp->flag = mode;					/* File access mode */
 800c0ca:	f107 030c 	add.w	r3, r7, #12
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	1dfa      	adds	r2, r7, #7
 800c0d2:	7812      	ldrb	r2, [r2, #0]
 800c0d4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800c0d8:	f107 030c 	add.w	r3, r7, #12
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800c0e4:	f107 0320 	add.w	r3, r7, #32
 800c0e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c0ec:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fe fc6c 	bl	800a9ce <ld_clust>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	f107 030c 	add.w	r3, r7, #12
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800c102:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c106:	331f      	adds	r3, #31
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	061a      	lsls	r2, r3, #24
 800c10c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c110:	331e      	adds	r3, #30
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	041b      	lsls	r3, r3, #16
 800c116:	4313      	orrs	r3, r2
 800c118:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800c11c:	321d      	adds	r2, #29
 800c11e:	7812      	ldrb	r2, [r2, #0]
 800c120:	0212      	lsls	r2, r2, #8
 800c122:	4313      	orrs	r3, r2
 800c124:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800c128:	321c      	adds	r2, #28
 800c12a:	7812      	ldrb	r2, [r2, #0]
 800c12c:	431a      	orrs	r2, r3
 800c12e:	f107 030c 	add.w	r3, r7, #12
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800c138:	f107 030c 	add.w	r3, r7, #12
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2200      	movs	r2, #0
 800c140:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800c144:	f107 030c 	add.w	r3, r7, #12
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800c150:	f107 030c 	add.w	r3, r7, #12
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2200      	movs	r2, #0
 800c158:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800c15c:	f107 0320 	add.w	r3, r7, #32
 800c160:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c164:	f107 030c 	add.w	r3, r7, #12
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800c16e:	f107 030c 	add.w	r3, r7, #12
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c178:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800c17c:	f107 030c 	add.w	r3, r7, #12
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800c186:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	f507 7716 	add.w	r7, r7, #600	; 0x258
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b08a      	sub	sp, #40	; 0x28
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
 800c1a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f7ff fd63 	bl	800bc78 <validate>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c1b6:	7dfb      	ldrb	r3, [r7, #23]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d001      	beq.n	800c1c0 <f_write+0x2c>
 800c1bc:	7dfb      	ldrb	r3, [r7, #23]
 800c1be:	e192      	b.n	800c4e6 <f_write+0x352>
	if (fp->err)							/* Check error */
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d003      	beq.n	800c1d2 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800c1d0:	e189      	b.n	800c4e6 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c1d8:	f003 0302 	and.w	r3, r3, #2
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d101      	bne.n	800c1e4 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800c1e0:	2307      	movs	r3, #7
 800c1e2:	e180      	b.n	800c4e6 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	441a      	add	r2, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	f080 8158 	bcs.w	800c4aa <f_write+0x316>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800c1fe:	e154      	b.n	800c4aa <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	f040 8114 	bne.w	800c438 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c216:	0a5b      	lsrs	r3, r3, #9
 800c218:	b2da      	uxtb	r2, r3
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c220:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c224:	3b01      	subs	r3, #1
 800c226:	b2db      	uxtb	r3, r3
 800c228:	4013      	ands	r3, r2
 800c22a:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800c22c:	7dbb      	ldrb	r3, [r7, #22]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d151      	bne.n	800c2d6 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10f      	bne.n	800c25c <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c242:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800c244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c246:	2b00      	cmp	r3, #0
 800c248:	d121      	bne.n	800c28e <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c250:	2100      	movs	r1, #0
 800c252:	4618      	mov	r0, r3
 800c254:	f7fe f914 	bl	800a480 <create_chain>
 800c258:	6278      	str	r0, [r7, #36]	; 0x24
 800c25a:	e018      	b.n	800c28e <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c262:	2b00      	cmp	r3, #0
 800c264:	d008      	beq.n	800c278 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c26c:	4619      	mov	r1, r3
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f7fe f9a3 	bl	800a5ba <clmt_clust>
 800c274:	6278      	str	r0, [r7, #36]	; 0x24
 800c276:	e00a      	b.n	800c28e <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c284:	4619      	mov	r1, r3
 800c286:	4610      	mov	r0, r2
 800c288:	f7fe f8fa 	bl	800a480 <create_chain>
 800c28c:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c290:	2b00      	cmp	r3, #0
 800c292:	f000 810f 	beq.w	800c4b4 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800c296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d105      	bne.n	800c2a8 <f_write+0x114>
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2202      	movs	r2, #2
 800c2a0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c2a4:	2302      	movs	r3, #2
 800c2a6:	e11e      	b.n	800c4e6 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ae:	d105      	bne.n	800c2bc <f_write+0x128>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e114      	b.n	800c4e6 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d103      	bne.n	800c2d6 <f_write+0x142>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c2dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d01d      	beq.n	800c320 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c2ea:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c2ee:	68f9      	ldr	r1, [r7, #12]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	f7fd fb34 	bl	8009964 <disk_write>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d005      	beq.n	800c30e <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c30a:	2301      	movs	r3, #1
 800c30c:	e0eb      	b.n	800c4e6 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c318:	b2da      	uxtb	r2, r3
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c32c:	4619      	mov	r1, r3
 800c32e:	4610      	mov	r0, r2
 800c330:	f7fd fe68 	bl	800a004 <clust2sect>
 800c334:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d105      	bne.n	800c348 <f_write+0x1b4>
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2202      	movs	r2, #2
 800c340:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c344:	2302      	movs	r3, #2
 800c346:	e0ce      	b.n	800c4e6 <f_write+0x352>
			sect += csect;
 800c348:	7dbb      	ldrb	r3, [r7, #22]
 800c34a:	693a      	ldr	r2, [r7, #16]
 800c34c:	4413      	add	r3, r2
 800c34e:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	0a5b      	lsrs	r3, r3, #9
 800c354:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d048      	beq.n	800c3ee <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800c35c:	7dba      	ldrb	r2, [r7, #22]
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	4413      	add	r3, r2
 800c362:	68fa      	ldr	r2, [r7, #12]
 800c364:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800c368:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d908      	bls.n	800c382 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c376:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c37a:	461a      	mov	r2, r3
 800c37c:	7dbb      	ldrb	r3, [r7, #22]
 800c37e:	1ad3      	subs	r3, r2, r3
 800c380:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c388:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	693a      	ldr	r2, [r7, #16]
 800c390:	69b9      	ldr	r1, [r7, #24]
 800c392:	f7fd fae7 	bl	8009964 <disk_write>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d005      	beq.n	800c3a8 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e09e      	b.n	800c4e6 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	69fa      	ldr	r2, [r7, #28]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d916      	bls.n	800c3e6 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	1ad3      	subs	r3, r2, r3
 800c3c4:	025b      	lsls	r3, r3, #9
 800c3c6:	69ba      	ldr	r2, [r7, #24]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	f7fd fb06 	bl	80099e0 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c3da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3de:	b2da      	uxtb	r2, r3
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	025b      	lsls	r3, r3, #9
 800c3ea:	623b      	str	r3, [r7, #32]
				continue;
 800c3ec:	e047      	b.n	800c47e <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d01a      	beq.n	800c430 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c406:	429a      	cmp	r2, r3
 800c408:	d212      	bcs.n	800c430 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c410:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c414:	68f9      	ldr	r1, [r7, #12]
 800c416:	2301      	movs	r3, #1
 800c418:	693a      	ldr	r2, [r7, #16]
 800c41a:	f7fd fa83 	bl	8009924 <disk_read>
 800c41e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800c420:	2b00      	cmp	r3, #0
 800c422:	d005      	beq.n	800c430 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c42c:	2301      	movs	r3, #1
 800c42e:	e05a      	b.n	800c4e6 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c442:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c446:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800c448:	6a3a      	ldr	r2, [r7, #32]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d901      	bls.n	800c454 <f_write+0x2c0>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c45a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	4413      	add	r3, r2
 800c462:	6a3a      	ldr	r2, [r7, #32]
 800c464:	69b9      	ldr	r1, [r7, #24]
 800c466:	4618      	mov	r0, r3
 800c468:	f7fd faba 	bl	80099e0 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c476:	b2da      	uxtb	r2, r3
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800c47e:	69ba      	ldr	r2, [r7, #24]
 800c480:	6a3b      	ldr	r3, [r7, #32]
 800c482:	4413      	add	r3, r2
 800c484:	61bb      	str	r3, [r7, #24]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c48c:	6a3b      	ldr	r3, [r7, #32]
 800c48e:	441a      	add	r2, r3
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	6a3b      	ldr	r3, [r7, #32]
 800c49c:	441a      	add	r2, r3
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	601a      	str	r2, [r3, #0]
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	6a3b      	ldr	r3, [r7, #32]
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	f47f aea7 	bne.w	800c200 <f_write+0x6c>
 800c4b2:	e000      	b.n	800c4b6 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c4b4:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d905      	bls.n	800c4d2 <f_write+0x33e>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c4d8:	f043 0320 	orr.w	r3, r3, #32
 800c4dc:	b2da      	uxtb	r2, r3
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800c4e4:	2300      	movs	r3, #0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3728      	adds	r7, #40	; 0x28
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b086      	sub	sp, #24
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7ff fbbe 	bl	800bc78 <validate>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c500:	7dfb      	ldrb	r3, [r7, #23]
 800c502:	2b00      	cmp	r3, #0
 800c504:	f040 80a8 	bne.w	800c658 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c50e:	f003 0320 	and.w	r3, r3, #32
 800c512:	2b00      	cmp	r3, #0
 800c514:	f000 80a0 	beq.w	800c658 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c522:	2b00      	cmp	r3, #0
 800c524:	d019      	beq.n	800c55a <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c52c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c530:	6879      	ldr	r1, [r7, #4]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c538:	2301      	movs	r3, #1
 800c53a:	f7fd fa13 	bl	8009964 <disk_write>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d001      	beq.n	800c548 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800c544:	2301      	movs	r3, #1
 800c546:	e088      	b.n	800c65a <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c54e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c552:	b2da      	uxtb	r2, r3
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c566:	4619      	mov	r1, r3
 800c568:	4610      	mov	r0, r2
 800c56a:	f7fd fc70 	bl	8009e4e <move_window>
 800c56e:	4603      	mov	r3, r0
 800c570:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800c572:	7dfb      	ldrb	r3, [r7, #23]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d16f      	bne.n	800c658 <f_sync+0x16a>
				dir = fp->dir_ptr;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800c57e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	330b      	adds	r3, #11
 800c584:	781a      	ldrb	r2, [r3, #0]
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	330b      	adds	r3, #11
 800c58a:	f042 0220 	orr.w	r2, r2, #32
 800c58e:	b2d2      	uxtb	r2, r2
 800c590:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	331c      	adds	r3, #28
 800c59c:	b2d2      	uxtb	r2, r2
 800c59e:	701a      	strb	r2, [r3, #0]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	0a1b      	lsrs	r3, r3, #8
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	331d      	adds	r3, #29
 800c5b0:	b2d2      	uxtb	r2, r2
 800c5b2:	701a      	strb	r2, [r3, #0]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c5ba:	0c1a      	lsrs	r2, r3, #16
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	331e      	adds	r3, #30
 800c5c0:	b2d2      	uxtb	r2, r2
 800c5c2:	701a      	strb	r2, [r3, #0]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c5ca:	0e1a      	lsrs	r2, r3, #24
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	331f      	adds	r3, #31
 800c5d0:	b2d2      	uxtb	r2, r2
 800c5d2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c5da:	4619      	mov	r1, r3
 800c5dc:	6938      	ldr	r0, [r7, #16]
 800c5de:	f7fe fa24 	bl	800aa2a <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800c5e2:	f7fd f86d 	bl	80096c0 <get_fattime>
 800c5e6:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	3316      	adds	r3, #22
 800c5ec:	68fa      	ldr	r2, [r7, #12]
 800c5ee:	b2d2      	uxtb	r2, r2
 800c5f0:	701a      	strb	r2, [r3, #0]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	0a1b      	lsrs	r3, r3, #8
 800c5f8:	b29a      	uxth	r2, r3
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	3317      	adds	r3, #23
 800c5fe:	b2d2      	uxtb	r2, r2
 800c600:	701a      	strb	r2, [r3, #0]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	0c1a      	lsrs	r2, r3, #16
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	3318      	adds	r3, #24
 800c60a:	b2d2      	uxtb	r2, r2
 800c60c:	701a      	strb	r2, [r3, #0]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	0e1a      	lsrs	r2, r3, #24
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	3319      	adds	r3, #25
 800c616:	b2d2      	uxtb	r2, r2
 800c618:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	3312      	adds	r3, #18
 800c61e:	2200      	movs	r2, #0
 800c620:	701a      	strb	r2, [r3, #0]
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	3313      	adds	r3, #19
 800c626:	2200      	movs	r2, #0
 800c628:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c630:	f023 0320 	bic.w	r3, r3, #32
 800c634:	b2da      	uxtb	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c642:	2201      	movs	r2, #1
 800c644:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fd fc2b 	bl	8009eaa <sync_fs>
 800c654:	4603      	mov	r3, r0
 800c656:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800c658:	7dfb      	ldrb	r3, [r7, #23]
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3718      	adds	r7, #24
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b084      	sub	sp, #16
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
 800c66a:	460b      	mov	r3, r1
 800c66c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800c66e:	78fb      	ldrb	r3, [r7, #3]
 800c670:	2b0a      	cmp	r3, #10
 800c672:	d103      	bne.n	800c67c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c674:	210d      	movs	r1, #13
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7ff fff3 	bl	800c662 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2b00      	cmp	r3, #0
 800c686:	db25      	blt.n	800c6d4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	1c5a      	adds	r2, r3, #1
 800c68c:	60fa      	str	r2, [r7, #12]
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	4413      	add	r3, r2
 800c692:	78fa      	ldrb	r2, [r7, #3]
 800c694:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2b3c      	cmp	r3, #60	; 0x3c
 800c69a:	dd12      	ble.n	800c6c2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6818      	ldr	r0, [r3, #0]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f103 010c 	add.w	r1, r3, #12
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	f107 0308 	add.w	r3, r7, #8
 800c6ac:	f7ff fd72 	bl	800c194 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c6b0:	68ba      	ldr	r2, [r7, #8]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d101      	bne.n	800c6bc <putc_bfd+0x5a>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	e001      	b.n	800c6c0 <putc_bfd+0x5e>
 800c6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	1c5a      	adds	r2, r3, #1
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	609a      	str	r2, [r3, #8]
 800c6d2:	e000      	b.n	800c6d6 <putc_bfd+0x74>
	if (i < 0) return;
 800c6d4:	bf00      	nop
}
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c6dc:	b590      	push	{r4, r7, lr}
 800c6de:	b097      	sub	sp, #92	; 0x5c
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	613b      	str	r3, [r7, #16]
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800c6f2:	e009      	b.n	800c708 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	1c5a      	adds	r2, r3, #1
 800c6f8:	607a      	str	r2, [r7, #4]
 800c6fa:	781a      	ldrb	r2, [r3, #0]
 800c6fc:	f107 030c 	add.w	r3, r7, #12
 800c700:	4611      	mov	r1, r2
 800c702:	4618      	mov	r0, r3
 800c704:	f7ff ffad 	bl	800c662 <putc_bfd>
	while (*str)			/* Put the string */
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d1f1      	bne.n	800c6f4 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	2b00      	cmp	r3, #0
 800c714:	db16      	blt.n	800c744 <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800c716:	68f8      	ldr	r0, [r7, #12]
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	461c      	mov	r4, r3
 800c71c:	f107 0208 	add.w	r2, r7, #8
 800c720:	f107 030c 	add.w	r3, r7, #12
 800c724:	f103 010c 	add.w	r1, r3, #12
 800c728:	4613      	mov	r3, r2
 800c72a:	4622      	mov	r2, r4
 800c72c:	f7ff fd32 	bl	800c194 <f_write>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d106      	bne.n	800c744 <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	461a      	mov	r2, r3
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d101      	bne.n	800c744 <f_puts+0x68>
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	e001      	b.n	800c748 <f_puts+0x6c>
	return EOF;
 800c744:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c748:	4618      	mov	r0, r3
 800c74a:	375c      	adds	r7, #92	; 0x5c
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd90      	pop	{r4, r7, pc}

0800c750 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c750:	b480      	push	{r7}
 800c752:	b087      	sub	sp, #28
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	4613      	mov	r3, r2
 800c75c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c75e:	2301      	movs	r3, #1
 800c760:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c762:	2300      	movs	r3, #0
 800c764:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c766:	4b1f      	ldr	r3, [pc, #124]	; (800c7e4 <FATFS_LinkDriverEx+0x94>)
 800c768:	7a5b      	ldrb	r3, [r3, #9]
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d831      	bhi.n	800c7d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c770:	4b1c      	ldr	r3, [pc, #112]	; (800c7e4 <FATFS_LinkDriverEx+0x94>)
 800c772:	7a5b      	ldrb	r3, [r3, #9]
 800c774:	b2db      	uxtb	r3, r3
 800c776:	461a      	mov	r2, r3
 800c778:	4b1a      	ldr	r3, [pc, #104]	; (800c7e4 <FATFS_LinkDriverEx+0x94>)
 800c77a:	2100      	movs	r1, #0
 800c77c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c77e:	4b19      	ldr	r3, [pc, #100]	; (800c7e4 <FATFS_LinkDriverEx+0x94>)
 800c780:	7a5b      	ldrb	r3, [r3, #9]
 800c782:	b2db      	uxtb	r3, r3
 800c784:	4a17      	ldr	r2, [pc, #92]	; (800c7e4 <FATFS_LinkDriverEx+0x94>)
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	4413      	add	r3, r2
 800c78a:	68fa      	ldr	r2, [r7, #12]
 800c78c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c78e:	4b15      	ldr	r3, [pc, #84]	; (800c7e4 <FATFS_LinkDriverEx+0x94>)
 800c790:	7a5b      	ldrb	r3, [r3, #9]
 800c792:	b2db      	uxtb	r3, r3
 800c794:	461a      	mov	r2, r3
 800c796:	4b13      	ldr	r3, [pc, #76]	; (800c7e4 <FATFS_LinkDriverEx+0x94>)
 800c798:	4413      	add	r3, r2
 800c79a:	79fa      	ldrb	r2, [r7, #7]
 800c79c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c79e:	4b11      	ldr	r3, [pc, #68]	; (800c7e4 <FATFS_LinkDriverEx+0x94>)
 800c7a0:	7a5b      	ldrb	r3, [r3, #9]
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	1c5a      	adds	r2, r3, #1
 800c7a6:	b2d1      	uxtb	r1, r2
 800c7a8:	4a0e      	ldr	r2, [pc, #56]	; (800c7e4 <FATFS_LinkDriverEx+0x94>)
 800c7aa:	7251      	strb	r1, [r2, #9]
 800c7ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c7ae:	7dbb      	ldrb	r3, [r7, #22]
 800c7b0:	3330      	adds	r3, #48	; 0x30
 800c7b2:	b2da      	uxtb	r2, r3
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	223a      	movs	r2, #58	; 0x3a
 800c7be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	3302      	adds	r3, #2
 800c7c4:	222f      	movs	r2, #47	; 0x2f
 800c7c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	3303      	adds	r3, #3
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c7d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	371c      	adds	r7, #28
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	20000460 	.word	0x20000460

0800c7e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	6839      	ldr	r1, [r7, #0]
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f7ff ffaa 	bl	800c750 <FATFS_LinkDriverEx>
 800c7fc:	4603      	mov	r3, r0
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
	...

0800c808 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	4603      	mov	r3, r0
 800c810:	6039      	str	r1, [r7, #0]
 800c812:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c814:	88fb      	ldrh	r3, [r7, #6]
 800c816:	2b7f      	cmp	r3, #127	; 0x7f
 800c818:	d802      	bhi.n	800c820 <ff_convert+0x18>
		c = chr;
 800c81a:	88fb      	ldrh	r3, [r7, #6]
 800c81c:	81fb      	strh	r3, [r7, #14]
 800c81e:	e025      	b.n	800c86c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00b      	beq.n	800c83e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c826:	88fb      	ldrh	r3, [r7, #6]
 800c828:	2bff      	cmp	r3, #255	; 0xff
 800c82a:	d805      	bhi.n	800c838 <ff_convert+0x30>
 800c82c:	88fb      	ldrh	r3, [r7, #6]
 800c82e:	3b80      	subs	r3, #128	; 0x80
 800c830:	4a12      	ldr	r2, [pc, #72]	; (800c87c <ff_convert+0x74>)
 800c832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c836:	e000      	b.n	800c83a <ff_convert+0x32>
 800c838:	2300      	movs	r3, #0
 800c83a:	81fb      	strh	r3, [r7, #14]
 800c83c:	e016      	b.n	800c86c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800c83e:	2300      	movs	r3, #0
 800c840:	81fb      	strh	r3, [r7, #14]
 800c842:	e009      	b.n	800c858 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c844:	89fb      	ldrh	r3, [r7, #14]
 800c846:	4a0d      	ldr	r2, [pc, #52]	; (800c87c <ff_convert+0x74>)
 800c848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c84c:	88fa      	ldrh	r2, [r7, #6]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d006      	beq.n	800c860 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c852:	89fb      	ldrh	r3, [r7, #14]
 800c854:	3301      	adds	r3, #1
 800c856:	81fb      	strh	r3, [r7, #14]
 800c858:	89fb      	ldrh	r3, [r7, #14]
 800c85a:	2b7f      	cmp	r3, #127	; 0x7f
 800c85c:	d9f2      	bls.n	800c844 <ff_convert+0x3c>
 800c85e:	e000      	b.n	800c862 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c860:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c862:	89fb      	ldrh	r3, [r7, #14]
 800c864:	3380      	adds	r3, #128	; 0x80
 800c866:	b29b      	uxth	r3, r3
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c86c:	89fb      	ldrh	r3, [r7, #14]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3714      	adds	r7, #20
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr
 800c87a:	bf00      	nop
 800c87c:	08013e20 	.word	0x08013e20

0800c880 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	4603      	mov	r3, r0
 800c888:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800c88a:	2300      	movs	r3, #0
 800c88c:	60fb      	str	r3, [r7, #12]
 800c88e:	e002      	b.n	800c896 <ff_wtoupper+0x16>
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	3301      	adds	r3, #1
 800c894:	60fb      	str	r3, [r7, #12]
 800c896:	4a0f      	ldr	r2, [pc, #60]	; (800c8d4 <ff_wtoupper+0x54>)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d006      	beq.n	800c8b0 <ff_wtoupper+0x30>
 800c8a2:	4a0c      	ldr	r2, [pc, #48]	; (800c8d4 <ff_wtoupper+0x54>)
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8aa:	88fa      	ldrh	r2, [r7, #6]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d1ef      	bne.n	800c890 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800c8b0:	4a08      	ldr	r2, [pc, #32]	; (800c8d4 <ff_wtoupper+0x54>)
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d004      	beq.n	800c8c6 <ff_wtoupper+0x46>
 800c8bc:	4a06      	ldr	r2, [pc, #24]	; (800c8d8 <ff_wtoupper+0x58>)
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8c4:	e000      	b.n	800c8c8 <ff_wtoupper+0x48>
 800c8c6:	88fb      	ldrh	r3, [r7, #6]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3714      	adds	r7, #20
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr
 800c8d4:	08013f20 	.word	0x08013f20
 800c8d8:	08014100 	.word	0x08014100

0800c8dc <asin>:
 800c8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8de:	ed2d 8b02 	vpush	{d8}
 800c8e2:	4e26      	ldr	r6, [pc, #152]	; (800c97c <asin+0xa0>)
 800c8e4:	b08b      	sub	sp, #44	; 0x2c
 800c8e6:	ec55 4b10 	vmov	r4, r5, d0
 800c8ea:	f000 f8ad 	bl	800ca48 <__ieee754_asin>
 800c8ee:	f996 3000 	ldrsb.w	r3, [r6]
 800c8f2:	eeb0 8a40 	vmov.f32	s16, s0
 800c8f6:	eef0 8a60 	vmov.f32	s17, s1
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	d036      	beq.n	800c96c <asin+0x90>
 800c8fe:	4622      	mov	r2, r4
 800c900:	462b      	mov	r3, r5
 800c902:	4620      	mov	r0, r4
 800c904:	4629      	mov	r1, r5
 800c906:	f7f4 f911 	bl	8000b2c <__aeabi_dcmpun>
 800c90a:	4607      	mov	r7, r0
 800c90c:	bb70      	cbnz	r0, 800c96c <asin+0x90>
 800c90e:	ec45 4b10 	vmov	d0, r4, r5
 800c912:	f000 fdd9 	bl	800d4c8 <fabs>
 800c916:	2200      	movs	r2, #0
 800c918:	4b19      	ldr	r3, [pc, #100]	; (800c980 <asin+0xa4>)
 800c91a:	ec51 0b10 	vmov	r0, r1, d0
 800c91e:	f7f4 f8fb 	bl	8000b18 <__aeabi_dcmpgt>
 800c922:	b318      	cbz	r0, 800c96c <asin+0x90>
 800c924:	2301      	movs	r3, #1
 800c926:	9300      	str	r3, [sp, #0]
 800c928:	4816      	ldr	r0, [pc, #88]	; (800c984 <asin+0xa8>)
 800c92a:	4b17      	ldr	r3, [pc, #92]	; (800c988 <asin+0xac>)
 800c92c:	9301      	str	r3, [sp, #4]
 800c92e:	9708      	str	r7, [sp, #32]
 800c930:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c934:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c938:	f000 fdd2 	bl	800d4e0 <nan>
 800c93c:	f996 3000 	ldrsb.w	r3, [r6]
 800c940:	2b02      	cmp	r3, #2
 800c942:	ed8d 0b06 	vstr	d0, [sp, #24]
 800c946:	d104      	bne.n	800c952 <asin+0x76>
 800c948:	f000 fdd2 	bl	800d4f0 <__errno>
 800c94c:	2321      	movs	r3, #33	; 0x21
 800c94e:	6003      	str	r3, [r0, #0]
 800c950:	e004      	b.n	800c95c <asin+0x80>
 800c952:	4668      	mov	r0, sp
 800c954:	f000 fdc1 	bl	800d4da <matherr>
 800c958:	2800      	cmp	r0, #0
 800c95a:	d0f5      	beq.n	800c948 <asin+0x6c>
 800c95c:	9b08      	ldr	r3, [sp, #32]
 800c95e:	b11b      	cbz	r3, 800c968 <asin+0x8c>
 800c960:	f000 fdc6 	bl	800d4f0 <__errno>
 800c964:	9b08      	ldr	r3, [sp, #32]
 800c966:	6003      	str	r3, [r0, #0]
 800c968:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c96c:	eeb0 0a48 	vmov.f32	s0, s16
 800c970:	eef0 0a68 	vmov.f32	s1, s17
 800c974:	b00b      	add	sp, #44	; 0x2c
 800c976:	ecbd 8b02 	vpop	{d8}
 800c97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c97c:	20000040 	.word	0x20000040
 800c980:	3ff00000 	.word	0x3ff00000
 800c984:	080144d9 	.word	0x080144d9
 800c988:	080142e0 	.word	0x080142e0

0800c98c <atan2>:
 800c98c:	f000 ba6c 	b.w	800ce68 <__ieee754_atan2>

0800c990 <sqrt>:
 800c990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c994:	ed2d 8b02 	vpush	{d8}
 800c998:	b08b      	sub	sp, #44	; 0x2c
 800c99a:	ec55 4b10 	vmov	r4, r5, d0
 800c99e:	f000 fb41 	bl	800d024 <__ieee754_sqrt>
 800c9a2:	4b26      	ldr	r3, [pc, #152]	; (800ca3c <sqrt+0xac>)
 800c9a4:	eeb0 8a40 	vmov.f32	s16, s0
 800c9a8:	eef0 8a60 	vmov.f32	s17, s1
 800c9ac:	f993 6000 	ldrsb.w	r6, [r3]
 800c9b0:	1c73      	adds	r3, r6, #1
 800c9b2:	d02a      	beq.n	800ca0a <sqrt+0x7a>
 800c9b4:	4622      	mov	r2, r4
 800c9b6:	462b      	mov	r3, r5
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	f7f4 f8b6 	bl	8000b2c <__aeabi_dcmpun>
 800c9c0:	4607      	mov	r7, r0
 800c9c2:	bb10      	cbnz	r0, 800ca0a <sqrt+0x7a>
 800c9c4:	f04f 0800 	mov.w	r8, #0
 800c9c8:	f04f 0900 	mov.w	r9, #0
 800c9cc:	4642      	mov	r2, r8
 800c9ce:	464b      	mov	r3, r9
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	f7f4 f882 	bl	8000adc <__aeabi_dcmplt>
 800c9d8:	b1b8      	cbz	r0, 800ca0a <sqrt+0x7a>
 800c9da:	2301      	movs	r3, #1
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	4b18      	ldr	r3, [pc, #96]	; (800ca40 <sqrt+0xb0>)
 800c9e0:	9301      	str	r3, [sp, #4]
 800c9e2:	9708      	str	r7, [sp, #32]
 800c9e4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c9e8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c9ec:	b9b6      	cbnz	r6, 800ca1c <sqrt+0x8c>
 800c9ee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c9f2:	4668      	mov	r0, sp
 800c9f4:	f000 fd71 	bl	800d4da <matherr>
 800c9f8:	b1d0      	cbz	r0, 800ca30 <sqrt+0xa0>
 800c9fa:	9b08      	ldr	r3, [sp, #32]
 800c9fc:	b11b      	cbz	r3, 800ca06 <sqrt+0x76>
 800c9fe:	f000 fd77 	bl	800d4f0 <__errno>
 800ca02:	9b08      	ldr	r3, [sp, #32]
 800ca04:	6003      	str	r3, [r0, #0]
 800ca06:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ca0a:	eeb0 0a48 	vmov.f32	s0, s16
 800ca0e:	eef0 0a68 	vmov.f32	s1, s17
 800ca12:	b00b      	add	sp, #44	; 0x2c
 800ca14:	ecbd 8b02 	vpop	{d8}
 800ca18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca1c:	4642      	mov	r2, r8
 800ca1e:	464b      	mov	r3, r9
 800ca20:	4640      	mov	r0, r8
 800ca22:	4649      	mov	r1, r9
 800ca24:	f7f3 ff12 	bl	800084c <__aeabi_ddiv>
 800ca28:	2e02      	cmp	r6, #2
 800ca2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ca2e:	d1e0      	bne.n	800c9f2 <sqrt+0x62>
 800ca30:	f000 fd5e 	bl	800d4f0 <__errno>
 800ca34:	2321      	movs	r3, #33	; 0x21
 800ca36:	6003      	str	r3, [r0, #0]
 800ca38:	e7df      	b.n	800c9fa <sqrt+0x6a>
 800ca3a:	bf00      	nop
 800ca3c:	20000040 	.word	0x20000040
 800ca40:	080142e5 	.word	0x080142e5
 800ca44:	00000000 	.word	0x00000000

0800ca48 <__ieee754_asin>:
 800ca48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4c:	ec55 4b10 	vmov	r4, r5, d0
 800ca50:	4bcb      	ldr	r3, [pc, #812]	; (800cd80 <__ieee754_asin+0x338>)
 800ca52:	b087      	sub	sp, #28
 800ca54:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800ca58:	429f      	cmp	r7, r3
 800ca5a:	9501      	str	r5, [sp, #4]
 800ca5c:	dd31      	ble.n	800cac2 <__ieee754_asin+0x7a>
 800ca5e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800ca62:	ee10 3a10 	vmov	r3, s0
 800ca66:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800ca6a:	433b      	orrs	r3, r7
 800ca6c:	d117      	bne.n	800ca9e <__ieee754_asin+0x56>
 800ca6e:	a3aa      	add	r3, pc, #680	; (adr r3, 800cd18 <__ieee754_asin+0x2d0>)
 800ca70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca74:	ee10 0a10 	vmov	r0, s0
 800ca78:	4629      	mov	r1, r5
 800ca7a:	f7f3 fdbd 	bl	80005f8 <__aeabi_dmul>
 800ca7e:	a3a8      	add	r3, pc, #672	; (adr r3, 800cd20 <__ieee754_asin+0x2d8>)
 800ca80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca84:	4606      	mov	r6, r0
 800ca86:	460f      	mov	r7, r1
 800ca88:	4620      	mov	r0, r4
 800ca8a:	4629      	mov	r1, r5
 800ca8c:	f7f3 fdb4 	bl	80005f8 <__aeabi_dmul>
 800ca90:	4602      	mov	r2, r0
 800ca92:	460b      	mov	r3, r1
 800ca94:	4630      	mov	r0, r6
 800ca96:	4639      	mov	r1, r7
 800ca98:	f7f3 fbf8 	bl	800028c <__adddf3>
 800ca9c:	e00a      	b.n	800cab4 <__ieee754_asin+0x6c>
 800ca9e:	ee10 2a10 	vmov	r2, s0
 800caa2:	462b      	mov	r3, r5
 800caa4:	4620      	mov	r0, r4
 800caa6:	4629      	mov	r1, r5
 800caa8:	f7f3 fbee 	bl	8000288 <__aeabi_dsub>
 800caac:	4602      	mov	r2, r0
 800caae:	460b      	mov	r3, r1
 800cab0:	f7f3 fecc 	bl	800084c <__aeabi_ddiv>
 800cab4:	4604      	mov	r4, r0
 800cab6:	460d      	mov	r5, r1
 800cab8:	ec45 4b10 	vmov	d0, r4, r5
 800cabc:	b007      	add	sp, #28
 800cabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac2:	4bb0      	ldr	r3, [pc, #704]	; (800cd84 <__ieee754_asin+0x33c>)
 800cac4:	429f      	cmp	r7, r3
 800cac6:	dc11      	bgt.n	800caec <__ieee754_asin+0xa4>
 800cac8:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800cacc:	f280 80ae 	bge.w	800cc2c <__ieee754_asin+0x1e4>
 800cad0:	a395      	add	r3, pc, #596	; (adr r3, 800cd28 <__ieee754_asin+0x2e0>)
 800cad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad6:	ee10 0a10 	vmov	r0, s0
 800cada:	4629      	mov	r1, r5
 800cadc:	f7f3 fbd6 	bl	800028c <__adddf3>
 800cae0:	2200      	movs	r2, #0
 800cae2:	4ba9      	ldr	r3, [pc, #676]	; (800cd88 <__ieee754_asin+0x340>)
 800cae4:	f7f4 f818 	bl	8000b18 <__aeabi_dcmpgt>
 800cae8:	2800      	cmp	r0, #0
 800caea:	d1e5      	bne.n	800cab8 <__ieee754_asin+0x70>
 800caec:	ec45 4b10 	vmov	d0, r4, r5
 800caf0:	f000 fcea 	bl	800d4c8 <fabs>
 800caf4:	2000      	movs	r0, #0
 800caf6:	ec53 2b10 	vmov	r2, r3, d0
 800cafa:	49a3      	ldr	r1, [pc, #652]	; (800cd88 <__ieee754_asin+0x340>)
 800cafc:	f7f3 fbc4 	bl	8000288 <__aeabi_dsub>
 800cb00:	2200      	movs	r2, #0
 800cb02:	4ba2      	ldr	r3, [pc, #648]	; (800cd8c <__ieee754_asin+0x344>)
 800cb04:	f7f3 fd78 	bl	80005f8 <__aeabi_dmul>
 800cb08:	a389      	add	r3, pc, #548	; (adr r3, 800cd30 <__ieee754_asin+0x2e8>)
 800cb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0e:	4604      	mov	r4, r0
 800cb10:	460d      	mov	r5, r1
 800cb12:	f7f3 fd71 	bl	80005f8 <__aeabi_dmul>
 800cb16:	a388      	add	r3, pc, #544	; (adr r3, 800cd38 <__ieee754_asin+0x2f0>)
 800cb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1c:	f7f3 fbb6 	bl	800028c <__adddf3>
 800cb20:	4622      	mov	r2, r4
 800cb22:	462b      	mov	r3, r5
 800cb24:	f7f3 fd68 	bl	80005f8 <__aeabi_dmul>
 800cb28:	a385      	add	r3, pc, #532	; (adr r3, 800cd40 <__ieee754_asin+0x2f8>)
 800cb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2e:	f7f3 fbab 	bl	8000288 <__aeabi_dsub>
 800cb32:	4622      	mov	r2, r4
 800cb34:	462b      	mov	r3, r5
 800cb36:	f7f3 fd5f 	bl	80005f8 <__aeabi_dmul>
 800cb3a:	a383      	add	r3, pc, #524	; (adr r3, 800cd48 <__ieee754_asin+0x300>)
 800cb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb40:	f7f3 fba4 	bl	800028c <__adddf3>
 800cb44:	4622      	mov	r2, r4
 800cb46:	462b      	mov	r3, r5
 800cb48:	f7f3 fd56 	bl	80005f8 <__aeabi_dmul>
 800cb4c:	a380      	add	r3, pc, #512	; (adr r3, 800cd50 <__ieee754_asin+0x308>)
 800cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb52:	f7f3 fb99 	bl	8000288 <__aeabi_dsub>
 800cb56:	4622      	mov	r2, r4
 800cb58:	462b      	mov	r3, r5
 800cb5a:	f7f3 fd4d 	bl	80005f8 <__aeabi_dmul>
 800cb5e:	a37e      	add	r3, pc, #504	; (adr r3, 800cd58 <__ieee754_asin+0x310>)
 800cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb64:	f7f3 fb92 	bl	800028c <__adddf3>
 800cb68:	4622      	mov	r2, r4
 800cb6a:	462b      	mov	r3, r5
 800cb6c:	f7f3 fd44 	bl	80005f8 <__aeabi_dmul>
 800cb70:	a37b      	add	r3, pc, #492	; (adr r3, 800cd60 <__ieee754_asin+0x318>)
 800cb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb76:	4680      	mov	r8, r0
 800cb78:	4689      	mov	r9, r1
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	f7f3 fd3b 	bl	80005f8 <__aeabi_dmul>
 800cb82:	a379      	add	r3, pc, #484	; (adr r3, 800cd68 <__ieee754_asin+0x320>)
 800cb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb88:	f7f3 fb7e 	bl	8000288 <__aeabi_dsub>
 800cb8c:	4622      	mov	r2, r4
 800cb8e:	462b      	mov	r3, r5
 800cb90:	f7f3 fd32 	bl	80005f8 <__aeabi_dmul>
 800cb94:	a376      	add	r3, pc, #472	; (adr r3, 800cd70 <__ieee754_asin+0x328>)
 800cb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9a:	f7f3 fb77 	bl	800028c <__adddf3>
 800cb9e:	4622      	mov	r2, r4
 800cba0:	462b      	mov	r3, r5
 800cba2:	f7f3 fd29 	bl	80005f8 <__aeabi_dmul>
 800cba6:	a374      	add	r3, pc, #464	; (adr r3, 800cd78 <__ieee754_asin+0x330>)
 800cba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbac:	f7f3 fb6c 	bl	8000288 <__aeabi_dsub>
 800cbb0:	4622      	mov	r2, r4
 800cbb2:	462b      	mov	r3, r5
 800cbb4:	f7f3 fd20 	bl	80005f8 <__aeabi_dmul>
 800cbb8:	4b73      	ldr	r3, [pc, #460]	; (800cd88 <__ieee754_asin+0x340>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f7f3 fb66 	bl	800028c <__adddf3>
 800cbc0:	ec45 4b10 	vmov	d0, r4, r5
 800cbc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbc8:	f000 fa2c 	bl	800d024 <__ieee754_sqrt>
 800cbcc:	4b70      	ldr	r3, [pc, #448]	; (800cd90 <__ieee754_asin+0x348>)
 800cbce:	429f      	cmp	r7, r3
 800cbd0:	ec5b ab10 	vmov	sl, fp, d0
 800cbd4:	f340 80de 	ble.w	800cd94 <__ieee754_asin+0x34c>
 800cbd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbdc:	4640      	mov	r0, r8
 800cbde:	4649      	mov	r1, r9
 800cbe0:	f7f3 fe34 	bl	800084c <__aeabi_ddiv>
 800cbe4:	4652      	mov	r2, sl
 800cbe6:	465b      	mov	r3, fp
 800cbe8:	f7f3 fd06 	bl	80005f8 <__aeabi_dmul>
 800cbec:	4652      	mov	r2, sl
 800cbee:	465b      	mov	r3, fp
 800cbf0:	f7f3 fb4c 	bl	800028c <__adddf3>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	f7f3 fb48 	bl	800028c <__adddf3>
 800cbfc:	a348      	add	r3, pc, #288	; (adr r3, 800cd20 <__ieee754_asin+0x2d8>)
 800cbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc02:	f7f3 fb41 	bl	8000288 <__aeabi_dsub>
 800cc06:	4602      	mov	r2, r0
 800cc08:	460b      	mov	r3, r1
 800cc0a:	a143      	add	r1, pc, #268	; (adr r1, 800cd18 <__ieee754_asin+0x2d0>)
 800cc0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc10:	f7f3 fb3a 	bl	8000288 <__aeabi_dsub>
 800cc14:	9b01      	ldr	r3, [sp, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	bfdc      	itt	le
 800cc1a:	4602      	movle	r2, r0
 800cc1c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800cc20:	4604      	mov	r4, r0
 800cc22:	460d      	mov	r5, r1
 800cc24:	bfdc      	itt	le
 800cc26:	4614      	movle	r4, r2
 800cc28:	461d      	movle	r5, r3
 800cc2a:	e745      	b.n	800cab8 <__ieee754_asin+0x70>
 800cc2c:	ee10 2a10 	vmov	r2, s0
 800cc30:	ee10 0a10 	vmov	r0, s0
 800cc34:	462b      	mov	r3, r5
 800cc36:	4629      	mov	r1, r5
 800cc38:	f7f3 fcde 	bl	80005f8 <__aeabi_dmul>
 800cc3c:	a33c      	add	r3, pc, #240	; (adr r3, 800cd30 <__ieee754_asin+0x2e8>)
 800cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc42:	4606      	mov	r6, r0
 800cc44:	460f      	mov	r7, r1
 800cc46:	f7f3 fcd7 	bl	80005f8 <__aeabi_dmul>
 800cc4a:	a33b      	add	r3, pc, #236	; (adr r3, 800cd38 <__ieee754_asin+0x2f0>)
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	f7f3 fb1c 	bl	800028c <__adddf3>
 800cc54:	4632      	mov	r2, r6
 800cc56:	463b      	mov	r3, r7
 800cc58:	f7f3 fcce 	bl	80005f8 <__aeabi_dmul>
 800cc5c:	a338      	add	r3, pc, #224	; (adr r3, 800cd40 <__ieee754_asin+0x2f8>)
 800cc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc62:	f7f3 fb11 	bl	8000288 <__aeabi_dsub>
 800cc66:	4632      	mov	r2, r6
 800cc68:	463b      	mov	r3, r7
 800cc6a:	f7f3 fcc5 	bl	80005f8 <__aeabi_dmul>
 800cc6e:	a336      	add	r3, pc, #216	; (adr r3, 800cd48 <__ieee754_asin+0x300>)
 800cc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc74:	f7f3 fb0a 	bl	800028c <__adddf3>
 800cc78:	4632      	mov	r2, r6
 800cc7a:	463b      	mov	r3, r7
 800cc7c:	f7f3 fcbc 	bl	80005f8 <__aeabi_dmul>
 800cc80:	a333      	add	r3, pc, #204	; (adr r3, 800cd50 <__ieee754_asin+0x308>)
 800cc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc86:	f7f3 faff 	bl	8000288 <__aeabi_dsub>
 800cc8a:	4632      	mov	r2, r6
 800cc8c:	463b      	mov	r3, r7
 800cc8e:	f7f3 fcb3 	bl	80005f8 <__aeabi_dmul>
 800cc92:	a331      	add	r3, pc, #196	; (adr r3, 800cd58 <__ieee754_asin+0x310>)
 800cc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc98:	f7f3 faf8 	bl	800028c <__adddf3>
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	463b      	mov	r3, r7
 800cca0:	f7f3 fcaa 	bl	80005f8 <__aeabi_dmul>
 800cca4:	a32e      	add	r3, pc, #184	; (adr r3, 800cd60 <__ieee754_asin+0x318>)
 800cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccaa:	4680      	mov	r8, r0
 800ccac:	4689      	mov	r9, r1
 800ccae:	4630      	mov	r0, r6
 800ccb0:	4639      	mov	r1, r7
 800ccb2:	f7f3 fca1 	bl	80005f8 <__aeabi_dmul>
 800ccb6:	a32c      	add	r3, pc, #176	; (adr r3, 800cd68 <__ieee754_asin+0x320>)
 800ccb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbc:	f7f3 fae4 	bl	8000288 <__aeabi_dsub>
 800ccc0:	4632      	mov	r2, r6
 800ccc2:	463b      	mov	r3, r7
 800ccc4:	f7f3 fc98 	bl	80005f8 <__aeabi_dmul>
 800ccc8:	a329      	add	r3, pc, #164	; (adr r3, 800cd70 <__ieee754_asin+0x328>)
 800ccca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccce:	f7f3 fadd 	bl	800028c <__adddf3>
 800ccd2:	4632      	mov	r2, r6
 800ccd4:	463b      	mov	r3, r7
 800ccd6:	f7f3 fc8f 	bl	80005f8 <__aeabi_dmul>
 800ccda:	a327      	add	r3, pc, #156	; (adr r3, 800cd78 <__ieee754_asin+0x330>)
 800ccdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce0:	f7f3 fad2 	bl	8000288 <__aeabi_dsub>
 800cce4:	4632      	mov	r2, r6
 800cce6:	463b      	mov	r3, r7
 800cce8:	f7f3 fc86 	bl	80005f8 <__aeabi_dmul>
 800ccec:	2200      	movs	r2, #0
 800ccee:	4b26      	ldr	r3, [pc, #152]	; (800cd88 <__ieee754_asin+0x340>)
 800ccf0:	f7f3 facc 	bl	800028c <__adddf3>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4640      	mov	r0, r8
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	f7f3 fda6 	bl	800084c <__aeabi_ddiv>
 800cd00:	4622      	mov	r2, r4
 800cd02:	462b      	mov	r3, r5
 800cd04:	f7f3 fc78 	bl	80005f8 <__aeabi_dmul>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	4629      	mov	r1, r5
 800cd10:	e6c2      	b.n	800ca98 <__ieee754_asin+0x50>
 800cd12:	bf00      	nop
 800cd14:	f3af 8000 	nop.w
 800cd18:	54442d18 	.word	0x54442d18
 800cd1c:	3ff921fb 	.word	0x3ff921fb
 800cd20:	33145c07 	.word	0x33145c07
 800cd24:	3c91a626 	.word	0x3c91a626
 800cd28:	8800759c 	.word	0x8800759c
 800cd2c:	7e37e43c 	.word	0x7e37e43c
 800cd30:	0dfdf709 	.word	0x0dfdf709
 800cd34:	3f023de1 	.word	0x3f023de1
 800cd38:	7501b288 	.word	0x7501b288
 800cd3c:	3f49efe0 	.word	0x3f49efe0
 800cd40:	b5688f3b 	.word	0xb5688f3b
 800cd44:	3fa48228 	.word	0x3fa48228
 800cd48:	0e884455 	.word	0x0e884455
 800cd4c:	3fc9c155 	.word	0x3fc9c155
 800cd50:	03eb6f7d 	.word	0x03eb6f7d
 800cd54:	3fd4d612 	.word	0x3fd4d612
 800cd58:	55555555 	.word	0x55555555
 800cd5c:	3fc55555 	.word	0x3fc55555
 800cd60:	b12e9282 	.word	0xb12e9282
 800cd64:	3fb3b8c5 	.word	0x3fb3b8c5
 800cd68:	1b8d0159 	.word	0x1b8d0159
 800cd6c:	3fe6066c 	.word	0x3fe6066c
 800cd70:	9c598ac8 	.word	0x9c598ac8
 800cd74:	40002ae5 	.word	0x40002ae5
 800cd78:	1c8a2d4b 	.word	0x1c8a2d4b
 800cd7c:	40033a27 	.word	0x40033a27
 800cd80:	3fefffff 	.word	0x3fefffff
 800cd84:	3fdfffff 	.word	0x3fdfffff
 800cd88:	3ff00000 	.word	0x3ff00000
 800cd8c:	3fe00000 	.word	0x3fe00000
 800cd90:	3fef3332 	.word	0x3fef3332
 800cd94:	ee10 2a10 	vmov	r2, s0
 800cd98:	ee10 0a10 	vmov	r0, s0
 800cd9c:	465b      	mov	r3, fp
 800cd9e:	4659      	mov	r1, fp
 800cda0:	f7f3 fa74 	bl	800028c <__adddf3>
 800cda4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cda8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cdac:	4640      	mov	r0, r8
 800cdae:	4649      	mov	r1, r9
 800cdb0:	f7f3 fd4c 	bl	800084c <__aeabi_ddiv>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdbc:	f7f3 fc1c 	bl	80005f8 <__aeabi_dmul>
 800cdc0:	2600      	movs	r6, #0
 800cdc2:	4680      	mov	r8, r0
 800cdc4:	4689      	mov	r9, r1
 800cdc6:	4632      	mov	r2, r6
 800cdc8:	465b      	mov	r3, fp
 800cdca:	4630      	mov	r0, r6
 800cdcc:	4659      	mov	r1, fp
 800cdce:	f7f3 fc13 	bl	80005f8 <__aeabi_dmul>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	4629      	mov	r1, r5
 800cdda:	f7f3 fa55 	bl	8000288 <__aeabi_dsub>
 800cdde:	4632      	mov	r2, r6
 800cde0:	4604      	mov	r4, r0
 800cde2:	460d      	mov	r5, r1
 800cde4:	465b      	mov	r3, fp
 800cde6:	4650      	mov	r0, sl
 800cde8:	4659      	mov	r1, fp
 800cdea:	f7f3 fa4f 	bl	800028c <__adddf3>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	4629      	mov	r1, r5
 800cdf6:	f7f3 fd29 	bl	800084c <__aeabi_ddiv>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	f7f3 fa45 	bl	800028c <__adddf3>
 800ce02:	4602      	mov	r2, r0
 800ce04:	460b      	mov	r3, r1
 800ce06:	a114      	add	r1, pc, #80	; (adr r1, 800ce58 <__ieee754_asin+0x410>)
 800ce08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce0c:	f7f3 fa3c 	bl	8000288 <__aeabi_dsub>
 800ce10:	4602      	mov	r2, r0
 800ce12:	460b      	mov	r3, r1
 800ce14:	4640      	mov	r0, r8
 800ce16:	4649      	mov	r1, r9
 800ce18:	f7f3 fa36 	bl	8000288 <__aeabi_dsub>
 800ce1c:	465f      	mov	r7, fp
 800ce1e:	4604      	mov	r4, r0
 800ce20:	460d      	mov	r5, r1
 800ce22:	4632      	mov	r2, r6
 800ce24:	465b      	mov	r3, fp
 800ce26:	4630      	mov	r0, r6
 800ce28:	4639      	mov	r1, r7
 800ce2a:	f7f3 fa2f 	bl	800028c <__adddf3>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	460b      	mov	r3, r1
 800ce32:	a10b      	add	r1, pc, #44	; (adr r1, 800ce60 <__ieee754_asin+0x418>)
 800ce34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce38:	f7f3 fa26 	bl	8000288 <__aeabi_dsub>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	460b      	mov	r3, r1
 800ce40:	4620      	mov	r0, r4
 800ce42:	4629      	mov	r1, r5
 800ce44:	f7f3 fa20 	bl	8000288 <__aeabi_dsub>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	460b      	mov	r3, r1
 800ce4c:	a104      	add	r1, pc, #16	; (adr r1, 800ce60 <__ieee754_asin+0x418>)
 800ce4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce52:	e6dd      	b.n	800cc10 <__ieee754_asin+0x1c8>
 800ce54:	f3af 8000 	nop.w
 800ce58:	33145c07 	.word	0x33145c07
 800ce5c:	3c91a626 	.word	0x3c91a626
 800ce60:	54442d18 	.word	0x54442d18
 800ce64:	3fe921fb 	.word	0x3fe921fb

0800ce68 <__ieee754_atan2>:
 800ce68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce6c:	ec57 6b11 	vmov	r6, r7, d1
 800ce70:	4273      	negs	r3, r6
 800ce72:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ce76:	4333      	orrs	r3, r6
 800ce78:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800d020 <__ieee754_atan2+0x1b8>
 800ce7c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ce80:	4573      	cmp	r3, lr
 800ce82:	ec51 0b10 	vmov	r0, r1, d0
 800ce86:	ee11 8a10 	vmov	r8, s2
 800ce8a:	d80a      	bhi.n	800cea2 <__ieee754_atan2+0x3a>
 800ce8c:	4244      	negs	r4, r0
 800ce8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce92:	4304      	orrs	r4, r0
 800ce94:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ce98:	4574      	cmp	r4, lr
 800ce9a:	468c      	mov	ip, r1
 800ce9c:	ee10 9a10 	vmov	r9, s0
 800cea0:	d907      	bls.n	800ceb2 <__ieee754_atan2+0x4a>
 800cea2:	4632      	mov	r2, r6
 800cea4:	463b      	mov	r3, r7
 800cea6:	f7f3 f9f1 	bl	800028c <__adddf3>
 800ceaa:	ec41 0b10 	vmov	d0, r0, r1
 800ceae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceb2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ceb6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ceba:	4334      	orrs	r4, r6
 800cebc:	d103      	bne.n	800cec6 <__ieee754_atan2+0x5e>
 800cebe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cec2:	f000 b961 	b.w	800d188 <atan>
 800cec6:	17bc      	asrs	r4, r7, #30
 800cec8:	f004 0402 	and.w	r4, r4, #2
 800cecc:	ea53 0909 	orrs.w	r9, r3, r9
 800ced0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ced4:	d107      	bne.n	800cee6 <__ieee754_atan2+0x7e>
 800ced6:	2c02      	cmp	r4, #2
 800ced8:	d073      	beq.n	800cfc2 <__ieee754_atan2+0x15a>
 800ceda:	2c03      	cmp	r4, #3
 800cedc:	d1e5      	bne.n	800ceaa <__ieee754_atan2+0x42>
 800cede:	a13e      	add	r1, pc, #248	; (adr r1, 800cfd8 <__ieee754_atan2+0x170>)
 800cee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cee4:	e7e1      	b.n	800ceaa <__ieee754_atan2+0x42>
 800cee6:	ea52 0808 	orrs.w	r8, r2, r8
 800ceea:	d106      	bne.n	800cefa <__ieee754_atan2+0x92>
 800ceec:	f1bc 0f00 	cmp.w	ip, #0
 800cef0:	da6b      	bge.n	800cfca <__ieee754_atan2+0x162>
 800cef2:	a13b      	add	r1, pc, #236	; (adr r1, 800cfe0 <__ieee754_atan2+0x178>)
 800cef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cef8:	e7d7      	b.n	800ceaa <__ieee754_atan2+0x42>
 800cefa:	4572      	cmp	r2, lr
 800cefc:	d120      	bne.n	800cf40 <__ieee754_atan2+0xd8>
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d111      	bne.n	800cf26 <__ieee754_atan2+0xbe>
 800cf02:	2c02      	cmp	r4, #2
 800cf04:	d007      	beq.n	800cf16 <__ieee754_atan2+0xae>
 800cf06:	2c03      	cmp	r4, #3
 800cf08:	d009      	beq.n	800cf1e <__ieee754_atan2+0xb6>
 800cf0a:	2c01      	cmp	r4, #1
 800cf0c:	d155      	bne.n	800cfba <__ieee754_atan2+0x152>
 800cf0e:	a136      	add	r1, pc, #216	; (adr r1, 800cfe8 <__ieee754_atan2+0x180>)
 800cf10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf14:	e7c9      	b.n	800ceaa <__ieee754_atan2+0x42>
 800cf16:	a136      	add	r1, pc, #216	; (adr r1, 800cff0 <__ieee754_atan2+0x188>)
 800cf18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf1c:	e7c5      	b.n	800ceaa <__ieee754_atan2+0x42>
 800cf1e:	a136      	add	r1, pc, #216	; (adr r1, 800cff8 <__ieee754_atan2+0x190>)
 800cf20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf24:	e7c1      	b.n	800ceaa <__ieee754_atan2+0x42>
 800cf26:	2c02      	cmp	r4, #2
 800cf28:	d04b      	beq.n	800cfc2 <__ieee754_atan2+0x15a>
 800cf2a:	2c03      	cmp	r4, #3
 800cf2c:	d0d7      	beq.n	800cede <__ieee754_atan2+0x76>
 800cf2e:	2c01      	cmp	r4, #1
 800cf30:	f04f 0000 	mov.w	r0, #0
 800cf34:	d102      	bne.n	800cf3c <__ieee754_atan2+0xd4>
 800cf36:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cf3a:	e7b6      	b.n	800ceaa <__ieee754_atan2+0x42>
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	e7b4      	b.n	800ceaa <__ieee754_atan2+0x42>
 800cf40:	4573      	cmp	r3, lr
 800cf42:	d0d3      	beq.n	800ceec <__ieee754_atan2+0x84>
 800cf44:	1a9b      	subs	r3, r3, r2
 800cf46:	151b      	asrs	r3, r3, #20
 800cf48:	2b3c      	cmp	r3, #60	; 0x3c
 800cf4a:	dc1e      	bgt.n	800cf8a <__ieee754_atan2+0x122>
 800cf4c:	2f00      	cmp	r7, #0
 800cf4e:	da01      	bge.n	800cf54 <__ieee754_atan2+0xec>
 800cf50:	333c      	adds	r3, #60	; 0x3c
 800cf52:	db1e      	blt.n	800cf92 <__ieee754_atan2+0x12a>
 800cf54:	4632      	mov	r2, r6
 800cf56:	463b      	mov	r3, r7
 800cf58:	f7f3 fc78 	bl	800084c <__aeabi_ddiv>
 800cf5c:	ec41 0b10 	vmov	d0, r0, r1
 800cf60:	f000 fab2 	bl	800d4c8 <fabs>
 800cf64:	f000 f910 	bl	800d188 <atan>
 800cf68:	ec51 0b10 	vmov	r0, r1, d0
 800cf6c:	2c01      	cmp	r4, #1
 800cf6e:	d013      	beq.n	800cf98 <__ieee754_atan2+0x130>
 800cf70:	2c02      	cmp	r4, #2
 800cf72:	d015      	beq.n	800cfa0 <__ieee754_atan2+0x138>
 800cf74:	2c00      	cmp	r4, #0
 800cf76:	d098      	beq.n	800ceaa <__ieee754_atan2+0x42>
 800cf78:	a321      	add	r3, pc, #132	; (adr r3, 800d000 <__ieee754_atan2+0x198>)
 800cf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7e:	f7f3 f983 	bl	8000288 <__aeabi_dsub>
 800cf82:	a321      	add	r3, pc, #132	; (adr r3, 800d008 <__ieee754_atan2+0x1a0>)
 800cf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf88:	e014      	b.n	800cfb4 <__ieee754_atan2+0x14c>
 800cf8a:	a121      	add	r1, pc, #132	; (adr r1, 800d010 <__ieee754_atan2+0x1a8>)
 800cf8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf90:	e7ec      	b.n	800cf6c <__ieee754_atan2+0x104>
 800cf92:	2000      	movs	r0, #0
 800cf94:	2100      	movs	r1, #0
 800cf96:	e7e9      	b.n	800cf6c <__ieee754_atan2+0x104>
 800cf98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	e784      	b.n	800ceaa <__ieee754_atan2+0x42>
 800cfa0:	a317      	add	r3, pc, #92	; (adr r3, 800d000 <__ieee754_atan2+0x198>)
 800cfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa6:	f7f3 f96f 	bl	8000288 <__aeabi_dsub>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	460b      	mov	r3, r1
 800cfae:	a116      	add	r1, pc, #88	; (adr r1, 800d008 <__ieee754_atan2+0x1a0>)
 800cfb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfb4:	f7f3 f968 	bl	8000288 <__aeabi_dsub>
 800cfb8:	e777      	b.n	800ceaa <__ieee754_atan2+0x42>
 800cfba:	a117      	add	r1, pc, #92	; (adr r1, 800d018 <__ieee754_atan2+0x1b0>)
 800cfbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfc0:	e773      	b.n	800ceaa <__ieee754_atan2+0x42>
 800cfc2:	a111      	add	r1, pc, #68	; (adr r1, 800d008 <__ieee754_atan2+0x1a0>)
 800cfc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfc8:	e76f      	b.n	800ceaa <__ieee754_atan2+0x42>
 800cfca:	a111      	add	r1, pc, #68	; (adr r1, 800d010 <__ieee754_atan2+0x1a8>)
 800cfcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfd0:	e76b      	b.n	800ceaa <__ieee754_atan2+0x42>
 800cfd2:	bf00      	nop
 800cfd4:	f3af 8000 	nop.w
 800cfd8:	54442d18 	.word	0x54442d18
 800cfdc:	c00921fb 	.word	0xc00921fb
 800cfe0:	54442d18 	.word	0x54442d18
 800cfe4:	bff921fb 	.word	0xbff921fb
 800cfe8:	54442d18 	.word	0x54442d18
 800cfec:	bfe921fb 	.word	0xbfe921fb
 800cff0:	7f3321d2 	.word	0x7f3321d2
 800cff4:	4002d97c 	.word	0x4002d97c
 800cff8:	7f3321d2 	.word	0x7f3321d2
 800cffc:	c002d97c 	.word	0xc002d97c
 800d000:	33145c07 	.word	0x33145c07
 800d004:	3ca1a626 	.word	0x3ca1a626
 800d008:	54442d18 	.word	0x54442d18
 800d00c:	400921fb 	.word	0x400921fb
 800d010:	54442d18 	.word	0x54442d18
 800d014:	3ff921fb 	.word	0x3ff921fb
 800d018:	54442d18 	.word	0x54442d18
 800d01c:	3fe921fb 	.word	0x3fe921fb
 800d020:	7ff00000 	.word	0x7ff00000

0800d024 <__ieee754_sqrt>:
 800d024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d028:	4955      	ldr	r1, [pc, #340]	; (800d180 <__ieee754_sqrt+0x15c>)
 800d02a:	ec55 4b10 	vmov	r4, r5, d0
 800d02e:	43a9      	bics	r1, r5
 800d030:	462b      	mov	r3, r5
 800d032:	462a      	mov	r2, r5
 800d034:	d112      	bne.n	800d05c <__ieee754_sqrt+0x38>
 800d036:	ee10 2a10 	vmov	r2, s0
 800d03a:	ee10 0a10 	vmov	r0, s0
 800d03e:	4629      	mov	r1, r5
 800d040:	f7f3 fada 	bl	80005f8 <__aeabi_dmul>
 800d044:	4602      	mov	r2, r0
 800d046:	460b      	mov	r3, r1
 800d048:	4620      	mov	r0, r4
 800d04a:	4629      	mov	r1, r5
 800d04c:	f7f3 f91e 	bl	800028c <__adddf3>
 800d050:	4604      	mov	r4, r0
 800d052:	460d      	mov	r5, r1
 800d054:	ec45 4b10 	vmov	d0, r4, r5
 800d058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d05c:	2d00      	cmp	r5, #0
 800d05e:	ee10 0a10 	vmov	r0, s0
 800d062:	4621      	mov	r1, r4
 800d064:	dc0f      	bgt.n	800d086 <__ieee754_sqrt+0x62>
 800d066:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d06a:	4330      	orrs	r0, r6
 800d06c:	d0f2      	beq.n	800d054 <__ieee754_sqrt+0x30>
 800d06e:	b155      	cbz	r5, 800d086 <__ieee754_sqrt+0x62>
 800d070:	ee10 2a10 	vmov	r2, s0
 800d074:	4620      	mov	r0, r4
 800d076:	4629      	mov	r1, r5
 800d078:	f7f3 f906 	bl	8000288 <__aeabi_dsub>
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	f7f3 fbe4 	bl	800084c <__aeabi_ddiv>
 800d084:	e7e4      	b.n	800d050 <__ieee754_sqrt+0x2c>
 800d086:	151b      	asrs	r3, r3, #20
 800d088:	d073      	beq.n	800d172 <__ieee754_sqrt+0x14e>
 800d08a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d08e:	07dd      	lsls	r5, r3, #31
 800d090:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d094:	bf48      	it	mi
 800d096:	0fc8      	lsrmi	r0, r1, #31
 800d098:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d09c:	bf44      	itt	mi
 800d09e:	0049      	lslmi	r1, r1, #1
 800d0a0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800d0a4:	2500      	movs	r5, #0
 800d0a6:	1058      	asrs	r0, r3, #1
 800d0a8:	0fcb      	lsrs	r3, r1, #31
 800d0aa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d0ae:	0049      	lsls	r1, r1, #1
 800d0b0:	2316      	movs	r3, #22
 800d0b2:	462c      	mov	r4, r5
 800d0b4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d0b8:	19a7      	adds	r7, r4, r6
 800d0ba:	4297      	cmp	r7, r2
 800d0bc:	bfde      	ittt	le
 800d0be:	19bc      	addle	r4, r7, r6
 800d0c0:	1bd2      	suble	r2, r2, r7
 800d0c2:	19ad      	addle	r5, r5, r6
 800d0c4:	0fcf      	lsrs	r7, r1, #31
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800d0cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d0d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d0d4:	d1f0      	bne.n	800d0b8 <__ieee754_sqrt+0x94>
 800d0d6:	f04f 0c20 	mov.w	ip, #32
 800d0da:	469e      	mov	lr, r3
 800d0dc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d0e0:	42a2      	cmp	r2, r4
 800d0e2:	eb06 070e 	add.w	r7, r6, lr
 800d0e6:	dc02      	bgt.n	800d0ee <__ieee754_sqrt+0xca>
 800d0e8:	d112      	bne.n	800d110 <__ieee754_sqrt+0xec>
 800d0ea:	428f      	cmp	r7, r1
 800d0ec:	d810      	bhi.n	800d110 <__ieee754_sqrt+0xec>
 800d0ee:	2f00      	cmp	r7, #0
 800d0f0:	eb07 0e06 	add.w	lr, r7, r6
 800d0f4:	da42      	bge.n	800d17c <__ieee754_sqrt+0x158>
 800d0f6:	f1be 0f00 	cmp.w	lr, #0
 800d0fa:	db3f      	blt.n	800d17c <__ieee754_sqrt+0x158>
 800d0fc:	f104 0801 	add.w	r8, r4, #1
 800d100:	1b12      	subs	r2, r2, r4
 800d102:	428f      	cmp	r7, r1
 800d104:	bf88      	it	hi
 800d106:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d10a:	1bc9      	subs	r1, r1, r7
 800d10c:	4433      	add	r3, r6
 800d10e:	4644      	mov	r4, r8
 800d110:	0052      	lsls	r2, r2, #1
 800d112:	f1bc 0c01 	subs.w	ip, ip, #1
 800d116:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800d11a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d11e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d122:	d1dd      	bne.n	800d0e0 <__ieee754_sqrt+0xbc>
 800d124:	430a      	orrs	r2, r1
 800d126:	d006      	beq.n	800d136 <__ieee754_sqrt+0x112>
 800d128:	1c5c      	adds	r4, r3, #1
 800d12a:	bf13      	iteet	ne
 800d12c:	3301      	addne	r3, #1
 800d12e:	3501      	addeq	r5, #1
 800d130:	4663      	moveq	r3, ip
 800d132:	f023 0301 	bicne.w	r3, r3, #1
 800d136:	106a      	asrs	r2, r5, #1
 800d138:	085b      	lsrs	r3, r3, #1
 800d13a:	07e9      	lsls	r1, r5, #31
 800d13c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d140:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d144:	bf48      	it	mi
 800d146:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d14a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800d14e:	461c      	mov	r4, r3
 800d150:	e780      	b.n	800d054 <__ieee754_sqrt+0x30>
 800d152:	0aca      	lsrs	r2, r1, #11
 800d154:	3815      	subs	r0, #21
 800d156:	0549      	lsls	r1, r1, #21
 800d158:	2a00      	cmp	r2, #0
 800d15a:	d0fa      	beq.n	800d152 <__ieee754_sqrt+0x12e>
 800d15c:	02d6      	lsls	r6, r2, #11
 800d15e:	d50a      	bpl.n	800d176 <__ieee754_sqrt+0x152>
 800d160:	f1c3 0420 	rsb	r4, r3, #32
 800d164:	fa21 f404 	lsr.w	r4, r1, r4
 800d168:	1e5d      	subs	r5, r3, #1
 800d16a:	4099      	lsls	r1, r3
 800d16c:	4322      	orrs	r2, r4
 800d16e:	1b43      	subs	r3, r0, r5
 800d170:	e78b      	b.n	800d08a <__ieee754_sqrt+0x66>
 800d172:	4618      	mov	r0, r3
 800d174:	e7f0      	b.n	800d158 <__ieee754_sqrt+0x134>
 800d176:	0052      	lsls	r2, r2, #1
 800d178:	3301      	adds	r3, #1
 800d17a:	e7ef      	b.n	800d15c <__ieee754_sqrt+0x138>
 800d17c:	46a0      	mov	r8, r4
 800d17e:	e7bf      	b.n	800d100 <__ieee754_sqrt+0xdc>
 800d180:	7ff00000 	.word	0x7ff00000
 800d184:	00000000 	.word	0x00000000

0800d188 <atan>:
 800d188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d18c:	ec55 4b10 	vmov	r4, r5, d0
 800d190:	4bc3      	ldr	r3, [pc, #780]	; (800d4a0 <atan+0x318>)
 800d192:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d196:	429e      	cmp	r6, r3
 800d198:	46ab      	mov	fp, r5
 800d19a:	dd18      	ble.n	800d1ce <atan+0x46>
 800d19c:	4bc1      	ldr	r3, [pc, #772]	; (800d4a4 <atan+0x31c>)
 800d19e:	429e      	cmp	r6, r3
 800d1a0:	dc01      	bgt.n	800d1a6 <atan+0x1e>
 800d1a2:	d109      	bne.n	800d1b8 <atan+0x30>
 800d1a4:	b144      	cbz	r4, 800d1b8 <atan+0x30>
 800d1a6:	4622      	mov	r2, r4
 800d1a8:	462b      	mov	r3, r5
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	f7f3 f86d 	bl	800028c <__adddf3>
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	460d      	mov	r5, r1
 800d1b6:	e006      	b.n	800d1c6 <atan+0x3e>
 800d1b8:	f1bb 0f00 	cmp.w	fp, #0
 800d1bc:	f340 8131 	ble.w	800d422 <atan+0x29a>
 800d1c0:	a59b      	add	r5, pc, #620	; (adr r5, 800d430 <atan+0x2a8>)
 800d1c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d1c6:	ec45 4b10 	vmov	d0, r4, r5
 800d1ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ce:	4bb6      	ldr	r3, [pc, #728]	; (800d4a8 <atan+0x320>)
 800d1d0:	429e      	cmp	r6, r3
 800d1d2:	dc14      	bgt.n	800d1fe <atan+0x76>
 800d1d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d1d8:	429e      	cmp	r6, r3
 800d1da:	dc0d      	bgt.n	800d1f8 <atan+0x70>
 800d1dc:	a396      	add	r3, pc, #600	; (adr r3, 800d438 <atan+0x2b0>)
 800d1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e2:	ee10 0a10 	vmov	r0, s0
 800d1e6:	4629      	mov	r1, r5
 800d1e8:	f7f3 f850 	bl	800028c <__adddf3>
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	4baf      	ldr	r3, [pc, #700]	; (800d4ac <atan+0x324>)
 800d1f0:	f7f3 fc92 	bl	8000b18 <__aeabi_dcmpgt>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	d1e6      	bne.n	800d1c6 <atan+0x3e>
 800d1f8:	f04f 3aff 	mov.w	sl, #4294967295
 800d1fc:	e02b      	b.n	800d256 <atan+0xce>
 800d1fe:	f000 f963 	bl	800d4c8 <fabs>
 800d202:	4bab      	ldr	r3, [pc, #684]	; (800d4b0 <atan+0x328>)
 800d204:	429e      	cmp	r6, r3
 800d206:	ec55 4b10 	vmov	r4, r5, d0
 800d20a:	f300 80bf 	bgt.w	800d38c <atan+0x204>
 800d20e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d212:	429e      	cmp	r6, r3
 800d214:	f300 80a0 	bgt.w	800d358 <atan+0x1d0>
 800d218:	ee10 2a10 	vmov	r2, s0
 800d21c:	ee10 0a10 	vmov	r0, s0
 800d220:	462b      	mov	r3, r5
 800d222:	4629      	mov	r1, r5
 800d224:	f7f3 f832 	bl	800028c <__adddf3>
 800d228:	2200      	movs	r2, #0
 800d22a:	4ba0      	ldr	r3, [pc, #640]	; (800d4ac <atan+0x324>)
 800d22c:	f7f3 f82c 	bl	8000288 <__aeabi_dsub>
 800d230:	2200      	movs	r2, #0
 800d232:	4606      	mov	r6, r0
 800d234:	460f      	mov	r7, r1
 800d236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d23a:	4620      	mov	r0, r4
 800d23c:	4629      	mov	r1, r5
 800d23e:	f7f3 f825 	bl	800028c <__adddf3>
 800d242:	4602      	mov	r2, r0
 800d244:	460b      	mov	r3, r1
 800d246:	4630      	mov	r0, r6
 800d248:	4639      	mov	r1, r7
 800d24a:	f7f3 faff 	bl	800084c <__aeabi_ddiv>
 800d24e:	f04f 0a00 	mov.w	sl, #0
 800d252:	4604      	mov	r4, r0
 800d254:	460d      	mov	r5, r1
 800d256:	4622      	mov	r2, r4
 800d258:	462b      	mov	r3, r5
 800d25a:	4620      	mov	r0, r4
 800d25c:	4629      	mov	r1, r5
 800d25e:	f7f3 f9cb 	bl	80005f8 <__aeabi_dmul>
 800d262:	4602      	mov	r2, r0
 800d264:	460b      	mov	r3, r1
 800d266:	4680      	mov	r8, r0
 800d268:	4689      	mov	r9, r1
 800d26a:	f7f3 f9c5 	bl	80005f8 <__aeabi_dmul>
 800d26e:	a374      	add	r3, pc, #464	; (adr r3, 800d440 <atan+0x2b8>)
 800d270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d274:	4606      	mov	r6, r0
 800d276:	460f      	mov	r7, r1
 800d278:	f7f3 f9be 	bl	80005f8 <__aeabi_dmul>
 800d27c:	a372      	add	r3, pc, #456	; (adr r3, 800d448 <atan+0x2c0>)
 800d27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d282:	f7f3 f803 	bl	800028c <__adddf3>
 800d286:	4632      	mov	r2, r6
 800d288:	463b      	mov	r3, r7
 800d28a:	f7f3 f9b5 	bl	80005f8 <__aeabi_dmul>
 800d28e:	a370      	add	r3, pc, #448	; (adr r3, 800d450 <atan+0x2c8>)
 800d290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d294:	f7f2 fffa 	bl	800028c <__adddf3>
 800d298:	4632      	mov	r2, r6
 800d29a:	463b      	mov	r3, r7
 800d29c:	f7f3 f9ac 	bl	80005f8 <__aeabi_dmul>
 800d2a0:	a36d      	add	r3, pc, #436	; (adr r3, 800d458 <atan+0x2d0>)
 800d2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a6:	f7f2 fff1 	bl	800028c <__adddf3>
 800d2aa:	4632      	mov	r2, r6
 800d2ac:	463b      	mov	r3, r7
 800d2ae:	f7f3 f9a3 	bl	80005f8 <__aeabi_dmul>
 800d2b2:	a36b      	add	r3, pc, #428	; (adr r3, 800d460 <atan+0x2d8>)
 800d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b8:	f7f2 ffe8 	bl	800028c <__adddf3>
 800d2bc:	4632      	mov	r2, r6
 800d2be:	463b      	mov	r3, r7
 800d2c0:	f7f3 f99a 	bl	80005f8 <__aeabi_dmul>
 800d2c4:	a368      	add	r3, pc, #416	; (adr r3, 800d468 <atan+0x2e0>)
 800d2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ca:	f7f2 ffdf 	bl	800028c <__adddf3>
 800d2ce:	4642      	mov	r2, r8
 800d2d0:	464b      	mov	r3, r9
 800d2d2:	f7f3 f991 	bl	80005f8 <__aeabi_dmul>
 800d2d6:	a366      	add	r3, pc, #408	; (adr r3, 800d470 <atan+0x2e8>)
 800d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2dc:	4680      	mov	r8, r0
 800d2de:	4689      	mov	r9, r1
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	4639      	mov	r1, r7
 800d2e4:	f7f3 f988 	bl	80005f8 <__aeabi_dmul>
 800d2e8:	a363      	add	r3, pc, #396	; (adr r3, 800d478 <atan+0x2f0>)
 800d2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ee:	f7f2 ffcb 	bl	8000288 <__aeabi_dsub>
 800d2f2:	4632      	mov	r2, r6
 800d2f4:	463b      	mov	r3, r7
 800d2f6:	f7f3 f97f 	bl	80005f8 <__aeabi_dmul>
 800d2fa:	a361      	add	r3, pc, #388	; (adr r3, 800d480 <atan+0x2f8>)
 800d2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d300:	f7f2 ffc2 	bl	8000288 <__aeabi_dsub>
 800d304:	4632      	mov	r2, r6
 800d306:	463b      	mov	r3, r7
 800d308:	f7f3 f976 	bl	80005f8 <__aeabi_dmul>
 800d30c:	a35e      	add	r3, pc, #376	; (adr r3, 800d488 <atan+0x300>)
 800d30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d312:	f7f2 ffb9 	bl	8000288 <__aeabi_dsub>
 800d316:	4632      	mov	r2, r6
 800d318:	463b      	mov	r3, r7
 800d31a:	f7f3 f96d 	bl	80005f8 <__aeabi_dmul>
 800d31e:	a35c      	add	r3, pc, #368	; (adr r3, 800d490 <atan+0x308>)
 800d320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d324:	f7f2 ffb0 	bl	8000288 <__aeabi_dsub>
 800d328:	4632      	mov	r2, r6
 800d32a:	463b      	mov	r3, r7
 800d32c:	f7f3 f964 	bl	80005f8 <__aeabi_dmul>
 800d330:	4602      	mov	r2, r0
 800d332:	460b      	mov	r3, r1
 800d334:	4640      	mov	r0, r8
 800d336:	4649      	mov	r1, r9
 800d338:	f7f2 ffa8 	bl	800028c <__adddf3>
 800d33c:	4622      	mov	r2, r4
 800d33e:	462b      	mov	r3, r5
 800d340:	f7f3 f95a 	bl	80005f8 <__aeabi_dmul>
 800d344:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d348:	4602      	mov	r2, r0
 800d34a:	460b      	mov	r3, r1
 800d34c:	d14b      	bne.n	800d3e6 <atan+0x25e>
 800d34e:	4620      	mov	r0, r4
 800d350:	4629      	mov	r1, r5
 800d352:	f7f2 ff99 	bl	8000288 <__aeabi_dsub>
 800d356:	e72c      	b.n	800d1b2 <atan+0x2a>
 800d358:	ee10 0a10 	vmov	r0, s0
 800d35c:	2200      	movs	r2, #0
 800d35e:	4b53      	ldr	r3, [pc, #332]	; (800d4ac <atan+0x324>)
 800d360:	4629      	mov	r1, r5
 800d362:	f7f2 ff91 	bl	8000288 <__aeabi_dsub>
 800d366:	2200      	movs	r2, #0
 800d368:	4606      	mov	r6, r0
 800d36a:	460f      	mov	r7, r1
 800d36c:	4b4f      	ldr	r3, [pc, #316]	; (800d4ac <atan+0x324>)
 800d36e:	4620      	mov	r0, r4
 800d370:	4629      	mov	r1, r5
 800d372:	f7f2 ff8b 	bl	800028c <__adddf3>
 800d376:	4602      	mov	r2, r0
 800d378:	460b      	mov	r3, r1
 800d37a:	4630      	mov	r0, r6
 800d37c:	4639      	mov	r1, r7
 800d37e:	f7f3 fa65 	bl	800084c <__aeabi_ddiv>
 800d382:	f04f 0a01 	mov.w	sl, #1
 800d386:	4604      	mov	r4, r0
 800d388:	460d      	mov	r5, r1
 800d38a:	e764      	b.n	800d256 <atan+0xce>
 800d38c:	4b49      	ldr	r3, [pc, #292]	; (800d4b4 <atan+0x32c>)
 800d38e:	429e      	cmp	r6, r3
 800d390:	dc1d      	bgt.n	800d3ce <atan+0x246>
 800d392:	ee10 0a10 	vmov	r0, s0
 800d396:	2200      	movs	r2, #0
 800d398:	4b47      	ldr	r3, [pc, #284]	; (800d4b8 <atan+0x330>)
 800d39a:	4629      	mov	r1, r5
 800d39c:	f7f2 ff74 	bl	8000288 <__aeabi_dsub>
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	4606      	mov	r6, r0
 800d3a4:	460f      	mov	r7, r1
 800d3a6:	4b44      	ldr	r3, [pc, #272]	; (800d4b8 <atan+0x330>)
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	4629      	mov	r1, r5
 800d3ac:	f7f3 f924 	bl	80005f8 <__aeabi_dmul>
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	4b3e      	ldr	r3, [pc, #248]	; (800d4ac <atan+0x324>)
 800d3b4:	f7f2 ff6a 	bl	800028c <__adddf3>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	460b      	mov	r3, r1
 800d3bc:	4630      	mov	r0, r6
 800d3be:	4639      	mov	r1, r7
 800d3c0:	f7f3 fa44 	bl	800084c <__aeabi_ddiv>
 800d3c4:	f04f 0a02 	mov.w	sl, #2
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	460d      	mov	r5, r1
 800d3cc:	e743      	b.n	800d256 <atan+0xce>
 800d3ce:	462b      	mov	r3, r5
 800d3d0:	ee10 2a10 	vmov	r2, s0
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	4939      	ldr	r1, [pc, #228]	; (800d4bc <atan+0x334>)
 800d3d8:	f7f3 fa38 	bl	800084c <__aeabi_ddiv>
 800d3dc:	f04f 0a03 	mov.w	sl, #3
 800d3e0:	4604      	mov	r4, r0
 800d3e2:	460d      	mov	r5, r1
 800d3e4:	e737      	b.n	800d256 <atan+0xce>
 800d3e6:	4b36      	ldr	r3, [pc, #216]	; (800d4c0 <atan+0x338>)
 800d3e8:	4e36      	ldr	r6, [pc, #216]	; (800d4c4 <atan+0x33c>)
 800d3ea:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800d3ee:	4456      	add	r6, sl
 800d3f0:	449a      	add	sl, r3
 800d3f2:	e9da 2300 	ldrd	r2, r3, [sl]
 800d3f6:	f7f2 ff47 	bl	8000288 <__aeabi_dsub>
 800d3fa:	4622      	mov	r2, r4
 800d3fc:	462b      	mov	r3, r5
 800d3fe:	f7f2 ff43 	bl	8000288 <__aeabi_dsub>
 800d402:	4602      	mov	r2, r0
 800d404:	460b      	mov	r3, r1
 800d406:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d40a:	f7f2 ff3d 	bl	8000288 <__aeabi_dsub>
 800d40e:	f1bb 0f00 	cmp.w	fp, #0
 800d412:	4604      	mov	r4, r0
 800d414:	460d      	mov	r5, r1
 800d416:	f6bf aed6 	bge.w	800d1c6 <atan+0x3e>
 800d41a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d41e:	461d      	mov	r5, r3
 800d420:	e6d1      	b.n	800d1c6 <atan+0x3e>
 800d422:	a51d      	add	r5, pc, #116	; (adr r5, 800d498 <atan+0x310>)
 800d424:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d428:	e6cd      	b.n	800d1c6 <atan+0x3e>
 800d42a:	bf00      	nop
 800d42c:	f3af 8000 	nop.w
 800d430:	54442d18 	.word	0x54442d18
 800d434:	3ff921fb 	.word	0x3ff921fb
 800d438:	8800759c 	.word	0x8800759c
 800d43c:	7e37e43c 	.word	0x7e37e43c
 800d440:	e322da11 	.word	0xe322da11
 800d444:	3f90ad3a 	.word	0x3f90ad3a
 800d448:	24760deb 	.word	0x24760deb
 800d44c:	3fa97b4b 	.word	0x3fa97b4b
 800d450:	a0d03d51 	.word	0xa0d03d51
 800d454:	3fb10d66 	.word	0x3fb10d66
 800d458:	c54c206e 	.word	0xc54c206e
 800d45c:	3fb745cd 	.word	0x3fb745cd
 800d460:	920083ff 	.word	0x920083ff
 800d464:	3fc24924 	.word	0x3fc24924
 800d468:	5555550d 	.word	0x5555550d
 800d46c:	3fd55555 	.word	0x3fd55555
 800d470:	2c6a6c2f 	.word	0x2c6a6c2f
 800d474:	bfa2b444 	.word	0xbfa2b444
 800d478:	52defd9a 	.word	0x52defd9a
 800d47c:	3fadde2d 	.word	0x3fadde2d
 800d480:	af749a6d 	.word	0xaf749a6d
 800d484:	3fb3b0f2 	.word	0x3fb3b0f2
 800d488:	fe231671 	.word	0xfe231671
 800d48c:	3fbc71c6 	.word	0x3fbc71c6
 800d490:	9998ebc4 	.word	0x9998ebc4
 800d494:	3fc99999 	.word	0x3fc99999
 800d498:	54442d18 	.word	0x54442d18
 800d49c:	bff921fb 	.word	0xbff921fb
 800d4a0:	440fffff 	.word	0x440fffff
 800d4a4:	7ff00000 	.word	0x7ff00000
 800d4a8:	3fdbffff 	.word	0x3fdbffff
 800d4ac:	3ff00000 	.word	0x3ff00000
 800d4b0:	3ff2ffff 	.word	0x3ff2ffff
 800d4b4:	40037fff 	.word	0x40037fff
 800d4b8:	3ff80000 	.word	0x3ff80000
 800d4bc:	bff00000 	.word	0xbff00000
 800d4c0:	08014310 	.word	0x08014310
 800d4c4:	080142f0 	.word	0x080142f0

0800d4c8 <fabs>:
 800d4c8:	ec51 0b10 	vmov	r0, r1, d0
 800d4cc:	ee10 2a10 	vmov	r2, s0
 800d4d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d4d4:	ec43 2b10 	vmov	d0, r2, r3
 800d4d8:	4770      	bx	lr

0800d4da <matherr>:
 800d4da:	2000      	movs	r0, #0
 800d4dc:	4770      	bx	lr
	...

0800d4e0 <nan>:
 800d4e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d4e8 <nan+0x8>
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	00000000 	.word	0x00000000
 800d4ec:	7ff80000 	.word	0x7ff80000

0800d4f0 <__errno>:
 800d4f0:	4b01      	ldr	r3, [pc, #4]	; (800d4f8 <__errno+0x8>)
 800d4f2:	6818      	ldr	r0, [r3, #0]
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	20000044 	.word	0x20000044

0800d4fc <__libc_init_array>:
 800d4fc:	b570      	push	{r4, r5, r6, lr}
 800d4fe:	4e0d      	ldr	r6, [pc, #52]	; (800d534 <__libc_init_array+0x38>)
 800d500:	4c0d      	ldr	r4, [pc, #52]	; (800d538 <__libc_init_array+0x3c>)
 800d502:	1ba4      	subs	r4, r4, r6
 800d504:	10a4      	asrs	r4, r4, #2
 800d506:	2500      	movs	r5, #0
 800d508:	42a5      	cmp	r5, r4
 800d50a:	d109      	bne.n	800d520 <__libc_init_array+0x24>
 800d50c:	4e0b      	ldr	r6, [pc, #44]	; (800d53c <__libc_init_array+0x40>)
 800d50e:	4c0c      	ldr	r4, [pc, #48]	; (800d540 <__libc_init_array+0x44>)
 800d510:	f003 fd8c 	bl	801102c <_init>
 800d514:	1ba4      	subs	r4, r4, r6
 800d516:	10a4      	asrs	r4, r4, #2
 800d518:	2500      	movs	r5, #0
 800d51a:	42a5      	cmp	r5, r4
 800d51c:	d105      	bne.n	800d52a <__libc_init_array+0x2e>
 800d51e:	bd70      	pop	{r4, r5, r6, pc}
 800d520:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d524:	4798      	blx	r3
 800d526:	3501      	adds	r5, #1
 800d528:	e7ee      	b.n	800d508 <__libc_init_array+0xc>
 800d52a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d52e:	4798      	blx	r3
 800d530:	3501      	adds	r5, #1
 800d532:	e7f2      	b.n	800d51a <__libc_init_array+0x1e>
 800d534:	080145e8 	.word	0x080145e8
 800d538:	080145e8 	.word	0x080145e8
 800d53c:	080145e8 	.word	0x080145e8
 800d540:	080145ec 	.word	0x080145ec

0800d544 <memset>:
 800d544:	4402      	add	r2, r0
 800d546:	4603      	mov	r3, r0
 800d548:	4293      	cmp	r3, r2
 800d54a:	d100      	bne.n	800d54e <memset+0xa>
 800d54c:	4770      	bx	lr
 800d54e:	f803 1b01 	strb.w	r1, [r3], #1
 800d552:	e7f9      	b.n	800d548 <memset+0x4>

0800d554 <__cvt>:
 800d554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d558:	ec55 4b10 	vmov	r4, r5, d0
 800d55c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d55e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d562:	2d00      	cmp	r5, #0
 800d564:	460e      	mov	r6, r1
 800d566:	4691      	mov	r9, r2
 800d568:	4619      	mov	r1, r3
 800d56a:	bfb8      	it	lt
 800d56c:	4622      	movlt	r2, r4
 800d56e:	462b      	mov	r3, r5
 800d570:	f027 0720 	bic.w	r7, r7, #32
 800d574:	bfbb      	ittet	lt
 800d576:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d57a:	461d      	movlt	r5, r3
 800d57c:	2300      	movge	r3, #0
 800d57e:	232d      	movlt	r3, #45	; 0x2d
 800d580:	bfb8      	it	lt
 800d582:	4614      	movlt	r4, r2
 800d584:	2f46      	cmp	r7, #70	; 0x46
 800d586:	700b      	strb	r3, [r1, #0]
 800d588:	d004      	beq.n	800d594 <__cvt+0x40>
 800d58a:	2f45      	cmp	r7, #69	; 0x45
 800d58c:	d100      	bne.n	800d590 <__cvt+0x3c>
 800d58e:	3601      	adds	r6, #1
 800d590:	2102      	movs	r1, #2
 800d592:	e000      	b.n	800d596 <__cvt+0x42>
 800d594:	2103      	movs	r1, #3
 800d596:	ab03      	add	r3, sp, #12
 800d598:	9301      	str	r3, [sp, #4]
 800d59a:	ab02      	add	r3, sp, #8
 800d59c:	9300      	str	r3, [sp, #0]
 800d59e:	4632      	mov	r2, r6
 800d5a0:	4653      	mov	r3, sl
 800d5a2:	ec45 4b10 	vmov	d0, r4, r5
 800d5a6:	f001 fdab 	bl	800f100 <_dtoa_r>
 800d5aa:	2f47      	cmp	r7, #71	; 0x47
 800d5ac:	4680      	mov	r8, r0
 800d5ae:	d102      	bne.n	800d5b6 <__cvt+0x62>
 800d5b0:	f019 0f01 	tst.w	r9, #1
 800d5b4:	d026      	beq.n	800d604 <__cvt+0xb0>
 800d5b6:	2f46      	cmp	r7, #70	; 0x46
 800d5b8:	eb08 0906 	add.w	r9, r8, r6
 800d5bc:	d111      	bne.n	800d5e2 <__cvt+0x8e>
 800d5be:	f898 3000 	ldrb.w	r3, [r8]
 800d5c2:	2b30      	cmp	r3, #48	; 0x30
 800d5c4:	d10a      	bne.n	800d5dc <__cvt+0x88>
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	4629      	mov	r1, r5
 800d5ce:	f7f3 fa7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5d2:	b918      	cbnz	r0, 800d5dc <__cvt+0x88>
 800d5d4:	f1c6 0601 	rsb	r6, r6, #1
 800d5d8:	f8ca 6000 	str.w	r6, [sl]
 800d5dc:	f8da 3000 	ldr.w	r3, [sl]
 800d5e0:	4499      	add	r9, r3
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	4629      	mov	r1, r5
 800d5ea:	f7f3 fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5ee:	b938      	cbnz	r0, 800d600 <__cvt+0xac>
 800d5f0:	2230      	movs	r2, #48	; 0x30
 800d5f2:	9b03      	ldr	r3, [sp, #12]
 800d5f4:	454b      	cmp	r3, r9
 800d5f6:	d205      	bcs.n	800d604 <__cvt+0xb0>
 800d5f8:	1c59      	adds	r1, r3, #1
 800d5fa:	9103      	str	r1, [sp, #12]
 800d5fc:	701a      	strb	r2, [r3, #0]
 800d5fe:	e7f8      	b.n	800d5f2 <__cvt+0x9e>
 800d600:	f8cd 900c 	str.w	r9, [sp, #12]
 800d604:	9b03      	ldr	r3, [sp, #12]
 800d606:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d608:	eba3 0308 	sub.w	r3, r3, r8
 800d60c:	4640      	mov	r0, r8
 800d60e:	6013      	str	r3, [r2, #0]
 800d610:	b004      	add	sp, #16
 800d612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d616 <__exponent>:
 800d616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d618:	2900      	cmp	r1, #0
 800d61a:	4604      	mov	r4, r0
 800d61c:	bfba      	itte	lt
 800d61e:	4249      	neglt	r1, r1
 800d620:	232d      	movlt	r3, #45	; 0x2d
 800d622:	232b      	movge	r3, #43	; 0x2b
 800d624:	2909      	cmp	r1, #9
 800d626:	f804 2b02 	strb.w	r2, [r4], #2
 800d62a:	7043      	strb	r3, [r0, #1]
 800d62c:	dd20      	ble.n	800d670 <__exponent+0x5a>
 800d62e:	f10d 0307 	add.w	r3, sp, #7
 800d632:	461f      	mov	r7, r3
 800d634:	260a      	movs	r6, #10
 800d636:	fb91 f5f6 	sdiv	r5, r1, r6
 800d63a:	fb06 1115 	mls	r1, r6, r5, r1
 800d63e:	3130      	adds	r1, #48	; 0x30
 800d640:	2d09      	cmp	r5, #9
 800d642:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d646:	f103 32ff 	add.w	r2, r3, #4294967295
 800d64a:	4629      	mov	r1, r5
 800d64c:	dc09      	bgt.n	800d662 <__exponent+0x4c>
 800d64e:	3130      	adds	r1, #48	; 0x30
 800d650:	3b02      	subs	r3, #2
 800d652:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d656:	42bb      	cmp	r3, r7
 800d658:	4622      	mov	r2, r4
 800d65a:	d304      	bcc.n	800d666 <__exponent+0x50>
 800d65c:	1a10      	subs	r0, r2, r0
 800d65e:	b003      	add	sp, #12
 800d660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d662:	4613      	mov	r3, r2
 800d664:	e7e7      	b.n	800d636 <__exponent+0x20>
 800d666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d66a:	f804 2b01 	strb.w	r2, [r4], #1
 800d66e:	e7f2      	b.n	800d656 <__exponent+0x40>
 800d670:	2330      	movs	r3, #48	; 0x30
 800d672:	4419      	add	r1, r3
 800d674:	7083      	strb	r3, [r0, #2]
 800d676:	1d02      	adds	r2, r0, #4
 800d678:	70c1      	strb	r1, [r0, #3]
 800d67a:	e7ef      	b.n	800d65c <__exponent+0x46>

0800d67c <_printf_float>:
 800d67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d680:	b08d      	sub	sp, #52	; 0x34
 800d682:	460c      	mov	r4, r1
 800d684:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d688:	4616      	mov	r6, r2
 800d68a:	461f      	mov	r7, r3
 800d68c:	4605      	mov	r5, r0
 800d68e:	f002 fe1b 	bl	80102c8 <_localeconv_r>
 800d692:	6803      	ldr	r3, [r0, #0]
 800d694:	9304      	str	r3, [sp, #16]
 800d696:	4618      	mov	r0, r3
 800d698:	f7f2 fd9a 	bl	80001d0 <strlen>
 800d69c:	2300      	movs	r3, #0
 800d69e:	930a      	str	r3, [sp, #40]	; 0x28
 800d6a0:	f8d8 3000 	ldr.w	r3, [r8]
 800d6a4:	9005      	str	r0, [sp, #20]
 800d6a6:	3307      	adds	r3, #7
 800d6a8:	f023 0307 	bic.w	r3, r3, #7
 800d6ac:	f103 0208 	add.w	r2, r3, #8
 800d6b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d6b4:	f8d4 b000 	ldr.w	fp, [r4]
 800d6b8:	f8c8 2000 	str.w	r2, [r8]
 800d6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d6c4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d6c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d6cc:	9307      	str	r3, [sp, #28]
 800d6ce:	f8cd 8018 	str.w	r8, [sp, #24]
 800d6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6d6:	4ba7      	ldr	r3, [pc, #668]	; (800d974 <_printf_float+0x2f8>)
 800d6d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6dc:	f7f3 fa26 	bl	8000b2c <__aeabi_dcmpun>
 800d6e0:	bb70      	cbnz	r0, 800d740 <_printf_float+0xc4>
 800d6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e6:	4ba3      	ldr	r3, [pc, #652]	; (800d974 <_printf_float+0x2f8>)
 800d6e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6ec:	f7f3 fa00 	bl	8000af0 <__aeabi_dcmple>
 800d6f0:	bb30      	cbnz	r0, 800d740 <_printf_float+0xc4>
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	4640      	mov	r0, r8
 800d6f8:	4649      	mov	r1, r9
 800d6fa:	f7f3 f9ef 	bl	8000adc <__aeabi_dcmplt>
 800d6fe:	b110      	cbz	r0, 800d706 <_printf_float+0x8a>
 800d700:	232d      	movs	r3, #45	; 0x2d
 800d702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d706:	4a9c      	ldr	r2, [pc, #624]	; (800d978 <_printf_float+0x2fc>)
 800d708:	4b9c      	ldr	r3, [pc, #624]	; (800d97c <_printf_float+0x300>)
 800d70a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d70e:	bf8c      	ite	hi
 800d710:	4690      	movhi	r8, r2
 800d712:	4698      	movls	r8, r3
 800d714:	2303      	movs	r3, #3
 800d716:	f02b 0204 	bic.w	r2, fp, #4
 800d71a:	6123      	str	r3, [r4, #16]
 800d71c:	6022      	str	r2, [r4, #0]
 800d71e:	f04f 0900 	mov.w	r9, #0
 800d722:	9700      	str	r7, [sp, #0]
 800d724:	4633      	mov	r3, r6
 800d726:	aa0b      	add	r2, sp, #44	; 0x2c
 800d728:	4621      	mov	r1, r4
 800d72a:	4628      	mov	r0, r5
 800d72c:	f000 f9e6 	bl	800dafc <_printf_common>
 800d730:	3001      	adds	r0, #1
 800d732:	f040 808d 	bne.w	800d850 <_printf_float+0x1d4>
 800d736:	f04f 30ff 	mov.w	r0, #4294967295
 800d73a:	b00d      	add	sp, #52	; 0x34
 800d73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d740:	4642      	mov	r2, r8
 800d742:	464b      	mov	r3, r9
 800d744:	4640      	mov	r0, r8
 800d746:	4649      	mov	r1, r9
 800d748:	f7f3 f9f0 	bl	8000b2c <__aeabi_dcmpun>
 800d74c:	b110      	cbz	r0, 800d754 <_printf_float+0xd8>
 800d74e:	4a8c      	ldr	r2, [pc, #560]	; (800d980 <_printf_float+0x304>)
 800d750:	4b8c      	ldr	r3, [pc, #560]	; (800d984 <_printf_float+0x308>)
 800d752:	e7da      	b.n	800d70a <_printf_float+0x8e>
 800d754:	6861      	ldr	r1, [r4, #4]
 800d756:	1c4b      	adds	r3, r1, #1
 800d758:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800d75c:	a80a      	add	r0, sp, #40	; 0x28
 800d75e:	d13e      	bne.n	800d7de <_printf_float+0x162>
 800d760:	2306      	movs	r3, #6
 800d762:	6063      	str	r3, [r4, #4]
 800d764:	2300      	movs	r3, #0
 800d766:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d76a:	ab09      	add	r3, sp, #36	; 0x24
 800d76c:	9300      	str	r3, [sp, #0]
 800d76e:	ec49 8b10 	vmov	d0, r8, r9
 800d772:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d776:	6022      	str	r2, [r4, #0]
 800d778:	f8cd a004 	str.w	sl, [sp, #4]
 800d77c:	6861      	ldr	r1, [r4, #4]
 800d77e:	4628      	mov	r0, r5
 800d780:	f7ff fee8 	bl	800d554 <__cvt>
 800d784:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800d788:	2b47      	cmp	r3, #71	; 0x47
 800d78a:	4680      	mov	r8, r0
 800d78c:	d109      	bne.n	800d7a2 <_printf_float+0x126>
 800d78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d790:	1cd8      	adds	r0, r3, #3
 800d792:	db02      	blt.n	800d79a <_printf_float+0x11e>
 800d794:	6862      	ldr	r2, [r4, #4]
 800d796:	4293      	cmp	r3, r2
 800d798:	dd47      	ble.n	800d82a <_printf_float+0x1ae>
 800d79a:	f1aa 0a02 	sub.w	sl, sl, #2
 800d79e:	fa5f fa8a 	uxtb.w	sl, sl
 800d7a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d7a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d7a8:	d824      	bhi.n	800d7f4 <_printf_float+0x178>
 800d7aa:	3901      	subs	r1, #1
 800d7ac:	4652      	mov	r2, sl
 800d7ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d7b2:	9109      	str	r1, [sp, #36]	; 0x24
 800d7b4:	f7ff ff2f 	bl	800d616 <__exponent>
 800d7b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7ba:	1813      	adds	r3, r2, r0
 800d7bc:	2a01      	cmp	r2, #1
 800d7be:	4681      	mov	r9, r0
 800d7c0:	6123      	str	r3, [r4, #16]
 800d7c2:	dc02      	bgt.n	800d7ca <_printf_float+0x14e>
 800d7c4:	6822      	ldr	r2, [r4, #0]
 800d7c6:	07d1      	lsls	r1, r2, #31
 800d7c8:	d501      	bpl.n	800d7ce <_printf_float+0x152>
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	6123      	str	r3, [r4, #16]
 800d7ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d0a5      	beq.n	800d722 <_printf_float+0xa6>
 800d7d6:	232d      	movs	r3, #45	; 0x2d
 800d7d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7dc:	e7a1      	b.n	800d722 <_printf_float+0xa6>
 800d7de:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800d7e2:	f000 8177 	beq.w	800dad4 <_printf_float+0x458>
 800d7e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d7ea:	d1bb      	bne.n	800d764 <_printf_float+0xe8>
 800d7ec:	2900      	cmp	r1, #0
 800d7ee:	d1b9      	bne.n	800d764 <_printf_float+0xe8>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e7b6      	b.n	800d762 <_printf_float+0xe6>
 800d7f4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800d7f8:	d119      	bne.n	800d82e <_printf_float+0x1b2>
 800d7fa:	2900      	cmp	r1, #0
 800d7fc:	6863      	ldr	r3, [r4, #4]
 800d7fe:	dd0c      	ble.n	800d81a <_printf_float+0x19e>
 800d800:	6121      	str	r1, [r4, #16]
 800d802:	b913      	cbnz	r3, 800d80a <_printf_float+0x18e>
 800d804:	6822      	ldr	r2, [r4, #0]
 800d806:	07d2      	lsls	r2, r2, #31
 800d808:	d502      	bpl.n	800d810 <_printf_float+0x194>
 800d80a:	3301      	adds	r3, #1
 800d80c:	440b      	add	r3, r1
 800d80e:	6123      	str	r3, [r4, #16]
 800d810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d812:	65a3      	str	r3, [r4, #88]	; 0x58
 800d814:	f04f 0900 	mov.w	r9, #0
 800d818:	e7d9      	b.n	800d7ce <_printf_float+0x152>
 800d81a:	b913      	cbnz	r3, 800d822 <_printf_float+0x1a6>
 800d81c:	6822      	ldr	r2, [r4, #0]
 800d81e:	07d0      	lsls	r0, r2, #31
 800d820:	d501      	bpl.n	800d826 <_printf_float+0x1aa>
 800d822:	3302      	adds	r3, #2
 800d824:	e7f3      	b.n	800d80e <_printf_float+0x192>
 800d826:	2301      	movs	r3, #1
 800d828:	e7f1      	b.n	800d80e <_printf_float+0x192>
 800d82a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800d82e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d832:	4293      	cmp	r3, r2
 800d834:	db05      	blt.n	800d842 <_printf_float+0x1c6>
 800d836:	6822      	ldr	r2, [r4, #0]
 800d838:	6123      	str	r3, [r4, #16]
 800d83a:	07d1      	lsls	r1, r2, #31
 800d83c:	d5e8      	bpl.n	800d810 <_printf_float+0x194>
 800d83e:	3301      	adds	r3, #1
 800d840:	e7e5      	b.n	800d80e <_printf_float+0x192>
 800d842:	2b00      	cmp	r3, #0
 800d844:	bfd4      	ite	le
 800d846:	f1c3 0302 	rsble	r3, r3, #2
 800d84a:	2301      	movgt	r3, #1
 800d84c:	4413      	add	r3, r2
 800d84e:	e7de      	b.n	800d80e <_printf_float+0x192>
 800d850:	6823      	ldr	r3, [r4, #0]
 800d852:	055a      	lsls	r2, r3, #21
 800d854:	d407      	bmi.n	800d866 <_printf_float+0x1ea>
 800d856:	6923      	ldr	r3, [r4, #16]
 800d858:	4642      	mov	r2, r8
 800d85a:	4631      	mov	r1, r6
 800d85c:	4628      	mov	r0, r5
 800d85e:	47b8      	blx	r7
 800d860:	3001      	adds	r0, #1
 800d862:	d12b      	bne.n	800d8bc <_printf_float+0x240>
 800d864:	e767      	b.n	800d736 <_printf_float+0xba>
 800d866:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d86a:	f240 80dc 	bls.w	800da26 <_printf_float+0x3aa>
 800d86e:	2200      	movs	r2, #0
 800d870:	2300      	movs	r3, #0
 800d872:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d876:	f7f3 f927 	bl	8000ac8 <__aeabi_dcmpeq>
 800d87a:	2800      	cmp	r0, #0
 800d87c:	d033      	beq.n	800d8e6 <_printf_float+0x26a>
 800d87e:	2301      	movs	r3, #1
 800d880:	4a41      	ldr	r2, [pc, #260]	; (800d988 <_printf_float+0x30c>)
 800d882:	4631      	mov	r1, r6
 800d884:	4628      	mov	r0, r5
 800d886:	47b8      	blx	r7
 800d888:	3001      	adds	r0, #1
 800d88a:	f43f af54 	beq.w	800d736 <_printf_float+0xba>
 800d88e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d892:	429a      	cmp	r2, r3
 800d894:	db02      	blt.n	800d89c <_printf_float+0x220>
 800d896:	6823      	ldr	r3, [r4, #0]
 800d898:	07d8      	lsls	r0, r3, #31
 800d89a:	d50f      	bpl.n	800d8bc <_printf_float+0x240>
 800d89c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8a0:	4631      	mov	r1, r6
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	47b8      	blx	r7
 800d8a6:	3001      	adds	r0, #1
 800d8a8:	f43f af45 	beq.w	800d736 <_printf_float+0xba>
 800d8ac:	f04f 0800 	mov.w	r8, #0
 800d8b0:	f104 091a 	add.w	r9, r4, #26
 800d8b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	4543      	cmp	r3, r8
 800d8ba:	dc09      	bgt.n	800d8d0 <_printf_float+0x254>
 800d8bc:	6823      	ldr	r3, [r4, #0]
 800d8be:	079b      	lsls	r3, r3, #30
 800d8c0:	f100 8103 	bmi.w	800daca <_printf_float+0x44e>
 800d8c4:	68e0      	ldr	r0, [r4, #12]
 800d8c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8c8:	4298      	cmp	r0, r3
 800d8ca:	bfb8      	it	lt
 800d8cc:	4618      	movlt	r0, r3
 800d8ce:	e734      	b.n	800d73a <_printf_float+0xbe>
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	464a      	mov	r2, r9
 800d8d4:	4631      	mov	r1, r6
 800d8d6:	4628      	mov	r0, r5
 800d8d8:	47b8      	blx	r7
 800d8da:	3001      	adds	r0, #1
 800d8dc:	f43f af2b 	beq.w	800d736 <_printf_float+0xba>
 800d8e0:	f108 0801 	add.w	r8, r8, #1
 800d8e4:	e7e6      	b.n	800d8b4 <_printf_float+0x238>
 800d8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	dc2b      	bgt.n	800d944 <_printf_float+0x2c8>
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	4a26      	ldr	r2, [pc, #152]	; (800d988 <_printf_float+0x30c>)
 800d8f0:	4631      	mov	r1, r6
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	47b8      	blx	r7
 800d8f6:	3001      	adds	r0, #1
 800d8f8:	f43f af1d 	beq.w	800d736 <_printf_float+0xba>
 800d8fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8fe:	b923      	cbnz	r3, 800d90a <_printf_float+0x28e>
 800d900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d902:	b913      	cbnz	r3, 800d90a <_printf_float+0x28e>
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	07d9      	lsls	r1, r3, #31
 800d908:	d5d8      	bpl.n	800d8bc <_printf_float+0x240>
 800d90a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d90e:	4631      	mov	r1, r6
 800d910:	4628      	mov	r0, r5
 800d912:	47b8      	blx	r7
 800d914:	3001      	adds	r0, #1
 800d916:	f43f af0e 	beq.w	800d736 <_printf_float+0xba>
 800d91a:	f04f 0900 	mov.w	r9, #0
 800d91e:	f104 0a1a 	add.w	sl, r4, #26
 800d922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d924:	425b      	negs	r3, r3
 800d926:	454b      	cmp	r3, r9
 800d928:	dc01      	bgt.n	800d92e <_printf_float+0x2b2>
 800d92a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d92c:	e794      	b.n	800d858 <_printf_float+0x1dc>
 800d92e:	2301      	movs	r3, #1
 800d930:	4652      	mov	r2, sl
 800d932:	4631      	mov	r1, r6
 800d934:	4628      	mov	r0, r5
 800d936:	47b8      	blx	r7
 800d938:	3001      	adds	r0, #1
 800d93a:	f43f aefc 	beq.w	800d736 <_printf_float+0xba>
 800d93e:	f109 0901 	add.w	r9, r9, #1
 800d942:	e7ee      	b.n	800d922 <_printf_float+0x2a6>
 800d944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d946:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d948:	429a      	cmp	r2, r3
 800d94a:	bfa8      	it	ge
 800d94c:	461a      	movge	r2, r3
 800d94e:	2a00      	cmp	r2, #0
 800d950:	4691      	mov	r9, r2
 800d952:	dd07      	ble.n	800d964 <_printf_float+0x2e8>
 800d954:	4613      	mov	r3, r2
 800d956:	4631      	mov	r1, r6
 800d958:	4642      	mov	r2, r8
 800d95a:	4628      	mov	r0, r5
 800d95c:	47b8      	blx	r7
 800d95e:	3001      	adds	r0, #1
 800d960:	f43f aee9 	beq.w	800d736 <_printf_float+0xba>
 800d964:	f104 031a 	add.w	r3, r4, #26
 800d968:	f04f 0b00 	mov.w	fp, #0
 800d96c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d970:	9306      	str	r3, [sp, #24]
 800d972:	e015      	b.n	800d9a0 <_printf_float+0x324>
 800d974:	7fefffff 	.word	0x7fefffff
 800d978:	08014334 	.word	0x08014334
 800d97c:	08014330 	.word	0x08014330
 800d980:	0801433c 	.word	0x0801433c
 800d984:	08014338 	.word	0x08014338
 800d988:	08014340 	.word	0x08014340
 800d98c:	2301      	movs	r3, #1
 800d98e:	9a06      	ldr	r2, [sp, #24]
 800d990:	4631      	mov	r1, r6
 800d992:	4628      	mov	r0, r5
 800d994:	47b8      	blx	r7
 800d996:	3001      	adds	r0, #1
 800d998:	f43f aecd 	beq.w	800d736 <_printf_float+0xba>
 800d99c:	f10b 0b01 	add.w	fp, fp, #1
 800d9a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d9a4:	ebaa 0309 	sub.w	r3, sl, r9
 800d9a8:	455b      	cmp	r3, fp
 800d9aa:	dcef      	bgt.n	800d98c <_printf_float+0x310>
 800d9ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	44d0      	add	r8, sl
 800d9b4:	db15      	blt.n	800d9e2 <_printf_float+0x366>
 800d9b6:	6823      	ldr	r3, [r4, #0]
 800d9b8:	07da      	lsls	r2, r3, #31
 800d9ba:	d412      	bmi.n	800d9e2 <_printf_float+0x366>
 800d9bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9c0:	eba3 020a 	sub.w	r2, r3, sl
 800d9c4:	eba3 0a01 	sub.w	sl, r3, r1
 800d9c8:	4592      	cmp	sl, r2
 800d9ca:	bfa8      	it	ge
 800d9cc:	4692      	movge	sl, r2
 800d9ce:	f1ba 0f00 	cmp.w	sl, #0
 800d9d2:	dc0e      	bgt.n	800d9f2 <_printf_float+0x376>
 800d9d4:	f04f 0800 	mov.w	r8, #0
 800d9d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d9dc:	f104 091a 	add.w	r9, r4, #26
 800d9e0:	e019      	b.n	800da16 <_printf_float+0x39a>
 800d9e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9e6:	4631      	mov	r1, r6
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	47b8      	blx	r7
 800d9ec:	3001      	adds	r0, #1
 800d9ee:	d1e5      	bne.n	800d9bc <_printf_float+0x340>
 800d9f0:	e6a1      	b.n	800d736 <_printf_float+0xba>
 800d9f2:	4653      	mov	r3, sl
 800d9f4:	4642      	mov	r2, r8
 800d9f6:	4631      	mov	r1, r6
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	47b8      	blx	r7
 800d9fc:	3001      	adds	r0, #1
 800d9fe:	d1e9      	bne.n	800d9d4 <_printf_float+0x358>
 800da00:	e699      	b.n	800d736 <_printf_float+0xba>
 800da02:	2301      	movs	r3, #1
 800da04:	464a      	mov	r2, r9
 800da06:	4631      	mov	r1, r6
 800da08:	4628      	mov	r0, r5
 800da0a:	47b8      	blx	r7
 800da0c:	3001      	adds	r0, #1
 800da0e:	f43f ae92 	beq.w	800d736 <_printf_float+0xba>
 800da12:	f108 0801 	add.w	r8, r8, #1
 800da16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da1a:	1a9b      	subs	r3, r3, r2
 800da1c:	eba3 030a 	sub.w	r3, r3, sl
 800da20:	4543      	cmp	r3, r8
 800da22:	dcee      	bgt.n	800da02 <_printf_float+0x386>
 800da24:	e74a      	b.n	800d8bc <_printf_float+0x240>
 800da26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da28:	2a01      	cmp	r2, #1
 800da2a:	dc01      	bgt.n	800da30 <_printf_float+0x3b4>
 800da2c:	07db      	lsls	r3, r3, #31
 800da2e:	d53a      	bpl.n	800daa6 <_printf_float+0x42a>
 800da30:	2301      	movs	r3, #1
 800da32:	4642      	mov	r2, r8
 800da34:	4631      	mov	r1, r6
 800da36:	4628      	mov	r0, r5
 800da38:	47b8      	blx	r7
 800da3a:	3001      	adds	r0, #1
 800da3c:	f43f ae7b 	beq.w	800d736 <_printf_float+0xba>
 800da40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da44:	4631      	mov	r1, r6
 800da46:	4628      	mov	r0, r5
 800da48:	47b8      	blx	r7
 800da4a:	3001      	adds	r0, #1
 800da4c:	f108 0801 	add.w	r8, r8, #1
 800da50:	f43f ae71 	beq.w	800d736 <_printf_float+0xba>
 800da54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da56:	2200      	movs	r2, #0
 800da58:	f103 3aff 	add.w	sl, r3, #4294967295
 800da5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da60:	2300      	movs	r3, #0
 800da62:	f7f3 f831 	bl	8000ac8 <__aeabi_dcmpeq>
 800da66:	b9c8      	cbnz	r0, 800da9c <_printf_float+0x420>
 800da68:	4653      	mov	r3, sl
 800da6a:	4642      	mov	r2, r8
 800da6c:	4631      	mov	r1, r6
 800da6e:	4628      	mov	r0, r5
 800da70:	47b8      	blx	r7
 800da72:	3001      	adds	r0, #1
 800da74:	d10e      	bne.n	800da94 <_printf_float+0x418>
 800da76:	e65e      	b.n	800d736 <_printf_float+0xba>
 800da78:	2301      	movs	r3, #1
 800da7a:	4652      	mov	r2, sl
 800da7c:	4631      	mov	r1, r6
 800da7e:	4628      	mov	r0, r5
 800da80:	47b8      	blx	r7
 800da82:	3001      	adds	r0, #1
 800da84:	f43f ae57 	beq.w	800d736 <_printf_float+0xba>
 800da88:	f108 0801 	add.w	r8, r8, #1
 800da8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da8e:	3b01      	subs	r3, #1
 800da90:	4543      	cmp	r3, r8
 800da92:	dcf1      	bgt.n	800da78 <_printf_float+0x3fc>
 800da94:	464b      	mov	r3, r9
 800da96:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800da9a:	e6de      	b.n	800d85a <_printf_float+0x1de>
 800da9c:	f04f 0800 	mov.w	r8, #0
 800daa0:	f104 0a1a 	add.w	sl, r4, #26
 800daa4:	e7f2      	b.n	800da8c <_printf_float+0x410>
 800daa6:	2301      	movs	r3, #1
 800daa8:	e7df      	b.n	800da6a <_printf_float+0x3ee>
 800daaa:	2301      	movs	r3, #1
 800daac:	464a      	mov	r2, r9
 800daae:	4631      	mov	r1, r6
 800dab0:	4628      	mov	r0, r5
 800dab2:	47b8      	blx	r7
 800dab4:	3001      	adds	r0, #1
 800dab6:	f43f ae3e 	beq.w	800d736 <_printf_float+0xba>
 800daba:	f108 0801 	add.w	r8, r8, #1
 800dabe:	68e3      	ldr	r3, [r4, #12]
 800dac0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dac2:	1a9b      	subs	r3, r3, r2
 800dac4:	4543      	cmp	r3, r8
 800dac6:	dcf0      	bgt.n	800daaa <_printf_float+0x42e>
 800dac8:	e6fc      	b.n	800d8c4 <_printf_float+0x248>
 800daca:	f04f 0800 	mov.w	r8, #0
 800dace:	f104 0919 	add.w	r9, r4, #25
 800dad2:	e7f4      	b.n	800dabe <_printf_float+0x442>
 800dad4:	2900      	cmp	r1, #0
 800dad6:	f43f ae8b 	beq.w	800d7f0 <_printf_float+0x174>
 800dada:	2300      	movs	r3, #0
 800dadc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dae0:	ab09      	add	r3, sp, #36	; 0x24
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	ec49 8b10 	vmov	d0, r8, r9
 800dae8:	6022      	str	r2, [r4, #0]
 800daea:	f8cd a004 	str.w	sl, [sp, #4]
 800daee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800daf2:	4628      	mov	r0, r5
 800daf4:	f7ff fd2e 	bl	800d554 <__cvt>
 800daf8:	4680      	mov	r8, r0
 800dafa:	e648      	b.n	800d78e <_printf_float+0x112>

0800dafc <_printf_common>:
 800dafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db00:	4691      	mov	r9, r2
 800db02:	461f      	mov	r7, r3
 800db04:	688a      	ldr	r2, [r1, #8]
 800db06:	690b      	ldr	r3, [r1, #16]
 800db08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db0c:	4293      	cmp	r3, r2
 800db0e:	bfb8      	it	lt
 800db10:	4613      	movlt	r3, r2
 800db12:	f8c9 3000 	str.w	r3, [r9]
 800db16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db1a:	4606      	mov	r6, r0
 800db1c:	460c      	mov	r4, r1
 800db1e:	b112      	cbz	r2, 800db26 <_printf_common+0x2a>
 800db20:	3301      	adds	r3, #1
 800db22:	f8c9 3000 	str.w	r3, [r9]
 800db26:	6823      	ldr	r3, [r4, #0]
 800db28:	0699      	lsls	r1, r3, #26
 800db2a:	bf42      	ittt	mi
 800db2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800db30:	3302      	addmi	r3, #2
 800db32:	f8c9 3000 	strmi.w	r3, [r9]
 800db36:	6825      	ldr	r5, [r4, #0]
 800db38:	f015 0506 	ands.w	r5, r5, #6
 800db3c:	d107      	bne.n	800db4e <_printf_common+0x52>
 800db3e:	f104 0a19 	add.w	sl, r4, #25
 800db42:	68e3      	ldr	r3, [r4, #12]
 800db44:	f8d9 2000 	ldr.w	r2, [r9]
 800db48:	1a9b      	subs	r3, r3, r2
 800db4a:	42ab      	cmp	r3, r5
 800db4c:	dc28      	bgt.n	800dba0 <_printf_common+0xa4>
 800db4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800db52:	6822      	ldr	r2, [r4, #0]
 800db54:	3300      	adds	r3, #0
 800db56:	bf18      	it	ne
 800db58:	2301      	movne	r3, #1
 800db5a:	0692      	lsls	r2, r2, #26
 800db5c:	d42d      	bmi.n	800dbba <_printf_common+0xbe>
 800db5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db62:	4639      	mov	r1, r7
 800db64:	4630      	mov	r0, r6
 800db66:	47c0      	blx	r8
 800db68:	3001      	adds	r0, #1
 800db6a:	d020      	beq.n	800dbae <_printf_common+0xb2>
 800db6c:	6823      	ldr	r3, [r4, #0]
 800db6e:	68e5      	ldr	r5, [r4, #12]
 800db70:	f8d9 2000 	ldr.w	r2, [r9]
 800db74:	f003 0306 	and.w	r3, r3, #6
 800db78:	2b04      	cmp	r3, #4
 800db7a:	bf08      	it	eq
 800db7c:	1aad      	subeq	r5, r5, r2
 800db7e:	68a3      	ldr	r3, [r4, #8]
 800db80:	6922      	ldr	r2, [r4, #16]
 800db82:	bf0c      	ite	eq
 800db84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db88:	2500      	movne	r5, #0
 800db8a:	4293      	cmp	r3, r2
 800db8c:	bfc4      	itt	gt
 800db8e:	1a9b      	subgt	r3, r3, r2
 800db90:	18ed      	addgt	r5, r5, r3
 800db92:	f04f 0900 	mov.w	r9, #0
 800db96:	341a      	adds	r4, #26
 800db98:	454d      	cmp	r5, r9
 800db9a:	d11a      	bne.n	800dbd2 <_printf_common+0xd6>
 800db9c:	2000      	movs	r0, #0
 800db9e:	e008      	b.n	800dbb2 <_printf_common+0xb6>
 800dba0:	2301      	movs	r3, #1
 800dba2:	4652      	mov	r2, sl
 800dba4:	4639      	mov	r1, r7
 800dba6:	4630      	mov	r0, r6
 800dba8:	47c0      	blx	r8
 800dbaa:	3001      	adds	r0, #1
 800dbac:	d103      	bne.n	800dbb6 <_printf_common+0xba>
 800dbae:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbb6:	3501      	adds	r5, #1
 800dbb8:	e7c3      	b.n	800db42 <_printf_common+0x46>
 800dbba:	18e1      	adds	r1, r4, r3
 800dbbc:	1c5a      	adds	r2, r3, #1
 800dbbe:	2030      	movs	r0, #48	; 0x30
 800dbc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dbc4:	4422      	add	r2, r4
 800dbc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dbca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dbce:	3302      	adds	r3, #2
 800dbd0:	e7c5      	b.n	800db5e <_printf_common+0x62>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	4622      	mov	r2, r4
 800dbd6:	4639      	mov	r1, r7
 800dbd8:	4630      	mov	r0, r6
 800dbda:	47c0      	blx	r8
 800dbdc:	3001      	adds	r0, #1
 800dbde:	d0e6      	beq.n	800dbae <_printf_common+0xb2>
 800dbe0:	f109 0901 	add.w	r9, r9, #1
 800dbe4:	e7d8      	b.n	800db98 <_printf_common+0x9c>
	...

0800dbe8 <_printf_i>:
 800dbe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dbf0:	460c      	mov	r4, r1
 800dbf2:	7e09      	ldrb	r1, [r1, #24]
 800dbf4:	b085      	sub	sp, #20
 800dbf6:	296e      	cmp	r1, #110	; 0x6e
 800dbf8:	4617      	mov	r7, r2
 800dbfa:	4606      	mov	r6, r0
 800dbfc:	4698      	mov	r8, r3
 800dbfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc00:	f000 80b3 	beq.w	800dd6a <_printf_i+0x182>
 800dc04:	d822      	bhi.n	800dc4c <_printf_i+0x64>
 800dc06:	2963      	cmp	r1, #99	; 0x63
 800dc08:	d036      	beq.n	800dc78 <_printf_i+0x90>
 800dc0a:	d80a      	bhi.n	800dc22 <_printf_i+0x3a>
 800dc0c:	2900      	cmp	r1, #0
 800dc0e:	f000 80b9 	beq.w	800dd84 <_printf_i+0x19c>
 800dc12:	2958      	cmp	r1, #88	; 0x58
 800dc14:	f000 8083 	beq.w	800dd1e <_printf_i+0x136>
 800dc18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dc20:	e032      	b.n	800dc88 <_printf_i+0xa0>
 800dc22:	2964      	cmp	r1, #100	; 0x64
 800dc24:	d001      	beq.n	800dc2a <_printf_i+0x42>
 800dc26:	2969      	cmp	r1, #105	; 0x69
 800dc28:	d1f6      	bne.n	800dc18 <_printf_i+0x30>
 800dc2a:	6820      	ldr	r0, [r4, #0]
 800dc2c:	6813      	ldr	r3, [r2, #0]
 800dc2e:	0605      	lsls	r5, r0, #24
 800dc30:	f103 0104 	add.w	r1, r3, #4
 800dc34:	d52a      	bpl.n	800dc8c <_printf_i+0xa4>
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	6011      	str	r1, [r2, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	da03      	bge.n	800dc46 <_printf_i+0x5e>
 800dc3e:	222d      	movs	r2, #45	; 0x2d
 800dc40:	425b      	negs	r3, r3
 800dc42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dc46:	486f      	ldr	r0, [pc, #444]	; (800de04 <_printf_i+0x21c>)
 800dc48:	220a      	movs	r2, #10
 800dc4a:	e039      	b.n	800dcc0 <_printf_i+0xd8>
 800dc4c:	2973      	cmp	r1, #115	; 0x73
 800dc4e:	f000 809d 	beq.w	800dd8c <_printf_i+0x1a4>
 800dc52:	d808      	bhi.n	800dc66 <_printf_i+0x7e>
 800dc54:	296f      	cmp	r1, #111	; 0x6f
 800dc56:	d020      	beq.n	800dc9a <_printf_i+0xb2>
 800dc58:	2970      	cmp	r1, #112	; 0x70
 800dc5a:	d1dd      	bne.n	800dc18 <_printf_i+0x30>
 800dc5c:	6823      	ldr	r3, [r4, #0]
 800dc5e:	f043 0320 	orr.w	r3, r3, #32
 800dc62:	6023      	str	r3, [r4, #0]
 800dc64:	e003      	b.n	800dc6e <_printf_i+0x86>
 800dc66:	2975      	cmp	r1, #117	; 0x75
 800dc68:	d017      	beq.n	800dc9a <_printf_i+0xb2>
 800dc6a:	2978      	cmp	r1, #120	; 0x78
 800dc6c:	d1d4      	bne.n	800dc18 <_printf_i+0x30>
 800dc6e:	2378      	movs	r3, #120	; 0x78
 800dc70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc74:	4864      	ldr	r0, [pc, #400]	; (800de08 <_printf_i+0x220>)
 800dc76:	e055      	b.n	800dd24 <_printf_i+0x13c>
 800dc78:	6813      	ldr	r3, [r2, #0]
 800dc7a:	1d19      	adds	r1, r3, #4
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	6011      	str	r1, [r2, #0]
 800dc80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dc88:	2301      	movs	r3, #1
 800dc8a:	e08c      	b.n	800dda6 <_printf_i+0x1be>
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	6011      	str	r1, [r2, #0]
 800dc90:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dc94:	bf18      	it	ne
 800dc96:	b21b      	sxthne	r3, r3
 800dc98:	e7cf      	b.n	800dc3a <_printf_i+0x52>
 800dc9a:	6813      	ldr	r3, [r2, #0]
 800dc9c:	6825      	ldr	r5, [r4, #0]
 800dc9e:	1d18      	adds	r0, r3, #4
 800dca0:	6010      	str	r0, [r2, #0]
 800dca2:	0628      	lsls	r0, r5, #24
 800dca4:	d501      	bpl.n	800dcaa <_printf_i+0xc2>
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	e002      	b.n	800dcb0 <_printf_i+0xc8>
 800dcaa:	0668      	lsls	r0, r5, #25
 800dcac:	d5fb      	bpl.n	800dca6 <_printf_i+0xbe>
 800dcae:	881b      	ldrh	r3, [r3, #0]
 800dcb0:	4854      	ldr	r0, [pc, #336]	; (800de04 <_printf_i+0x21c>)
 800dcb2:	296f      	cmp	r1, #111	; 0x6f
 800dcb4:	bf14      	ite	ne
 800dcb6:	220a      	movne	r2, #10
 800dcb8:	2208      	moveq	r2, #8
 800dcba:	2100      	movs	r1, #0
 800dcbc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dcc0:	6865      	ldr	r5, [r4, #4]
 800dcc2:	60a5      	str	r5, [r4, #8]
 800dcc4:	2d00      	cmp	r5, #0
 800dcc6:	f2c0 8095 	blt.w	800ddf4 <_printf_i+0x20c>
 800dcca:	6821      	ldr	r1, [r4, #0]
 800dccc:	f021 0104 	bic.w	r1, r1, #4
 800dcd0:	6021      	str	r1, [r4, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d13d      	bne.n	800dd52 <_printf_i+0x16a>
 800dcd6:	2d00      	cmp	r5, #0
 800dcd8:	f040 808e 	bne.w	800ddf8 <_printf_i+0x210>
 800dcdc:	4665      	mov	r5, ip
 800dcde:	2a08      	cmp	r2, #8
 800dce0:	d10b      	bne.n	800dcfa <_printf_i+0x112>
 800dce2:	6823      	ldr	r3, [r4, #0]
 800dce4:	07db      	lsls	r3, r3, #31
 800dce6:	d508      	bpl.n	800dcfa <_printf_i+0x112>
 800dce8:	6923      	ldr	r3, [r4, #16]
 800dcea:	6862      	ldr	r2, [r4, #4]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	bfde      	ittt	le
 800dcf0:	2330      	movle	r3, #48	; 0x30
 800dcf2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dcf6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dcfa:	ebac 0305 	sub.w	r3, ip, r5
 800dcfe:	6123      	str	r3, [r4, #16]
 800dd00:	f8cd 8000 	str.w	r8, [sp]
 800dd04:	463b      	mov	r3, r7
 800dd06:	aa03      	add	r2, sp, #12
 800dd08:	4621      	mov	r1, r4
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	f7ff fef6 	bl	800dafc <_printf_common>
 800dd10:	3001      	adds	r0, #1
 800dd12:	d14d      	bne.n	800ddb0 <_printf_i+0x1c8>
 800dd14:	f04f 30ff 	mov.w	r0, #4294967295
 800dd18:	b005      	add	sp, #20
 800dd1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd1e:	4839      	ldr	r0, [pc, #228]	; (800de04 <_printf_i+0x21c>)
 800dd20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800dd24:	6813      	ldr	r3, [r2, #0]
 800dd26:	6821      	ldr	r1, [r4, #0]
 800dd28:	1d1d      	adds	r5, r3, #4
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	6015      	str	r5, [r2, #0]
 800dd2e:	060a      	lsls	r2, r1, #24
 800dd30:	d50b      	bpl.n	800dd4a <_printf_i+0x162>
 800dd32:	07ca      	lsls	r2, r1, #31
 800dd34:	bf44      	itt	mi
 800dd36:	f041 0120 	orrmi.w	r1, r1, #32
 800dd3a:	6021      	strmi	r1, [r4, #0]
 800dd3c:	b91b      	cbnz	r3, 800dd46 <_printf_i+0x15e>
 800dd3e:	6822      	ldr	r2, [r4, #0]
 800dd40:	f022 0220 	bic.w	r2, r2, #32
 800dd44:	6022      	str	r2, [r4, #0]
 800dd46:	2210      	movs	r2, #16
 800dd48:	e7b7      	b.n	800dcba <_printf_i+0xd2>
 800dd4a:	064d      	lsls	r5, r1, #25
 800dd4c:	bf48      	it	mi
 800dd4e:	b29b      	uxthmi	r3, r3
 800dd50:	e7ef      	b.n	800dd32 <_printf_i+0x14a>
 800dd52:	4665      	mov	r5, ip
 800dd54:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd58:	fb02 3311 	mls	r3, r2, r1, r3
 800dd5c:	5cc3      	ldrb	r3, [r0, r3]
 800dd5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800dd62:	460b      	mov	r3, r1
 800dd64:	2900      	cmp	r1, #0
 800dd66:	d1f5      	bne.n	800dd54 <_printf_i+0x16c>
 800dd68:	e7b9      	b.n	800dcde <_printf_i+0xf6>
 800dd6a:	6813      	ldr	r3, [r2, #0]
 800dd6c:	6825      	ldr	r5, [r4, #0]
 800dd6e:	6961      	ldr	r1, [r4, #20]
 800dd70:	1d18      	adds	r0, r3, #4
 800dd72:	6010      	str	r0, [r2, #0]
 800dd74:	0628      	lsls	r0, r5, #24
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	d501      	bpl.n	800dd7e <_printf_i+0x196>
 800dd7a:	6019      	str	r1, [r3, #0]
 800dd7c:	e002      	b.n	800dd84 <_printf_i+0x19c>
 800dd7e:	066a      	lsls	r2, r5, #25
 800dd80:	d5fb      	bpl.n	800dd7a <_printf_i+0x192>
 800dd82:	8019      	strh	r1, [r3, #0]
 800dd84:	2300      	movs	r3, #0
 800dd86:	6123      	str	r3, [r4, #16]
 800dd88:	4665      	mov	r5, ip
 800dd8a:	e7b9      	b.n	800dd00 <_printf_i+0x118>
 800dd8c:	6813      	ldr	r3, [r2, #0]
 800dd8e:	1d19      	adds	r1, r3, #4
 800dd90:	6011      	str	r1, [r2, #0]
 800dd92:	681d      	ldr	r5, [r3, #0]
 800dd94:	6862      	ldr	r2, [r4, #4]
 800dd96:	2100      	movs	r1, #0
 800dd98:	4628      	mov	r0, r5
 800dd9a:	f7f2 fa21 	bl	80001e0 <memchr>
 800dd9e:	b108      	cbz	r0, 800dda4 <_printf_i+0x1bc>
 800dda0:	1b40      	subs	r0, r0, r5
 800dda2:	6060      	str	r0, [r4, #4]
 800dda4:	6863      	ldr	r3, [r4, #4]
 800dda6:	6123      	str	r3, [r4, #16]
 800dda8:	2300      	movs	r3, #0
 800ddaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddae:	e7a7      	b.n	800dd00 <_printf_i+0x118>
 800ddb0:	6923      	ldr	r3, [r4, #16]
 800ddb2:	462a      	mov	r2, r5
 800ddb4:	4639      	mov	r1, r7
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	47c0      	blx	r8
 800ddba:	3001      	adds	r0, #1
 800ddbc:	d0aa      	beq.n	800dd14 <_printf_i+0x12c>
 800ddbe:	6823      	ldr	r3, [r4, #0]
 800ddc0:	079b      	lsls	r3, r3, #30
 800ddc2:	d413      	bmi.n	800ddec <_printf_i+0x204>
 800ddc4:	68e0      	ldr	r0, [r4, #12]
 800ddc6:	9b03      	ldr	r3, [sp, #12]
 800ddc8:	4298      	cmp	r0, r3
 800ddca:	bfb8      	it	lt
 800ddcc:	4618      	movlt	r0, r3
 800ddce:	e7a3      	b.n	800dd18 <_printf_i+0x130>
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	464a      	mov	r2, r9
 800ddd4:	4639      	mov	r1, r7
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	47c0      	blx	r8
 800ddda:	3001      	adds	r0, #1
 800dddc:	d09a      	beq.n	800dd14 <_printf_i+0x12c>
 800ddde:	3501      	adds	r5, #1
 800dde0:	68e3      	ldr	r3, [r4, #12]
 800dde2:	9a03      	ldr	r2, [sp, #12]
 800dde4:	1a9b      	subs	r3, r3, r2
 800dde6:	42ab      	cmp	r3, r5
 800dde8:	dcf2      	bgt.n	800ddd0 <_printf_i+0x1e8>
 800ddea:	e7eb      	b.n	800ddc4 <_printf_i+0x1dc>
 800ddec:	2500      	movs	r5, #0
 800ddee:	f104 0919 	add.w	r9, r4, #25
 800ddf2:	e7f5      	b.n	800dde0 <_printf_i+0x1f8>
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d1ac      	bne.n	800dd52 <_printf_i+0x16a>
 800ddf8:	7803      	ldrb	r3, [r0, #0]
 800ddfa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ddfe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de02:	e76c      	b.n	800dcde <_printf_i+0xf6>
 800de04:	08014342 	.word	0x08014342
 800de08:	08014353 	.word	0x08014353

0800de0c <_scanf_float>:
 800de0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de10:	469a      	mov	sl, r3
 800de12:	688b      	ldr	r3, [r1, #8]
 800de14:	4616      	mov	r6, r2
 800de16:	1e5a      	subs	r2, r3, #1
 800de18:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800de1c:	b087      	sub	sp, #28
 800de1e:	bf83      	ittte	hi
 800de20:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800de24:	189b      	addhi	r3, r3, r2
 800de26:	9301      	strhi	r3, [sp, #4]
 800de28:	2300      	movls	r3, #0
 800de2a:	bf86      	itte	hi
 800de2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800de30:	608b      	strhi	r3, [r1, #8]
 800de32:	9301      	strls	r3, [sp, #4]
 800de34:	680b      	ldr	r3, [r1, #0]
 800de36:	4688      	mov	r8, r1
 800de38:	f04f 0b00 	mov.w	fp, #0
 800de3c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800de40:	f848 3b1c 	str.w	r3, [r8], #28
 800de44:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800de48:	4607      	mov	r7, r0
 800de4a:	460c      	mov	r4, r1
 800de4c:	4645      	mov	r5, r8
 800de4e:	465a      	mov	r2, fp
 800de50:	46d9      	mov	r9, fp
 800de52:	f8cd b008 	str.w	fp, [sp, #8]
 800de56:	68a1      	ldr	r1, [r4, #8]
 800de58:	b181      	cbz	r1, 800de7c <_scanf_float+0x70>
 800de5a:	6833      	ldr	r3, [r6, #0]
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	2b49      	cmp	r3, #73	; 0x49
 800de60:	d071      	beq.n	800df46 <_scanf_float+0x13a>
 800de62:	d84d      	bhi.n	800df00 <_scanf_float+0xf4>
 800de64:	2b39      	cmp	r3, #57	; 0x39
 800de66:	d840      	bhi.n	800deea <_scanf_float+0xde>
 800de68:	2b31      	cmp	r3, #49	; 0x31
 800de6a:	f080 8088 	bcs.w	800df7e <_scanf_float+0x172>
 800de6e:	2b2d      	cmp	r3, #45	; 0x2d
 800de70:	f000 8090 	beq.w	800df94 <_scanf_float+0x188>
 800de74:	d815      	bhi.n	800dea2 <_scanf_float+0x96>
 800de76:	2b2b      	cmp	r3, #43	; 0x2b
 800de78:	f000 808c 	beq.w	800df94 <_scanf_float+0x188>
 800de7c:	f1b9 0f00 	cmp.w	r9, #0
 800de80:	d003      	beq.n	800de8a <_scanf_float+0x7e>
 800de82:	6823      	ldr	r3, [r4, #0]
 800de84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de88:	6023      	str	r3, [r4, #0]
 800de8a:	3a01      	subs	r2, #1
 800de8c:	2a01      	cmp	r2, #1
 800de8e:	f200 80ea 	bhi.w	800e066 <_scanf_float+0x25a>
 800de92:	4545      	cmp	r5, r8
 800de94:	f200 80dc 	bhi.w	800e050 <_scanf_float+0x244>
 800de98:	2601      	movs	r6, #1
 800de9a:	4630      	mov	r0, r6
 800de9c:	b007      	add	sp, #28
 800de9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea2:	2b2e      	cmp	r3, #46	; 0x2e
 800dea4:	f000 809f 	beq.w	800dfe6 <_scanf_float+0x1da>
 800dea8:	2b30      	cmp	r3, #48	; 0x30
 800deaa:	d1e7      	bne.n	800de7c <_scanf_float+0x70>
 800deac:	6820      	ldr	r0, [r4, #0]
 800deae:	f410 7f80 	tst.w	r0, #256	; 0x100
 800deb2:	d064      	beq.n	800df7e <_scanf_float+0x172>
 800deb4:	9b01      	ldr	r3, [sp, #4]
 800deb6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800deba:	6020      	str	r0, [r4, #0]
 800debc:	f109 0901 	add.w	r9, r9, #1
 800dec0:	b11b      	cbz	r3, 800deca <_scanf_float+0xbe>
 800dec2:	3b01      	subs	r3, #1
 800dec4:	3101      	adds	r1, #1
 800dec6:	9301      	str	r3, [sp, #4]
 800dec8:	60a1      	str	r1, [r4, #8]
 800deca:	68a3      	ldr	r3, [r4, #8]
 800decc:	3b01      	subs	r3, #1
 800dece:	60a3      	str	r3, [r4, #8]
 800ded0:	6923      	ldr	r3, [r4, #16]
 800ded2:	3301      	adds	r3, #1
 800ded4:	6123      	str	r3, [r4, #16]
 800ded6:	6873      	ldr	r3, [r6, #4]
 800ded8:	3b01      	subs	r3, #1
 800deda:	2b00      	cmp	r3, #0
 800dedc:	6073      	str	r3, [r6, #4]
 800dede:	f340 80ac 	ble.w	800e03a <_scanf_float+0x22e>
 800dee2:	6833      	ldr	r3, [r6, #0]
 800dee4:	3301      	adds	r3, #1
 800dee6:	6033      	str	r3, [r6, #0]
 800dee8:	e7b5      	b.n	800de56 <_scanf_float+0x4a>
 800deea:	2b45      	cmp	r3, #69	; 0x45
 800deec:	f000 8085 	beq.w	800dffa <_scanf_float+0x1ee>
 800def0:	2b46      	cmp	r3, #70	; 0x46
 800def2:	d06a      	beq.n	800dfca <_scanf_float+0x1be>
 800def4:	2b41      	cmp	r3, #65	; 0x41
 800def6:	d1c1      	bne.n	800de7c <_scanf_float+0x70>
 800def8:	2a01      	cmp	r2, #1
 800defa:	d1bf      	bne.n	800de7c <_scanf_float+0x70>
 800defc:	2202      	movs	r2, #2
 800defe:	e046      	b.n	800df8e <_scanf_float+0x182>
 800df00:	2b65      	cmp	r3, #101	; 0x65
 800df02:	d07a      	beq.n	800dffa <_scanf_float+0x1ee>
 800df04:	d818      	bhi.n	800df38 <_scanf_float+0x12c>
 800df06:	2b54      	cmp	r3, #84	; 0x54
 800df08:	d066      	beq.n	800dfd8 <_scanf_float+0x1cc>
 800df0a:	d811      	bhi.n	800df30 <_scanf_float+0x124>
 800df0c:	2b4e      	cmp	r3, #78	; 0x4e
 800df0e:	d1b5      	bne.n	800de7c <_scanf_float+0x70>
 800df10:	2a00      	cmp	r2, #0
 800df12:	d146      	bne.n	800dfa2 <_scanf_float+0x196>
 800df14:	f1b9 0f00 	cmp.w	r9, #0
 800df18:	d145      	bne.n	800dfa6 <_scanf_float+0x19a>
 800df1a:	6821      	ldr	r1, [r4, #0]
 800df1c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800df20:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800df24:	d13f      	bne.n	800dfa6 <_scanf_float+0x19a>
 800df26:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800df2a:	6021      	str	r1, [r4, #0]
 800df2c:	2201      	movs	r2, #1
 800df2e:	e02e      	b.n	800df8e <_scanf_float+0x182>
 800df30:	2b59      	cmp	r3, #89	; 0x59
 800df32:	d01e      	beq.n	800df72 <_scanf_float+0x166>
 800df34:	2b61      	cmp	r3, #97	; 0x61
 800df36:	e7de      	b.n	800def6 <_scanf_float+0xea>
 800df38:	2b6e      	cmp	r3, #110	; 0x6e
 800df3a:	d0e9      	beq.n	800df10 <_scanf_float+0x104>
 800df3c:	d815      	bhi.n	800df6a <_scanf_float+0x15e>
 800df3e:	2b66      	cmp	r3, #102	; 0x66
 800df40:	d043      	beq.n	800dfca <_scanf_float+0x1be>
 800df42:	2b69      	cmp	r3, #105	; 0x69
 800df44:	d19a      	bne.n	800de7c <_scanf_float+0x70>
 800df46:	f1bb 0f00 	cmp.w	fp, #0
 800df4a:	d138      	bne.n	800dfbe <_scanf_float+0x1b2>
 800df4c:	f1b9 0f00 	cmp.w	r9, #0
 800df50:	d197      	bne.n	800de82 <_scanf_float+0x76>
 800df52:	6821      	ldr	r1, [r4, #0]
 800df54:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800df58:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800df5c:	d195      	bne.n	800de8a <_scanf_float+0x7e>
 800df5e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800df62:	6021      	str	r1, [r4, #0]
 800df64:	f04f 0b01 	mov.w	fp, #1
 800df68:	e011      	b.n	800df8e <_scanf_float+0x182>
 800df6a:	2b74      	cmp	r3, #116	; 0x74
 800df6c:	d034      	beq.n	800dfd8 <_scanf_float+0x1cc>
 800df6e:	2b79      	cmp	r3, #121	; 0x79
 800df70:	d184      	bne.n	800de7c <_scanf_float+0x70>
 800df72:	f1bb 0f07 	cmp.w	fp, #7
 800df76:	d181      	bne.n	800de7c <_scanf_float+0x70>
 800df78:	f04f 0b08 	mov.w	fp, #8
 800df7c:	e007      	b.n	800df8e <_scanf_float+0x182>
 800df7e:	eb12 0f0b 	cmn.w	r2, fp
 800df82:	f47f af7b 	bne.w	800de7c <_scanf_float+0x70>
 800df86:	6821      	ldr	r1, [r4, #0]
 800df88:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800df8c:	6021      	str	r1, [r4, #0]
 800df8e:	702b      	strb	r3, [r5, #0]
 800df90:	3501      	adds	r5, #1
 800df92:	e79a      	b.n	800deca <_scanf_float+0xbe>
 800df94:	6821      	ldr	r1, [r4, #0]
 800df96:	0608      	lsls	r0, r1, #24
 800df98:	f57f af70 	bpl.w	800de7c <_scanf_float+0x70>
 800df9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800dfa0:	e7f4      	b.n	800df8c <_scanf_float+0x180>
 800dfa2:	2a02      	cmp	r2, #2
 800dfa4:	d047      	beq.n	800e036 <_scanf_float+0x22a>
 800dfa6:	f1bb 0f01 	cmp.w	fp, #1
 800dfaa:	d003      	beq.n	800dfb4 <_scanf_float+0x1a8>
 800dfac:	f1bb 0f04 	cmp.w	fp, #4
 800dfb0:	f47f af64 	bne.w	800de7c <_scanf_float+0x70>
 800dfb4:	f10b 0b01 	add.w	fp, fp, #1
 800dfb8:	fa5f fb8b 	uxtb.w	fp, fp
 800dfbc:	e7e7      	b.n	800df8e <_scanf_float+0x182>
 800dfbe:	f1bb 0f03 	cmp.w	fp, #3
 800dfc2:	d0f7      	beq.n	800dfb4 <_scanf_float+0x1a8>
 800dfc4:	f1bb 0f05 	cmp.w	fp, #5
 800dfc8:	e7f2      	b.n	800dfb0 <_scanf_float+0x1a4>
 800dfca:	f1bb 0f02 	cmp.w	fp, #2
 800dfce:	f47f af55 	bne.w	800de7c <_scanf_float+0x70>
 800dfd2:	f04f 0b03 	mov.w	fp, #3
 800dfd6:	e7da      	b.n	800df8e <_scanf_float+0x182>
 800dfd8:	f1bb 0f06 	cmp.w	fp, #6
 800dfdc:	f47f af4e 	bne.w	800de7c <_scanf_float+0x70>
 800dfe0:	f04f 0b07 	mov.w	fp, #7
 800dfe4:	e7d3      	b.n	800df8e <_scanf_float+0x182>
 800dfe6:	6821      	ldr	r1, [r4, #0]
 800dfe8:	0588      	lsls	r0, r1, #22
 800dfea:	f57f af47 	bpl.w	800de7c <_scanf_float+0x70>
 800dfee:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800dff2:	6021      	str	r1, [r4, #0]
 800dff4:	f8cd 9008 	str.w	r9, [sp, #8]
 800dff8:	e7c9      	b.n	800df8e <_scanf_float+0x182>
 800dffa:	6821      	ldr	r1, [r4, #0]
 800dffc:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800e000:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e004:	d006      	beq.n	800e014 <_scanf_float+0x208>
 800e006:	0548      	lsls	r0, r1, #21
 800e008:	f57f af38 	bpl.w	800de7c <_scanf_float+0x70>
 800e00c:	f1b9 0f00 	cmp.w	r9, #0
 800e010:	f43f af3b 	beq.w	800de8a <_scanf_float+0x7e>
 800e014:	0588      	lsls	r0, r1, #22
 800e016:	bf58      	it	pl
 800e018:	9802      	ldrpl	r0, [sp, #8]
 800e01a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e01e:	bf58      	it	pl
 800e020:	eba9 0000 	subpl.w	r0, r9, r0
 800e024:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800e028:	bf58      	it	pl
 800e02a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800e02e:	6021      	str	r1, [r4, #0]
 800e030:	f04f 0900 	mov.w	r9, #0
 800e034:	e7ab      	b.n	800df8e <_scanf_float+0x182>
 800e036:	2203      	movs	r2, #3
 800e038:	e7a9      	b.n	800df8e <_scanf_float+0x182>
 800e03a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e03e:	9205      	str	r2, [sp, #20]
 800e040:	4631      	mov	r1, r6
 800e042:	4638      	mov	r0, r7
 800e044:	4798      	blx	r3
 800e046:	9a05      	ldr	r2, [sp, #20]
 800e048:	2800      	cmp	r0, #0
 800e04a:	f43f af04 	beq.w	800de56 <_scanf_float+0x4a>
 800e04e:	e715      	b.n	800de7c <_scanf_float+0x70>
 800e050:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e054:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e058:	4632      	mov	r2, r6
 800e05a:	4638      	mov	r0, r7
 800e05c:	4798      	blx	r3
 800e05e:	6923      	ldr	r3, [r4, #16]
 800e060:	3b01      	subs	r3, #1
 800e062:	6123      	str	r3, [r4, #16]
 800e064:	e715      	b.n	800de92 <_scanf_float+0x86>
 800e066:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e06a:	2b06      	cmp	r3, #6
 800e06c:	d80a      	bhi.n	800e084 <_scanf_float+0x278>
 800e06e:	f1bb 0f02 	cmp.w	fp, #2
 800e072:	d968      	bls.n	800e146 <_scanf_float+0x33a>
 800e074:	f1ab 0b03 	sub.w	fp, fp, #3
 800e078:	fa5f fb8b 	uxtb.w	fp, fp
 800e07c:	eba5 0b0b 	sub.w	fp, r5, fp
 800e080:	455d      	cmp	r5, fp
 800e082:	d14b      	bne.n	800e11c <_scanf_float+0x310>
 800e084:	6823      	ldr	r3, [r4, #0]
 800e086:	05da      	lsls	r2, r3, #23
 800e088:	d51f      	bpl.n	800e0ca <_scanf_float+0x2be>
 800e08a:	055b      	lsls	r3, r3, #21
 800e08c:	d468      	bmi.n	800e160 <_scanf_float+0x354>
 800e08e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e092:	6923      	ldr	r3, [r4, #16]
 800e094:	2965      	cmp	r1, #101	; 0x65
 800e096:	f103 33ff 	add.w	r3, r3, #4294967295
 800e09a:	f105 3bff 	add.w	fp, r5, #4294967295
 800e09e:	6123      	str	r3, [r4, #16]
 800e0a0:	d00d      	beq.n	800e0be <_scanf_float+0x2b2>
 800e0a2:	2945      	cmp	r1, #69	; 0x45
 800e0a4:	d00b      	beq.n	800e0be <_scanf_float+0x2b2>
 800e0a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0aa:	4632      	mov	r2, r6
 800e0ac:	4638      	mov	r0, r7
 800e0ae:	4798      	blx	r3
 800e0b0:	6923      	ldr	r3, [r4, #16]
 800e0b2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800e0b6:	3b01      	subs	r3, #1
 800e0b8:	f1a5 0b02 	sub.w	fp, r5, #2
 800e0bc:	6123      	str	r3, [r4, #16]
 800e0be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0c2:	4632      	mov	r2, r6
 800e0c4:	4638      	mov	r0, r7
 800e0c6:	4798      	blx	r3
 800e0c8:	465d      	mov	r5, fp
 800e0ca:	6826      	ldr	r6, [r4, #0]
 800e0cc:	f016 0610 	ands.w	r6, r6, #16
 800e0d0:	d17a      	bne.n	800e1c8 <_scanf_float+0x3bc>
 800e0d2:	702e      	strb	r6, [r5, #0]
 800e0d4:	6823      	ldr	r3, [r4, #0]
 800e0d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e0da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0de:	d142      	bne.n	800e166 <_scanf_float+0x35a>
 800e0e0:	9b02      	ldr	r3, [sp, #8]
 800e0e2:	eba9 0303 	sub.w	r3, r9, r3
 800e0e6:	425a      	negs	r2, r3
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d149      	bne.n	800e180 <_scanf_float+0x374>
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	4641      	mov	r1, r8
 800e0f0:	4638      	mov	r0, r7
 800e0f2:	f000 fed9 	bl	800eea8 <_strtod_r>
 800e0f6:	6825      	ldr	r5, [r4, #0]
 800e0f8:	f8da 3000 	ldr.w	r3, [sl]
 800e0fc:	f015 0f02 	tst.w	r5, #2
 800e100:	f103 0204 	add.w	r2, r3, #4
 800e104:	ec59 8b10 	vmov	r8, r9, d0
 800e108:	f8ca 2000 	str.w	r2, [sl]
 800e10c:	d043      	beq.n	800e196 <_scanf_float+0x38a>
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	e9c3 8900 	strd	r8, r9, [r3]
 800e114:	68e3      	ldr	r3, [r4, #12]
 800e116:	3301      	adds	r3, #1
 800e118:	60e3      	str	r3, [r4, #12]
 800e11a:	e6be      	b.n	800de9a <_scanf_float+0x8e>
 800e11c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e120:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e124:	4632      	mov	r2, r6
 800e126:	4638      	mov	r0, r7
 800e128:	4798      	blx	r3
 800e12a:	6923      	ldr	r3, [r4, #16]
 800e12c:	3b01      	subs	r3, #1
 800e12e:	6123      	str	r3, [r4, #16]
 800e130:	e7a6      	b.n	800e080 <_scanf_float+0x274>
 800e132:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e136:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e13a:	4632      	mov	r2, r6
 800e13c:	4638      	mov	r0, r7
 800e13e:	4798      	blx	r3
 800e140:	6923      	ldr	r3, [r4, #16]
 800e142:	3b01      	subs	r3, #1
 800e144:	6123      	str	r3, [r4, #16]
 800e146:	4545      	cmp	r5, r8
 800e148:	d8f3      	bhi.n	800e132 <_scanf_float+0x326>
 800e14a:	e6a5      	b.n	800de98 <_scanf_float+0x8c>
 800e14c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e150:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e154:	4632      	mov	r2, r6
 800e156:	4638      	mov	r0, r7
 800e158:	4798      	blx	r3
 800e15a:	6923      	ldr	r3, [r4, #16]
 800e15c:	3b01      	subs	r3, #1
 800e15e:	6123      	str	r3, [r4, #16]
 800e160:	4545      	cmp	r5, r8
 800e162:	d8f3      	bhi.n	800e14c <_scanf_float+0x340>
 800e164:	e698      	b.n	800de98 <_scanf_float+0x8c>
 800e166:	9b03      	ldr	r3, [sp, #12]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d0bf      	beq.n	800e0ec <_scanf_float+0x2e0>
 800e16c:	9904      	ldr	r1, [sp, #16]
 800e16e:	230a      	movs	r3, #10
 800e170:	4632      	mov	r2, r6
 800e172:	3101      	adds	r1, #1
 800e174:	4638      	mov	r0, r7
 800e176:	f000 ff23 	bl	800efc0 <_strtol_r>
 800e17a:	9b03      	ldr	r3, [sp, #12]
 800e17c:	9d04      	ldr	r5, [sp, #16]
 800e17e:	1ac2      	subs	r2, r0, r3
 800e180:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e184:	429d      	cmp	r5, r3
 800e186:	bf28      	it	cs
 800e188:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800e18c:	490f      	ldr	r1, [pc, #60]	; (800e1cc <_scanf_float+0x3c0>)
 800e18e:	4628      	mov	r0, r5
 800e190:	f000 f858 	bl	800e244 <siprintf>
 800e194:	e7aa      	b.n	800e0ec <_scanf_float+0x2e0>
 800e196:	f015 0504 	ands.w	r5, r5, #4
 800e19a:	d1b8      	bne.n	800e10e <_scanf_float+0x302>
 800e19c:	681f      	ldr	r7, [r3, #0]
 800e19e:	ee10 2a10 	vmov	r2, s0
 800e1a2:	464b      	mov	r3, r9
 800e1a4:	ee10 0a10 	vmov	r0, s0
 800e1a8:	4649      	mov	r1, r9
 800e1aa:	f7f2 fcbf 	bl	8000b2c <__aeabi_dcmpun>
 800e1ae:	b128      	cbz	r0, 800e1bc <_scanf_float+0x3b0>
 800e1b0:	4628      	mov	r0, r5
 800e1b2:	f000 f80d 	bl	800e1d0 <nanf>
 800e1b6:	ed87 0a00 	vstr	s0, [r7]
 800e1ba:	e7ab      	b.n	800e114 <_scanf_float+0x308>
 800e1bc:	4640      	mov	r0, r8
 800e1be:	4649      	mov	r1, r9
 800e1c0:	f7f2 fd12 	bl	8000be8 <__aeabi_d2f>
 800e1c4:	6038      	str	r0, [r7, #0]
 800e1c6:	e7a5      	b.n	800e114 <_scanf_float+0x308>
 800e1c8:	2600      	movs	r6, #0
 800e1ca:	e666      	b.n	800de9a <_scanf_float+0x8e>
 800e1cc:	08014364 	.word	0x08014364

0800e1d0 <nanf>:
 800e1d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e1d8 <nanf+0x8>
 800e1d4:	4770      	bx	lr
 800e1d6:	bf00      	nop
 800e1d8:	7fc00000 	.word	0x7fc00000

0800e1dc <sniprintf>:
 800e1dc:	b40c      	push	{r2, r3}
 800e1de:	b530      	push	{r4, r5, lr}
 800e1e0:	4b17      	ldr	r3, [pc, #92]	; (800e240 <sniprintf+0x64>)
 800e1e2:	1e0c      	subs	r4, r1, #0
 800e1e4:	b09d      	sub	sp, #116	; 0x74
 800e1e6:	681d      	ldr	r5, [r3, #0]
 800e1e8:	da08      	bge.n	800e1fc <sniprintf+0x20>
 800e1ea:	238b      	movs	r3, #139	; 0x8b
 800e1ec:	602b      	str	r3, [r5, #0]
 800e1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f2:	b01d      	add	sp, #116	; 0x74
 800e1f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1f8:	b002      	add	sp, #8
 800e1fa:	4770      	bx	lr
 800e1fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e200:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e204:	bf14      	ite	ne
 800e206:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e20a:	4623      	moveq	r3, r4
 800e20c:	9304      	str	r3, [sp, #16]
 800e20e:	9307      	str	r3, [sp, #28]
 800e210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e214:	9002      	str	r0, [sp, #8]
 800e216:	9006      	str	r0, [sp, #24]
 800e218:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e21c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e21e:	ab21      	add	r3, sp, #132	; 0x84
 800e220:	a902      	add	r1, sp, #8
 800e222:	4628      	mov	r0, r5
 800e224:	9301      	str	r3, [sp, #4]
 800e226:	f002 fd91 	bl	8010d4c <_svfiprintf_r>
 800e22a:	1c43      	adds	r3, r0, #1
 800e22c:	bfbc      	itt	lt
 800e22e:	238b      	movlt	r3, #139	; 0x8b
 800e230:	602b      	strlt	r3, [r5, #0]
 800e232:	2c00      	cmp	r4, #0
 800e234:	d0dd      	beq.n	800e1f2 <sniprintf+0x16>
 800e236:	9b02      	ldr	r3, [sp, #8]
 800e238:	2200      	movs	r2, #0
 800e23a:	701a      	strb	r2, [r3, #0]
 800e23c:	e7d9      	b.n	800e1f2 <sniprintf+0x16>
 800e23e:	bf00      	nop
 800e240:	20000044 	.word	0x20000044

0800e244 <siprintf>:
 800e244:	b40e      	push	{r1, r2, r3}
 800e246:	b500      	push	{lr}
 800e248:	b09c      	sub	sp, #112	; 0x70
 800e24a:	ab1d      	add	r3, sp, #116	; 0x74
 800e24c:	9002      	str	r0, [sp, #8]
 800e24e:	9006      	str	r0, [sp, #24]
 800e250:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e254:	4809      	ldr	r0, [pc, #36]	; (800e27c <siprintf+0x38>)
 800e256:	9107      	str	r1, [sp, #28]
 800e258:	9104      	str	r1, [sp, #16]
 800e25a:	4909      	ldr	r1, [pc, #36]	; (800e280 <siprintf+0x3c>)
 800e25c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e260:	9105      	str	r1, [sp, #20]
 800e262:	6800      	ldr	r0, [r0, #0]
 800e264:	9301      	str	r3, [sp, #4]
 800e266:	a902      	add	r1, sp, #8
 800e268:	f002 fd70 	bl	8010d4c <_svfiprintf_r>
 800e26c:	9b02      	ldr	r3, [sp, #8]
 800e26e:	2200      	movs	r2, #0
 800e270:	701a      	strb	r2, [r3, #0]
 800e272:	b01c      	add	sp, #112	; 0x70
 800e274:	f85d eb04 	ldr.w	lr, [sp], #4
 800e278:	b003      	add	sp, #12
 800e27a:	4770      	bx	lr
 800e27c:	20000044 	.word	0x20000044
 800e280:	ffff0208 	.word	0xffff0208

0800e284 <sulp>:
 800e284:	b570      	push	{r4, r5, r6, lr}
 800e286:	4604      	mov	r4, r0
 800e288:	460d      	mov	r5, r1
 800e28a:	ec45 4b10 	vmov	d0, r4, r5
 800e28e:	4616      	mov	r6, r2
 800e290:	f002 fb18 	bl	80108c4 <__ulp>
 800e294:	ec51 0b10 	vmov	r0, r1, d0
 800e298:	b17e      	cbz	r6, 800e2ba <sulp+0x36>
 800e29a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e29e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	dd09      	ble.n	800e2ba <sulp+0x36>
 800e2a6:	051b      	lsls	r3, r3, #20
 800e2a8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e2ac:	2400      	movs	r4, #0
 800e2ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e2b2:	4622      	mov	r2, r4
 800e2b4:	462b      	mov	r3, r5
 800e2b6:	f7f2 f99f 	bl	80005f8 <__aeabi_dmul>
 800e2ba:	bd70      	pop	{r4, r5, r6, pc}
 800e2bc:	0000      	movs	r0, r0
	...

0800e2c0 <_strtod_l>:
 800e2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c4:	461f      	mov	r7, r3
 800e2c6:	b0a1      	sub	sp, #132	; 0x84
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	4681      	mov	r9, r0
 800e2cc:	4638      	mov	r0, r7
 800e2ce:	460e      	mov	r6, r1
 800e2d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800e2d2:	931c      	str	r3, [sp, #112]	; 0x70
 800e2d4:	f001 fff5 	bl	80102c2 <__localeconv_l>
 800e2d8:	4680      	mov	r8, r0
 800e2da:	6800      	ldr	r0, [r0, #0]
 800e2dc:	f7f1 ff78 	bl	80001d0 <strlen>
 800e2e0:	f04f 0a00 	mov.w	sl, #0
 800e2e4:	4604      	mov	r4, r0
 800e2e6:	f04f 0b00 	mov.w	fp, #0
 800e2ea:	961b      	str	r6, [sp, #108]	; 0x6c
 800e2ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e2ee:	781a      	ldrb	r2, [r3, #0]
 800e2f0:	2a0d      	cmp	r2, #13
 800e2f2:	d832      	bhi.n	800e35a <_strtod_l+0x9a>
 800e2f4:	2a09      	cmp	r2, #9
 800e2f6:	d236      	bcs.n	800e366 <_strtod_l+0xa6>
 800e2f8:	2a00      	cmp	r2, #0
 800e2fa:	d03e      	beq.n	800e37a <_strtod_l+0xba>
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	930d      	str	r3, [sp, #52]	; 0x34
 800e300:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e302:	782b      	ldrb	r3, [r5, #0]
 800e304:	2b30      	cmp	r3, #48	; 0x30
 800e306:	f040 80ac 	bne.w	800e462 <_strtod_l+0x1a2>
 800e30a:	786b      	ldrb	r3, [r5, #1]
 800e30c:	2b58      	cmp	r3, #88	; 0x58
 800e30e:	d001      	beq.n	800e314 <_strtod_l+0x54>
 800e310:	2b78      	cmp	r3, #120	; 0x78
 800e312:	d167      	bne.n	800e3e4 <_strtod_l+0x124>
 800e314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e316:	9301      	str	r3, [sp, #4]
 800e318:	ab1c      	add	r3, sp, #112	; 0x70
 800e31a:	9300      	str	r3, [sp, #0]
 800e31c:	9702      	str	r7, [sp, #8]
 800e31e:	ab1d      	add	r3, sp, #116	; 0x74
 800e320:	4a88      	ldr	r2, [pc, #544]	; (800e544 <_strtod_l+0x284>)
 800e322:	a91b      	add	r1, sp, #108	; 0x6c
 800e324:	4648      	mov	r0, r9
 800e326:	f001 fcf2 	bl	800fd0e <__gethex>
 800e32a:	f010 0407 	ands.w	r4, r0, #7
 800e32e:	4606      	mov	r6, r0
 800e330:	d005      	beq.n	800e33e <_strtod_l+0x7e>
 800e332:	2c06      	cmp	r4, #6
 800e334:	d12b      	bne.n	800e38e <_strtod_l+0xce>
 800e336:	3501      	adds	r5, #1
 800e338:	2300      	movs	r3, #0
 800e33a:	951b      	str	r5, [sp, #108]	; 0x6c
 800e33c:	930d      	str	r3, [sp, #52]	; 0x34
 800e33e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e340:	2b00      	cmp	r3, #0
 800e342:	f040 859a 	bne.w	800ee7a <_strtod_l+0xbba>
 800e346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e348:	b1e3      	cbz	r3, 800e384 <_strtod_l+0xc4>
 800e34a:	4652      	mov	r2, sl
 800e34c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e350:	ec43 2b10 	vmov	d0, r2, r3
 800e354:	b021      	add	sp, #132	; 0x84
 800e356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e35a:	2a2b      	cmp	r2, #43	; 0x2b
 800e35c:	d015      	beq.n	800e38a <_strtod_l+0xca>
 800e35e:	2a2d      	cmp	r2, #45	; 0x2d
 800e360:	d004      	beq.n	800e36c <_strtod_l+0xac>
 800e362:	2a20      	cmp	r2, #32
 800e364:	d1ca      	bne.n	800e2fc <_strtod_l+0x3c>
 800e366:	3301      	adds	r3, #1
 800e368:	931b      	str	r3, [sp, #108]	; 0x6c
 800e36a:	e7bf      	b.n	800e2ec <_strtod_l+0x2c>
 800e36c:	2201      	movs	r2, #1
 800e36e:	920d      	str	r2, [sp, #52]	; 0x34
 800e370:	1c5a      	adds	r2, r3, #1
 800e372:	921b      	str	r2, [sp, #108]	; 0x6c
 800e374:	785b      	ldrb	r3, [r3, #1]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1c2      	bne.n	800e300 <_strtod_l+0x40>
 800e37a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e37c:	961b      	str	r6, [sp, #108]	; 0x6c
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f040 8579 	bne.w	800ee76 <_strtod_l+0xbb6>
 800e384:	4652      	mov	r2, sl
 800e386:	465b      	mov	r3, fp
 800e388:	e7e2      	b.n	800e350 <_strtod_l+0x90>
 800e38a:	2200      	movs	r2, #0
 800e38c:	e7ef      	b.n	800e36e <_strtod_l+0xae>
 800e38e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e390:	b13a      	cbz	r2, 800e3a2 <_strtod_l+0xe2>
 800e392:	2135      	movs	r1, #53	; 0x35
 800e394:	a81e      	add	r0, sp, #120	; 0x78
 800e396:	f002 fb8d 	bl	8010ab4 <__copybits>
 800e39a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e39c:	4648      	mov	r0, r9
 800e39e:	f001 fffa 	bl	8010396 <_Bfree>
 800e3a2:	3c01      	subs	r4, #1
 800e3a4:	2c04      	cmp	r4, #4
 800e3a6:	d806      	bhi.n	800e3b6 <_strtod_l+0xf6>
 800e3a8:	e8df f004 	tbb	[pc, r4]
 800e3ac:	1714030a 	.word	0x1714030a
 800e3b0:	0a          	.byte	0x0a
 800e3b1:	00          	.byte	0x00
 800e3b2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800e3b6:	0730      	lsls	r0, r6, #28
 800e3b8:	d5c1      	bpl.n	800e33e <_strtod_l+0x7e>
 800e3ba:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e3be:	e7be      	b.n	800e33e <_strtod_l+0x7e>
 800e3c0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800e3c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e3c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e3ca:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e3ce:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e3d2:	e7f0      	b.n	800e3b6 <_strtod_l+0xf6>
 800e3d4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800e548 <_strtod_l+0x288>
 800e3d8:	e7ed      	b.n	800e3b6 <_strtod_l+0xf6>
 800e3da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e3de:	f04f 3aff 	mov.w	sl, #4294967295
 800e3e2:	e7e8      	b.n	800e3b6 <_strtod_l+0xf6>
 800e3e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e3e6:	1c5a      	adds	r2, r3, #1
 800e3e8:	921b      	str	r2, [sp, #108]	; 0x6c
 800e3ea:	785b      	ldrb	r3, [r3, #1]
 800e3ec:	2b30      	cmp	r3, #48	; 0x30
 800e3ee:	d0f9      	beq.n	800e3e4 <_strtod_l+0x124>
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d0a4      	beq.n	800e33e <_strtod_l+0x7e>
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	2500      	movs	r5, #0
 800e3f8:	9306      	str	r3, [sp, #24]
 800e3fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e3fc:	9308      	str	r3, [sp, #32]
 800e3fe:	9507      	str	r5, [sp, #28]
 800e400:	9505      	str	r5, [sp, #20]
 800e402:	220a      	movs	r2, #10
 800e404:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e406:	7807      	ldrb	r7, [r0, #0]
 800e408:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e40c:	b2d9      	uxtb	r1, r3
 800e40e:	2909      	cmp	r1, #9
 800e410:	d929      	bls.n	800e466 <_strtod_l+0x1a6>
 800e412:	4622      	mov	r2, r4
 800e414:	f8d8 1000 	ldr.w	r1, [r8]
 800e418:	f002 fda0 	bl	8010f5c <strncmp>
 800e41c:	2800      	cmp	r0, #0
 800e41e:	d031      	beq.n	800e484 <_strtod_l+0x1c4>
 800e420:	2000      	movs	r0, #0
 800e422:	9c05      	ldr	r4, [sp, #20]
 800e424:	9004      	str	r0, [sp, #16]
 800e426:	463b      	mov	r3, r7
 800e428:	4602      	mov	r2, r0
 800e42a:	2b65      	cmp	r3, #101	; 0x65
 800e42c:	d001      	beq.n	800e432 <_strtod_l+0x172>
 800e42e:	2b45      	cmp	r3, #69	; 0x45
 800e430:	d114      	bne.n	800e45c <_strtod_l+0x19c>
 800e432:	b924      	cbnz	r4, 800e43e <_strtod_l+0x17e>
 800e434:	b910      	cbnz	r0, 800e43c <_strtod_l+0x17c>
 800e436:	9b06      	ldr	r3, [sp, #24]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d09e      	beq.n	800e37a <_strtod_l+0xba>
 800e43c:	2400      	movs	r4, #0
 800e43e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e440:	1c73      	adds	r3, r6, #1
 800e442:	931b      	str	r3, [sp, #108]	; 0x6c
 800e444:	7873      	ldrb	r3, [r6, #1]
 800e446:	2b2b      	cmp	r3, #43	; 0x2b
 800e448:	d078      	beq.n	800e53c <_strtod_l+0x27c>
 800e44a:	2b2d      	cmp	r3, #45	; 0x2d
 800e44c:	d070      	beq.n	800e530 <_strtod_l+0x270>
 800e44e:	f04f 0c00 	mov.w	ip, #0
 800e452:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800e456:	2f09      	cmp	r7, #9
 800e458:	d97c      	bls.n	800e554 <_strtod_l+0x294>
 800e45a:	961b      	str	r6, [sp, #108]	; 0x6c
 800e45c:	f04f 0e00 	mov.w	lr, #0
 800e460:	e09a      	b.n	800e598 <_strtod_l+0x2d8>
 800e462:	2300      	movs	r3, #0
 800e464:	e7c7      	b.n	800e3f6 <_strtod_l+0x136>
 800e466:	9905      	ldr	r1, [sp, #20]
 800e468:	2908      	cmp	r1, #8
 800e46a:	bfdd      	ittte	le
 800e46c:	9907      	ldrle	r1, [sp, #28]
 800e46e:	fb02 3301 	mlale	r3, r2, r1, r3
 800e472:	9307      	strle	r3, [sp, #28]
 800e474:	fb02 3505 	mlagt	r5, r2, r5, r3
 800e478:	9b05      	ldr	r3, [sp, #20]
 800e47a:	3001      	adds	r0, #1
 800e47c:	3301      	adds	r3, #1
 800e47e:	9305      	str	r3, [sp, #20]
 800e480:	901b      	str	r0, [sp, #108]	; 0x6c
 800e482:	e7bf      	b.n	800e404 <_strtod_l+0x144>
 800e484:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e486:	191a      	adds	r2, r3, r4
 800e488:	921b      	str	r2, [sp, #108]	; 0x6c
 800e48a:	9a05      	ldr	r2, [sp, #20]
 800e48c:	5d1b      	ldrb	r3, [r3, r4]
 800e48e:	2a00      	cmp	r2, #0
 800e490:	d037      	beq.n	800e502 <_strtod_l+0x242>
 800e492:	9c05      	ldr	r4, [sp, #20]
 800e494:	4602      	mov	r2, r0
 800e496:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e49a:	2909      	cmp	r1, #9
 800e49c:	d913      	bls.n	800e4c6 <_strtod_l+0x206>
 800e49e:	2101      	movs	r1, #1
 800e4a0:	9104      	str	r1, [sp, #16]
 800e4a2:	e7c2      	b.n	800e42a <_strtod_l+0x16a>
 800e4a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e4a6:	1c5a      	adds	r2, r3, #1
 800e4a8:	921b      	str	r2, [sp, #108]	; 0x6c
 800e4aa:	785b      	ldrb	r3, [r3, #1]
 800e4ac:	3001      	adds	r0, #1
 800e4ae:	2b30      	cmp	r3, #48	; 0x30
 800e4b0:	d0f8      	beq.n	800e4a4 <_strtod_l+0x1e4>
 800e4b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e4b6:	2a08      	cmp	r2, #8
 800e4b8:	f200 84e4 	bhi.w	800ee84 <_strtod_l+0xbc4>
 800e4bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e4be:	9208      	str	r2, [sp, #32]
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	2000      	movs	r0, #0
 800e4c4:	4604      	mov	r4, r0
 800e4c6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800e4ca:	f100 0101 	add.w	r1, r0, #1
 800e4ce:	d012      	beq.n	800e4f6 <_strtod_l+0x236>
 800e4d0:	440a      	add	r2, r1
 800e4d2:	eb00 0c04 	add.w	ip, r0, r4
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	270a      	movs	r7, #10
 800e4da:	458c      	cmp	ip, r1
 800e4dc:	d113      	bne.n	800e506 <_strtod_l+0x246>
 800e4de:	1821      	adds	r1, r4, r0
 800e4e0:	2908      	cmp	r1, #8
 800e4e2:	f104 0401 	add.w	r4, r4, #1
 800e4e6:	4404      	add	r4, r0
 800e4e8:	dc19      	bgt.n	800e51e <_strtod_l+0x25e>
 800e4ea:	9b07      	ldr	r3, [sp, #28]
 800e4ec:	210a      	movs	r1, #10
 800e4ee:	fb01 e303 	mla	r3, r1, r3, lr
 800e4f2:	9307      	str	r3, [sp, #28]
 800e4f4:	2100      	movs	r1, #0
 800e4f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e4f8:	1c58      	adds	r0, r3, #1
 800e4fa:	901b      	str	r0, [sp, #108]	; 0x6c
 800e4fc:	785b      	ldrb	r3, [r3, #1]
 800e4fe:	4608      	mov	r0, r1
 800e500:	e7c9      	b.n	800e496 <_strtod_l+0x1d6>
 800e502:	9805      	ldr	r0, [sp, #20]
 800e504:	e7d3      	b.n	800e4ae <_strtod_l+0x1ee>
 800e506:	2908      	cmp	r1, #8
 800e508:	f101 0101 	add.w	r1, r1, #1
 800e50c:	dc03      	bgt.n	800e516 <_strtod_l+0x256>
 800e50e:	9b07      	ldr	r3, [sp, #28]
 800e510:	437b      	muls	r3, r7
 800e512:	9307      	str	r3, [sp, #28]
 800e514:	e7e1      	b.n	800e4da <_strtod_l+0x21a>
 800e516:	2910      	cmp	r1, #16
 800e518:	bfd8      	it	le
 800e51a:	437d      	mulle	r5, r7
 800e51c:	e7dd      	b.n	800e4da <_strtod_l+0x21a>
 800e51e:	2c10      	cmp	r4, #16
 800e520:	bfdc      	itt	le
 800e522:	210a      	movle	r1, #10
 800e524:	fb01 e505 	mlale	r5, r1, r5, lr
 800e528:	e7e4      	b.n	800e4f4 <_strtod_l+0x234>
 800e52a:	2301      	movs	r3, #1
 800e52c:	9304      	str	r3, [sp, #16]
 800e52e:	e781      	b.n	800e434 <_strtod_l+0x174>
 800e530:	f04f 0c01 	mov.w	ip, #1
 800e534:	1cb3      	adds	r3, r6, #2
 800e536:	931b      	str	r3, [sp, #108]	; 0x6c
 800e538:	78b3      	ldrb	r3, [r6, #2]
 800e53a:	e78a      	b.n	800e452 <_strtod_l+0x192>
 800e53c:	f04f 0c00 	mov.w	ip, #0
 800e540:	e7f8      	b.n	800e534 <_strtod_l+0x274>
 800e542:	bf00      	nop
 800e544:	0801436c 	.word	0x0801436c
 800e548:	7ff00000 	.word	0x7ff00000
 800e54c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e54e:	1c5f      	adds	r7, r3, #1
 800e550:	971b      	str	r7, [sp, #108]	; 0x6c
 800e552:	785b      	ldrb	r3, [r3, #1]
 800e554:	2b30      	cmp	r3, #48	; 0x30
 800e556:	d0f9      	beq.n	800e54c <_strtod_l+0x28c>
 800e558:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800e55c:	2f08      	cmp	r7, #8
 800e55e:	f63f af7d 	bhi.w	800e45c <_strtod_l+0x19c>
 800e562:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e566:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e568:	930a      	str	r3, [sp, #40]	; 0x28
 800e56a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e56c:	1c5f      	adds	r7, r3, #1
 800e56e:	971b      	str	r7, [sp, #108]	; 0x6c
 800e570:	785b      	ldrb	r3, [r3, #1]
 800e572:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800e576:	f1b8 0f09 	cmp.w	r8, #9
 800e57a:	d937      	bls.n	800e5ec <_strtod_l+0x32c>
 800e57c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e57e:	1a7f      	subs	r7, r7, r1
 800e580:	2f08      	cmp	r7, #8
 800e582:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e586:	dc37      	bgt.n	800e5f8 <_strtod_l+0x338>
 800e588:	45be      	cmp	lr, r7
 800e58a:	bfa8      	it	ge
 800e58c:	46be      	movge	lr, r7
 800e58e:	f1bc 0f00 	cmp.w	ip, #0
 800e592:	d001      	beq.n	800e598 <_strtod_l+0x2d8>
 800e594:	f1ce 0e00 	rsb	lr, lr, #0
 800e598:	2c00      	cmp	r4, #0
 800e59a:	d151      	bne.n	800e640 <_strtod_l+0x380>
 800e59c:	2800      	cmp	r0, #0
 800e59e:	f47f aece 	bne.w	800e33e <_strtod_l+0x7e>
 800e5a2:	9a06      	ldr	r2, [sp, #24]
 800e5a4:	2a00      	cmp	r2, #0
 800e5a6:	f47f aeca 	bne.w	800e33e <_strtod_l+0x7e>
 800e5aa:	9a04      	ldr	r2, [sp, #16]
 800e5ac:	2a00      	cmp	r2, #0
 800e5ae:	f47f aee4 	bne.w	800e37a <_strtod_l+0xba>
 800e5b2:	2b4e      	cmp	r3, #78	; 0x4e
 800e5b4:	d027      	beq.n	800e606 <_strtod_l+0x346>
 800e5b6:	dc21      	bgt.n	800e5fc <_strtod_l+0x33c>
 800e5b8:	2b49      	cmp	r3, #73	; 0x49
 800e5ba:	f47f aede 	bne.w	800e37a <_strtod_l+0xba>
 800e5be:	49a0      	ldr	r1, [pc, #640]	; (800e840 <_strtod_l+0x580>)
 800e5c0:	a81b      	add	r0, sp, #108	; 0x6c
 800e5c2:	f001 fdd7 	bl	8010174 <__match>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	f43f aed7 	beq.w	800e37a <_strtod_l+0xba>
 800e5cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e5ce:	499d      	ldr	r1, [pc, #628]	; (800e844 <_strtod_l+0x584>)
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	a81b      	add	r0, sp, #108	; 0x6c
 800e5d4:	931b      	str	r3, [sp, #108]	; 0x6c
 800e5d6:	f001 fdcd 	bl	8010174 <__match>
 800e5da:	b910      	cbnz	r0, 800e5e2 <_strtod_l+0x322>
 800e5dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e5de:	3301      	adds	r3, #1
 800e5e0:	931b      	str	r3, [sp, #108]	; 0x6c
 800e5e2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800e858 <_strtod_l+0x598>
 800e5e6:	f04f 0a00 	mov.w	sl, #0
 800e5ea:	e6a8      	b.n	800e33e <_strtod_l+0x7e>
 800e5ec:	210a      	movs	r1, #10
 800e5ee:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e5f2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e5f6:	e7b8      	b.n	800e56a <_strtod_l+0x2aa>
 800e5f8:	46be      	mov	lr, r7
 800e5fa:	e7c8      	b.n	800e58e <_strtod_l+0x2ce>
 800e5fc:	2b69      	cmp	r3, #105	; 0x69
 800e5fe:	d0de      	beq.n	800e5be <_strtod_l+0x2fe>
 800e600:	2b6e      	cmp	r3, #110	; 0x6e
 800e602:	f47f aeba 	bne.w	800e37a <_strtod_l+0xba>
 800e606:	4990      	ldr	r1, [pc, #576]	; (800e848 <_strtod_l+0x588>)
 800e608:	a81b      	add	r0, sp, #108	; 0x6c
 800e60a:	f001 fdb3 	bl	8010174 <__match>
 800e60e:	2800      	cmp	r0, #0
 800e610:	f43f aeb3 	beq.w	800e37a <_strtod_l+0xba>
 800e614:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	2b28      	cmp	r3, #40	; 0x28
 800e61a:	d10e      	bne.n	800e63a <_strtod_l+0x37a>
 800e61c:	aa1e      	add	r2, sp, #120	; 0x78
 800e61e:	498b      	ldr	r1, [pc, #556]	; (800e84c <_strtod_l+0x58c>)
 800e620:	a81b      	add	r0, sp, #108	; 0x6c
 800e622:	f001 fdbb 	bl	801019c <__hexnan>
 800e626:	2805      	cmp	r0, #5
 800e628:	d107      	bne.n	800e63a <_strtod_l+0x37a>
 800e62a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e62c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800e630:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e634:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e638:	e681      	b.n	800e33e <_strtod_l+0x7e>
 800e63a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800e860 <_strtod_l+0x5a0>
 800e63e:	e7d2      	b.n	800e5e6 <_strtod_l+0x326>
 800e640:	ebae 0302 	sub.w	r3, lr, r2
 800e644:	9306      	str	r3, [sp, #24]
 800e646:	9b05      	ldr	r3, [sp, #20]
 800e648:	9807      	ldr	r0, [sp, #28]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	bf08      	it	eq
 800e64e:	4623      	moveq	r3, r4
 800e650:	2c10      	cmp	r4, #16
 800e652:	9305      	str	r3, [sp, #20]
 800e654:	46a0      	mov	r8, r4
 800e656:	bfa8      	it	ge
 800e658:	f04f 0810 	movge.w	r8, #16
 800e65c:	f7f1 ff52 	bl	8000504 <__aeabi_ui2d>
 800e660:	2c09      	cmp	r4, #9
 800e662:	4682      	mov	sl, r0
 800e664:	468b      	mov	fp, r1
 800e666:	dc13      	bgt.n	800e690 <_strtod_l+0x3d0>
 800e668:	9b06      	ldr	r3, [sp, #24]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	f43f ae67 	beq.w	800e33e <_strtod_l+0x7e>
 800e670:	9b06      	ldr	r3, [sp, #24]
 800e672:	dd7a      	ble.n	800e76a <_strtod_l+0x4aa>
 800e674:	2b16      	cmp	r3, #22
 800e676:	dc61      	bgt.n	800e73c <_strtod_l+0x47c>
 800e678:	4a75      	ldr	r2, [pc, #468]	; (800e850 <_strtod_l+0x590>)
 800e67a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800e67e:	e9de 0100 	ldrd	r0, r1, [lr]
 800e682:	4652      	mov	r2, sl
 800e684:	465b      	mov	r3, fp
 800e686:	f7f1 ffb7 	bl	80005f8 <__aeabi_dmul>
 800e68a:	4682      	mov	sl, r0
 800e68c:	468b      	mov	fp, r1
 800e68e:	e656      	b.n	800e33e <_strtod_l+0x7e>
 800e690:	4b6f      	ldr	r3, [pc, #444]	; (800e850 <_strtod_l+0x590>)
 800e692:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e696:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e69a:	f7f1 ffad 	bl	80005f8 <__aeabi_dmul>
 800e69e:	4606      	mov	r6, r0
 800e6a0:	4628      	mov	r0, r5
 800e6a2:	460f      	mov	r7, r1
 800e6a4:	f7f1 ff2e 	bl	8000504 <__aeabi_ui2d>
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	4630      	mov	r0, r6
 800e6ae:	4639      	mov	r1, r7
 800e6b0:	f7f1 fdec 	bl	800028c <__adddf3>
 800e6b4:	2c0f      	cmp	r4, #15
 800e6b6:	4682      	mov	sl, r0
 800e6b8:	468b      	mov	fp, r1
 800e6ba:	ddd5      	ble.n	800e668 <_strtod_l+0x3a8>
 800e6bc:	9b06      	ldr	r3, [sp, #24]
 800e6be:	eba4 0808 	sub.w	r8, r4, r8
 800e6c2:	4498      	add	r8, r3
 800e6c4:	f1b8 0f00 	cmp.w	r8, #0
 800e6c8:	f340 8096 	ble.w	800e7f8 <_strtod_l+0x538>
 800e6cc:	f018 030f 	ands.w	r3, r8, #15
 800e6d0:	d00a      	beq.n	800e6e8 <_strtod_l+0x428>
 800e6d2:	495f      	ldr	r1, [pc, #380]	; (800e850 <_strtod_l+0x590>)
 800e6d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e6d8:	4652      	mov	r2, sl
 800e6da:	465b      	mov	r3, fp
 800e6dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6e0:	f7f1 ff8a 	bl	80005f8 <__aeabi_dmul>
 800e6e4:	4682      	mov	sl, r0
 800e6e6:	468b      	mov	fp, r1
 800e6e8:	f038 080f 	bics.w	r8, r8, #15
 800e6ec:	d073      	beq.n	800e7d6 <_strtod_l+0x516>
 800e6ee:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e6f2:	dd47      	ble.n	800e784 <_strtod_l+0x4c4>
 800e6f4:	2400      	movs	r4, #0
 800e6f6:	46a0      	mov	r8, r4
 800e6f8:	9407      	str	r4, [sp, #28]
 800e6fa:	9405      	str	r4, [sp, #20]
 800e6fc:	2322      	movs	r3, #34	; 0x22
 800e6fe:	f8df b158 	ldr.w	fp, [pc, #344]	; 800e858 <_strtod_l+0x598>
 800e702:	f8c9 3000 	str.w	r3, [r9]
 800e706:	f04f 0a00 	mov.w	sl, #0
 800e70a:	9b07      	ldr	r3, [sp, #28]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f43f ae16 	beq.w	800e33e <_strtod_l+0x7e>
 800e712:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e714:	4648      	mov	r0, r9
 800e716:	f001 fe3e 	bl	8010396 <_Bfree>
 800e71a:	9905      	ldr	r1, [sp, #20]
 800e71c:	4648      	mov	r0, r9
 800e71e:	f001 fe3a 	bl	8010396 <_Bfree>
 800e722:	4641      	mov	r1, r8
 800e724:	4648      	mov	r0, r9
 800e726:	f001 fe36 	bl	8010396 <_Bfree>
 800e72a:	9907      	ldr	r1, [sp, #28]
 800e72c:	4648      	mov	r0, r9
 800e72e:	f001 fe32 	bl	8010396 <_Bfree>
 800e732:	4621      	mov	r1, r4
 800e734:	4648      	mov	r0, r9
 800e736:	f001 fe2e 	bl	8010396 <_Bfree>
 800e73a:	e600      	b.n	800e33e <_strtod_l+0x7e>
 800e73c:	9a06      	ldr	r2, [sp, #24]
 800e73e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800e742:	4293      	cmp	r3, r2
 800e744:	dbba      	blt.n	800e6bc <_strtod_l+0x3fc>
 800e746:	4d42      	ldr	r5, [pc, #264]	; (800e850 <_strtod_l+0x590>)
 800e748:	f1c4 040f 	rsb	r4, r4, #15
 800e74c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800e750:	4652      	mov	r2, sl
 800e752:	465b      	mov	r3, fp
 800e754:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e758:	f7f1 ff4e 	bl	80005f8 <__aeabi_dmul>
 800e75c:	9b06      	ldr	r3, [sp, #24]
 800e75e:	1b1c      	subs	r4, r3, r4
 800e760:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e764:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e768:	e78d      	b.n	800e686 <_strtod_l+0x3c6>
 800e76a:	f113 0f16 	cmn.w	r3, #22
 800e76e:	dba5      	blt.n	800e6bc <_strtod_l+0x3fc>
 800e770:	4a37      	ldr	r2, [pc, #220]	; (800e850 <_strtod_l+0x590>)
 800e772:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800e776:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e77a:	4650      	mov	r0, sl
 800e77c:	4659      	mov	r1, fp
 800e77e:	f7f2 f865 	bl	800084c <__aeabi_ddiv>
 800e782:	e782      	b.n	800e68a <_strtod_l+0x3ca>
 800e784:	2300      	movs	r3, #0
 800e786:	4e33      	ldr	r6, [pc, #204]	; (800e854 <_strtod_l+0x594>)
 800e788:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e78c:	4650      	mov	r0, sl
 800e78e:	4659      	mov	r1, fp
 800e790:	461d      	mov	r5, r3
 800e792:	f1b8 0f01 	cmp.w	r8, #1
 800e796:	dc21      	bgt.n	800e7dc <_strtod_l+0x51c>
 800e798:	b10b      	cbz	r3, 800e79e <_strtod_l+0x4de>
 800e79a:	4682      	mov	sl, r0
 800e79c:	468b      	mov	fp, r1
 800e79e:	4b2d      	ldr	r3, [pc, #180]	; (800e854 <_strtod_l+0x594>)
 800e7a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e7a4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e7a8:	4652      	mov	r2, sl
 800e7aa:	465b      	mov	r3, fp
 800e7ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e7b0:	f7f1 ff22 	bl	80005f8 <__aeabi_dmul>
 800e7b4:	4b28      	ldr	r3, [pc, #160]	; (800e858 <_strtod_l+0x598>)
 800e7b6:	460a      	mov	r2, r1
 800e7b8:	400b      	ands	r3, r1
 800e7ba:	4928      	ldr	r1, [pc, #160]	; (800e85c <_strtod_l+0x59c>)
 800e7bc:	428b      	cmp	r3, r1
 800e7be:	4682      	mov	sl, r0
 800e7c0:	d898      	bhi.n	800e6f4 <_strtod_l+0x434>
 800e7c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e7c6:	428b      	cmp	r3, r1
 800e7c8:	bf86      	itte	hi
 800e7ca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e864 <_strtod_l+0x5a4>
 800e7ce:	f04f 3aff 	movhi.w	sl, #4294967295
 800e7d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	9304      	str	r3, [sp, #16]
 800e7da:	e077      	b.n	800e8cc <_strtod_l+0x60c>
 800e7dc:	f018 0f01 	tst.w	r8, #1
 800e7e0:	d006      	beq.n	800e7f0 <_strtod_l+0x530>
 800e7e2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800e7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ea:	f7f1 ff05 	bl	80005f8 <__aeabi_dmul>
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	3501      	adds	r5, #1
 800e7f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e7f6:	e7cc      	b.n	800e792 <_strtod_l+0x4d2>
 800e7f8:	d0ed      	beq.n	800e7d6 <_strtod_l+0x516>
 800e7fa:	f1c8 0800 	rsb	r8, r8, #0
 800e7fe:	f018 020f 	ands.w	r2, r8, #15
 800e802:	d00a      	beq.n	800e81a <_strtod_l+0x55a>
 800e804:	4b12      	ldr	r3, [pc, #72]	; (800e850 <_strtod_l+0x590>)
 800e806:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e80a:	4650      	mov	r0, sl
 800e80c:	4659      	mov	r1, fp
 800e80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e812:	f7f2 f81b 	bl	800084c <__aeabi_ddiv>
 800e816:	4682      	mov	sl, r0
 800e818:	468b      	mov	fp, r1
 800e81a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e81e:	d0da      	beq.n	800e7d6 <_strtod_l+0x516>
 800e820:	f1b8 0f1f 	cmp.w	r8, #31
 800e824:	dd20      	ble.n	800e868 <_strtod_l+0x5a8>
 800e826:	2400      	movs	r4, #0
 800e828:	46a0      	mov	r8, r4
 800e82a:	9407      	str	r4, [sp, #28]
 800e82c:	9405      	str	r4, [sp, #20]
 800e82e:	2322      	movs	r3, #34	; 0x22
 800e830:	f04f 0a00 	mov.w	sl, #0
 800e834:	f04f 0b00 	mov.w	fp, #0
 800e838:	f8c9 3000 	str.w	r3, [r9]
 800e83c:	e765      	b.n	800e70a <_strtod_l+0x44a>
 800e83e:	bf00      	nop
 800e840:	08014335 	.word	0x08014335
 800e844:	080143c3 	.word	0x080143c3
 800e848:	0801433d 	.word	0x0801433d
 800e84c:	08014380 	.word	0x08014380
 800e850:	08014400 	.word	0x08014400
 800e854:	080143d8 	.word	0x080143d8
 800e858:	7ff00000 	.word	0x7ff00000
 800e85c:	7ca00000 	.word	0x7ca00000
 800e860:	fff80000 	.word	0xfff80000
 800e864:	7fefffff 	.word	0x7fefffff
 800e868:	f018 0310 	ands.w	r3, r8, #16
 800e86c:	bf18      	it	ne
 800e86e:	236a      	movne	r3, #106	; 0x6a
 800e870:	4da0      	ldr	r5, [pc, #640]	; (800eaf4 <_strtod_l+0x834>)
 800e872:	9304      	str	r3, [sp, #16]
 800e874:	4650      	mov	r0, sl
 800e876:	4659      	mov	r1, fp
 800e878:	2300      	movs	r3, #0
 800e87a:	f1b8 0f00 	cmp.w	r8, #0
 800e87e:	f300 810a 	bgt.w	800ea96 <_strtod_l+0x7d6>
 800e882:	b10b      	cbz	r3, 800e888 <_strtod_l+0x5c8>
 800e884:	4682      	mov	sl, r0
 800e886:	468b      	mov	fp, r1
 800e888:	9b04      	ldr	r3, [sp, #16]
 800e88a:	b1bb      	cbz	r3, 800e8bc <_strtod_l+0x5fc>
 800e88c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e890:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e894:	2b00      	cmp	r3, #0
 800e896:	4659      	mov	r1, fp
 800e898:	dd10      	ble.n	800e8bc <_strtod_l+0x5fc>
 800e89a:	2b1f      	cmp	r3, #31
 800e89c:	f340 8107 	ble.w	800eaae <_strtod_l+0x7ee>
 800e8a0:	2b34      	cmp	r3, #52	; 0x34
 800e8a2:	bfde      	ittt	le
 800e8a4:	3b20      	suble	r3, #32
 800e8a6:	f04f 32ff 	movle.w	r2, #4294967295
 800e8aa:	fa02 f303 	lslle.w	r3, r2, r3
 800e8ae:	f04f 0a00 	mov.w	sl, #0
 800e8b2:	bfcc      	ite	gt
 800e8b4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e8b8:	ea03 0b01 	andle.w	fp, r3, r1
 800e8bc:	2200      	movs	r2, #0
 800e8be:	2300      	movs	r3, #0
 800e8c0:	4650      	mov	r0, sl
 800e8c2:	4659      	mov	r1, fp
 800e8c4:	f7f2 f900 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	d1ac      	bne.n	800e826 <_strtod_l+0x566>
 800e8cc:	9b07      	ldr	r3, [sp, #28]
 800e8ce:	9300      	str	r3, [sp, #0]
 800e8d0:	9a05      	ldr	r2, [sp, #20]
 800e8d2:	9908      	ldr	r1, [sp, #32]
 800e8d4:	4623      	mov	r3, r4
 800e8d6:	4648      	mov	r0, r9
 800e8d8:	f001 fdaf 	bl	801043a <__s2b>
 800e8dc:	9007      	str	r0, [sp, #28]
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	f43f af08 	beq.w	800e6f4 <_strtod_l+0x434>
 800e8e4:	9a06      	ldr	r2, [sp, #24]
 800e8e6:	9b06      	ldr	r3, [sp, #24]
 800e8e8:	2a00      	cmp	r2, #0
 800e8ea:	f1c3 0300 	rsb	r3, r3, #0
 800e8ee:	bfa8      	it	ge
 800e8f0:	2300      	movge	r3, #0
 800e8f2:	930e      	str	r3, [sp, #56]	; 0x38
 800e8f4:	2400      	movs	r4, #0
 800e8f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e8fa:	9316      	str	r3, [sp, #88]	; 0x58
 800e8fc:	46a0      	mov	r8, r4
 800e8fe:	9b07      	ldr	r3, [sp, #28]
 800e900:	4648      	mov	r0, r9
 800e902:	6859      	ldr	r1, [r3, #4]
 800e904:	f001 fd13 	bl	801032e <_Balloc>
 800e908:	9005      	str	r0, [sp, #20]
 800e90a:	2800      	cmp	r0, #0
 800e90c:	f43f aef6 	beq.w	800e6fc <_strtod_l+0x43c>
 800e910:	9b07      	ldr	r3, [sp, #28]
 800e912:	691a      	ldr	r2, [r3, #16]
 800e914:	3202      	adds	r2, #2
 800e916:	f103 010c 	add.w	r1, r3, #12
 800e91a:	0092      	lsls	r2, r2, #2
 800e91c:	300c      	adds	r0, #12
 800e91e:	f001 fcfb 	bl	8010318 <memcpy>
 800e922:	aa1e      	add	r2, sp, #120	; 0x78
 800e924:	a91d      	add	r1, sp, #116	; 0x74
 800e926:	ec4b ab10 	vmov	d0, sl, fp
 800e92a:	4648      	mov	r0, r9
 800e92c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800e930:	f002 f83e 	bl	80109b0 <__d2b>
 800e934:	901c      	str	r0, [sp, #112]	; 0x70
 800e936:	2800      	cmp	r0, #0
 800e938:	f43f aee0 	beq.w	800e6fc <_strtod_l+0x43c>
 800e93c:	2101      	movs	r1, #1
 800e93e:	4648      	mov	r0, r9
 800e940:	f001 fe07 	bl	8010552 <__i2b>
 800e944:	4680      	mov	r8, r0
 800e946:	2800      	cmp	r0, #0
 800e948:	f43f aed8 	beq.w	800e6fc <_strtod_l+0x43c>
 800e94c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e94e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e950:	2e00      	cmp	r6, #0
 800e952:	bfab      	itete	ge
 800e954:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e956:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800e958:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800e95a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800e95c:	bfac      	ite	ge
 800e95e:	18f7      	addge	r7, r6, r3
 800e960:	1b9d      	sublt	r5, r3, r6
 800e962:	9b04      	ldr	r3, [sp, #16]
 800e964:	1af6      	subs	r6, r6, r3
 800e966:	4416      	add	r6, r2
 800e968:	4b63      	ldr	r3, [pc, #396]	; (800eaf8 <_strtod_l+0x838>)
 800e96a:	3e01      	subs	r6, #1
 800e96c:	429e      	cmp	r6, r3
 800e96e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e972:	f280 80af 	bge.w	800ead4 <_strtod_l+0x814>
 800e976:	1b9b      	subs	r3, r3, r6
 800e978:	2b1f      	cmp	r3, #31
 800e97a:	eba2 0203 	sub.w	r2, r2, r3
 800e97e:	f04f 0101 	mov.w	r1, #1
 800e982:	f300 809b 	bgt.w	800eabc <_strtod_l+0x7fc>
 800e986:	fa01 f303 	lsl.w	r3, r1, r3
 800e98a:	930f      	str	r3, [sp, #60]	; 0x3c
 800e98c:	2300      	movs	r3, #0
 800e98e:	930a      	str	r3, [sp, #40]	; 0x28
 800e990:	18be      	adds	r6, r7, r2
 800e992:	9b04      	ldr	r3, [sp, #16]
 800e994:	42b7      	cmp	r7, r6
 800e996:	4415      	add	r5, r2
 800e998:	441d      	add	r5, r3
 800e99a:	463b      	mov	r3, r7
 800e99c:	bfa8      	it	ge
 800e99e:	4633      	movge	r3, r6
 800e9a0:	42ab      	cmp	r3, r5
 800e9a2:	bfa8      	it	ge
 800e9a4:	462b      	movge	r3, r5
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	bfc2      	ittt	gt
 800e9aa:	1af6      	subgt	r6, r6, r3
 800e9ac:	1aed      	subgt	r5, r5, r3
 800e9ae:	1aff      	subgt	r7, r7, r3
 800e9b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9b2:	b1bb      	cbz	r3, 800e9e4 <_strtod_l+0x724>
 800e9b4:	4641      	mov	r1, r8
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	4648      	mov	r0, r9
 800e9ba:	f001 fe69 	bl	8010690 <__pow5mult>
 800e9be:	4680      	mov	r8, r0
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	f43f ae9b 	beq.w	800e6fc <_strtod_l+0x43c>
 800e9c6:	4601      	mov	r1, r0
 800e9c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e9ca:	4648      	mov	r0, r9
 800e9cc:	f001 fdca 	bl	8010564 <__multiply>
 800e9d0:	900c      	str	r0, [sp, #48]	; 0x30
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	f43f ae92 	beq.w	800e6fc <_strtod_l+0x43c>
 800e9d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e9da:	4648      	mov	r0, r9
 800e9dc:	f001 fcdb 	bl	8010396 <_Bfree>
 800e9e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9e2:	931c      	str	r3, [sp, #112]	; 0x70
 800e9e4:	2e00      	cmp	r6, #0
 800e9e6:	dc7a      	bgt.n	800eade <_strtod_l+0x81e>
 800e9e8:	9b06      	ldr	r3, [sp, #24]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	dd08      	ble.n	800ea00 <_strtod_l+0x740>
 800e9ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e9f0:	9905      	ldr	r1, [sp, #20]
 800e9f2:	4648      	mov	r0, r9
 800e9f4:	f001 fe4c 	bl	8010690 <__pow5mult>
 800e9f8:	9005      	str	r0, [sp, #20]
 800e9fa:	2800      	cmp	r0, #0
 800e9fc:	f43f ae7e 	beq.w	800e6fc <_strtod_l+0x43c>
 800ea00:	2d00      	cmp	r5, #0
 800ea02:	dd08      	ble.n	800ea16 <_strtod_l+0x756>
 800ea04:	462a      	mov	r2, r5
 800ea06:	9905      	ldr	r1, [sp, #20]
 800ea08:	4648      	mov	r0, r9
 800ea0a:	f001 fe8f 	bl	801072c <__lshift>
 800ea0e:	9005      	str	r0, [sp, #20]
 800ea10:	2800      	cmp	r0, #0
 800ea12:	f43f ae73 	beq.w	800e6fc <_strtod_l+0x43c>
 800ea16:	2f00      	cmp	r7, #0
 800ea18:	dd08      	ble.n	800ea2c <_strtod_l+0x76c>
 800ea1a:	4641      	mov	r1, r8
 800ea1c:	463a      	mov	r2, r7
 800ea1e:	4648      	mov	r0, r9
 800ea20:	f001 fe84 	bl	801072c <__lshift>
 800ea24:	4680      	mov	r8, r0
 800ea26:	2800      	cmp	r0, #0
 800ea28:	f43f ae68 	beq.w	800e6fc <_strtod_l+0x43c>
 800ea2c:	9a05      	ldr	r2, [sp, #20]
 800ea2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ea30:	4648      	mov	r0, r9
 800ea32:	f001 fee9 	bl	8010808 <__mdiff>
 800ea36:	4604      	mov	r4, r0
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	f43f ae5f 	beq.w	800e6fc <_strtod_l+0x43c>
 800ea3e:	68c3      	ldr	r3, [r0, #12]
 800ea40:	930c      	str	r3, [sp, #48]	; 0x30
 800ea42:	2300      	movs	r3, #0
 800ea44:	60c3      	str	r3, [r0, #12]
 800ea46:	4641      	mov	r1, r8
 800ea48:	f001 fec4 	bl	80107d4 <__mcmp>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	da55      	bge.n	800eafc <_strtod_l+0x83c>
 800ea50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea52:	b9e3      	cbnz	r3, 800ea8e <_strtod_l+0x7ce>
 800ea54:	f1ba 0f00 	cmp.w	sl, #0
 800ea58:	d119      	bne.n	800ea8e <_strtod_l+0x7ce>
 800ea5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea5e:	b9b3      	cbnz	r3, 800ea8e <_strtod_l+0x7ce>
 800ea60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea64:	0d1b      	lsrs	r3, r3, #20
 800ea66:	051b      	lsls	r3, r3, #20
 800ea68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ea6c:	d90f      	bls.n	800ea8e <_strtod_l+0x7ce>
 800ea6e:	6963      	ldr	r3, [r4, #20]
 800ea70:	b913      	cbnz	r3, 800ea78 <_strtod_l+0x7b8>
 800ea72:	6923      	ldr	r3, [r4, #16]
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	dd0a      	ble.n	800ea8e <_strtod_l+0x7ce>
 800ea78:	4621      	mov	r1, r4
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	4648      	mov	r0, r9
 800ea7e:	f001 fe55 	bl	801072c <__lshift>
 800ea82:	4641      	mov	r1, r8
 800ea84:	4604      	mov	r4, r0
 800ea86:	f001 fea5 	bl	80107d4 <__mcmp>
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	dc67      	bgt.n	800eb5e <_strtod_l+0x89e>
 800ea8e:	9b04      	ldr	r3, [sp, #16]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d171      	bne.n	800eb78 <_strtod_l+0x8b8>
 800ea94:	e63d      	b.n	800e712 <_strtod_l+0x452>
 800ea96:	f018 0f01 	tst.w	r8, #1
 800ea9a:	d004      	beq.n	800eaa6 <_strtod_l+0x7e6>
 800ea9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eaa0:	f7f1 fdaa 	bl	80005f8 <__aeabi_dmul>
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eaaa:	3508      	adds	r5, #8
 800eaac:	e6e5      	b.n	800e87a <_strtod_l+0x5ba>
 800eaae:	f04f 32ff 	mov.w	r2, #4294967295
 800eab2:	fa02 f303 	lsl.w	r3, r2, r3
 800eab6:	ea03 0a0a 	and.w	sl, r3, sl
 800eaba:	e6ff      	b.n	800e8bc <_strtod_l+0x5fc>
 800eabc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800eac0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800eac4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800eac8:	36e2      	adds	r6, #226	; 0xe2
 800eaca:	fa01 f306 	lsl.w	r3, r1, r6
 800eace:	930a      	str	r3, [sp, #40]	; 0x28
 800ead0:	910f      	str	r1, [sp, #60]	; 0x3c
 800ead2:	e75d      	b.n	800e990 <_strtod_l+0x6d0>
 800ead4:	2300      	movs	r3, #0
 800ead6:	930a      	str	r3, [sp, #40]	; 0x28
 800ead8:	2301      	movs	r3, #1
 800eada:	930f      	str	r3, [sp, #60]	; 0x3c
 800eadc:	e758      	b.n	800e990 <_strtod_l+0x6d0>
 800eade:	4632      	mov	r2, r6
 800eae0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800eae2:	4648      	mov	r0, r9
 800eae4:	f001 fe22 	bl	801072c <__lshift>
 800eae8:	901c      	str	r0, [sp, #112]	; 0x70
 800eaea:	2800      	cmp	r0, #0
 800eaec:	f47f af7c 	bne.w	800e9e8 <_strtod_l+0x728>
 800eaf0:	e604      	b.n	800e6fc <_strtod_l+0x43c>
 800eaf2:	bf00      	nop
 800eaf4:	08014398 	.word	0x08014398
 800eaf8:	fffffc02 	.word	0xfffffc02
 800eafc:	465d      	mov	r5, fp
 800eafe:	f040 8086 	bne.w	800ec0e <_strtod_l+0x94e>
 800eb02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb08:	b32a      	cbz	r2, 800eb56 <_strtod_l+0x896>
 800eb0a:	4aaf      	ldr	r2, [pc, #700]	; (800edc8 <_strtod_l+0xb08>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d153      	bne.n	800ebb8 <_strtod_l+0x8f8>
 800eb10:	9b04      	ldr	r3, [sp, #16]
 800eb12:	4650      	mov	r0, sl
 800eb14:	b1d3      	cbz	r3, 800eb4c <_strtod_l+0x88c>
 800eb16:	4aad      	ldr	r2, [pc, #692]	; (800edcc <_strtod_l+0xb0c>)
 800eb18:	402a      	ands	r2, r5
 800eb1a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800eb1e:	f04f 31ff 	mov.w	r1, #4294967295
 800eb22:	d816      	bhi.n	800eb52 <_strtod_l+0x892>
 800eb24:	0d12      	lsrs	r2, r2, #20
 800eb26:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800eb2a:	fa01 f303 	lsl.w	r3, r1, r3
 800eb2e:	4298      	cmp	r0, r3
 800eb30:	d142      	bne.n	800ebb8 <_strtod_l+0x8f8>
 800eb32:	4ba7      	ldr	r3, [pc, #668]	; (800edd0 <_strtod_l+0xb10>)
 800eb34:	429d      	cmp	r5, r3
 800eb36:	d102      	bne.n	800eb3e <_strtod_l+0x87e>
 800eb38:	3001      	adds	r0, #1
 800eb3a:	f43f addf 	beq.w	800e6fc <_strtod_l+0x43c>
 800eb3e:	4ba3      	ldr	r3, [pc, #652]	; (800edcc <_strtod_l+0xb0c>)
 800eb40:	402b      	ands	r3, r5
 800eb42:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800eb46:	f04f 0a00 	mov.w	sl, #0
 800eb4a:	e7a0      	b.n	800ea8e <_strtod_l+0x7ce>
 800eb4c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb50:	e7ed      	b.n	800eb2e <_strtod_l+0x86e>
 800eb52:	460b      	mov	r3, r1
 800eb54:	e7eb      	b.n	800eb2e <_strtod_l+0x86e>
 800eb56:	bb7b      	cbnz	r3, 800ebb8 <_strtod_l+0x8f8>
 800eb58:	f1ba 0f00 	cmp.w	sl, #0
 800eb5c:	d12c      	bne.n	800ebb8 <_strtod_l+0x8f8>
 800eb5e:	9904      	ldr	r1, [sp, #16]
 800eb60:	4a9a      	ldr	r2, [pc, #616]	; (800edcc <_strtod_l+0xb0c>)
 800eb62:	465b      	mov	r3, fp
 800eb64:	b1f1      	cbz	r1, 800eba4 <_strtod_l+0x8e4>
 800eb66:	ea02 010b 	and.w	r1, r2, fp
 800eb6a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800eb6e:	dc19      	bgt.n	800eba4 <_strtod_l+0x8e4>
 800eb70:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800eb74:	f77f ae5b 	ble.w	800e82e <_strtod_l+0x56e>
 800eb78:	4a96      	ldr	r2, [pc, #600]	; (800edd4 <_strtod_l+0xb14>)
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800eb80:	4650      	mov	r0, sl
 800eb82:	4659      	mov	r1, fp
 800eb84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800eb88:	f7f1 fd36 	bl	80005f8 <__aeabi_dmul>
 800eb8c:	4682      	mov	sl, r0
 800eb8e:	468b      	mov	fp, r1
 800eb90:	2900      	cmp	r1, #0
 800eb92:	f47f adbe 	bne.w	800e712 <_strtod_l+0x452>
 800eb96:	2800      	cmp	r0, #0
 800eb98:	f47f adbb 	bne.w	800e712 <_strtod_l+0x452>
 800eb9c:	2322      	movs	r3, #34	; 0x22
 800eb9e:	f8c9 3000 	str.w	r3, [r9]
 800eba2:	e5b6      	b.n	800e712 <_strtod_l+0x452>
 800eba4:	4013      	ands	r3, r2
 800eba6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ebaa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ebae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ebb2:	f04f 3aff 	mov.w	sl, #4294967295
 800ebb6:	e76a      	b.n	800ea8e <_strtod_l+0x7ce>
 800ebb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebba:	b193      	cbz	r3, 800ebe2 <_strtod_l+0x922>
 800ebbc:	422b      	tst	r3, r5
 800ebbe:	f43f af66 	beq.w	800ea8e <_strtod_l+0x7ce>
 800ebc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebc4:	9a04      	ldr	r2, [sp, #16]
 800ebc6:	4650      	mov	r0, sl
 800ebc8:	4659      	mov	r1, fp
 800ebca:	b173      	cbz	r3, 800ebea <_strtod_l+0x92a>
 800ebcc:	f7ff fb5a 	bl	800e284 <sulp>
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	460b      	mov	r3, r1
 800ebd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ebd8:	f7f1 fb58 	bl	800028c <__adddf3>
 800ebdc:	4682      	mov	sl, r0
 800ebde:	468b      	mov	fp, r1
 800ebe0:	e755      	b.n	800ea8e <_strtod_l+0x7ce>
 800ebe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebe4:	ea13 0f0a 	tst.w	r3, sl
 800ebe8:	e7e9      	b.n	800ebbe <_strtod_l+0x8fe>
 800ebea:	f7ff fb4b 	bl	800e284 <sulp>
 800ebee:	4602      	mov	r2, r0
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ebf6:	f7f1 fb47 	bl	8000288 <__aeabi_dsub>
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	4682      	mov	sl, r0
 800ec00:	468b      	mov	fp, r1
 800ec02:	f7f1 ff61 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec06:	2800      	cmp	r0, #0
 800ec08:	f47f ae11 	bne.w	800e82e <_strtod_l+0x56e>
 800ec0c:	e73f      	b.n	800ea8e <_strtod_l+0x7ce>
 800ec0e:	4641      	mov	r1, r8
 800ec10:	4620      	mov	r0, r4
 800ec12:	f001 ff1c 	bl	8010a4e <__ratio>
 800ec16:	ec57 6b10 	vmov	r6, r7, d0
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec20:	ee10 0a10 	vmov	r0, s0
 800ec24:	4639      	mov	r1, r7
 800ec26:	f7f1 ff63 	bl	8000af0 <__aeabi_dcmple>
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	d077      	beq.n	800ed1e <_strtod_l+0xa5e>
 800ec2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d04a      	beq.n	800ecca <_strtod_l+0xa0a>
 800ec34:	4b68      	ldr	r3, [pc, #416]	; (800edd8 <_strtod_l+0xb18>)
 800ec36:	2200      	movs	r2, #0
 800ec38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ec3c:	4f66      	ldr	r7, [pc, #408]	; (800edd8 <_strtod_l+0xb18>)
 800ec3e:	2600      	movs	r6, #0
 800ec40:	4b62      	ldr	r3, [pc, #392]	; (800edcc <_strtod_l+0xb0c>)
 800ec42:	402b      	ands	r3, r5
 800ec44:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec48:	4b64      	ldr	r3, [pc, #400]	; (800eddc <_strtod_l+0xb1c>)
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	f040 80ce 	bne.w	800edec <_strtod_l+0xb2c>
 800ec50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ec54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ec58:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800ec5c:	ec4b ab10 	vmov	d0, sl, fp
 800ec60:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ec64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ec68:	f001 fe2c 	bl	80108c4 <__ulp>
 800ec6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ec70:	ec53 2b10 	vmov	r2, r3, d0
 800ec74:	f7f1 fcc0 	bl	80005f8 <__aeabi_dmul>
 800ec78:	4652      	mov	r2, sl
 800ec7a:	465b      	mov	r3, fp
 800ec7c:	f7f1 fb06 	bl	800028c <__adddf3>
 800ec80:	460b      	mov	r3, r1
 800ec82:	4952      	ldr	r1, [pc, #328]	; (800edcc <_strtod_l+0xb0c>)
 800ec84:	4a56      	ldr	r2, [pc, #344]	; (800ede0 <_strtod_l+0xb20>)
 800ec86:	4019      	ands	r1, r3
 800ec88:	4291      	cmp	r1, r2
 800ec8a:	4682      	mov	sl, r0
 800ec8c:	d95b      	bls.n	800ed46 <_strtod_l+0xa86>
 800ec8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec90:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d103      	bne.n	800eca0 <_strtod_l+0x9e0>
 800ec98:	9b08      	ldr	r3, [sp, #32]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	f43f ad2e 	beq.w	800e6fc <_strtod_l+0x43c>
 800eca0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800edd0 <_strtod_l+0xb10>
 800eca4:	f04f 3aff 	mov.w	sl, #4294967295
 800eca8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ecaa:	4648      	mov	r0, r9
 800ecac:	f001 fb73 	bl	8010396 <_Bfree>
 800ecb0:	9905      	ldr	r1, [sp, #20]
 800ecb2:	4648      	mov	r0, r9
 800ecb4:	f001 fb6f 	bl	8010396 <_Bfree>
 800ecb8:	4641      	mov	r1, r8
 800ecba:	4648      	mov	r0, r9
 800ecbc:	f001 fb6b 	bl	8010396 <_Bfree>
 800ecc0:	4621      	mov	r1, r4
 800ecc2:	4648      	mov	r0, r9
 800ecc4:	f001 fb67 	bl	8010396 <_Bfree>
 800ecc8:	e619      	b.n	800e8fe <_strtod_l+0x63e>
 800ecca:	f1ba 0f00 	cmp.w	sl, #0
 800ecce:	d11a      	bne.n	800ed06 <_strtod_l+0xa46>
 800ecd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ecd4:	b9eb      	cbnz	r3, 800ed12 <_strtod_l+0xa52>
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	4b3f      	ldr	r3, [pc, #252]	; (800edd8 <_strtod_l+0xb18>)
 800ecda:	4630      	mov	r0, r6
 800ecdc:	4639      	mov	r1, r7
 800ecde:	f7f1 fefd 	bl	8000adc <__aeabi_dcmplt>
 800ece2:	b9c8      	cbnz	r0, 800ed18 <_strtod_l+0xa58>
 800ece4:	4630      	mov	r0, r6
 800ece6:	4639      	mov	r1, r7
 800ece8:	2200      	movs	r2, #0
 800ecea:	4b3e      	ldr	r3, [pc, #248]	; (800ede4 <_strtod_l+0xb24>)
 800ecec:	f7f1 fc84 	bl	80005f8 <__aeabi_dmul>
 800ecf0:	4606      	mov	r6, r0
 800ecf2:	460f      	mov	r7, r1
 800ecf4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ecf8:	9618      	str	r6, [sp, #96]	; 0x60
 800ecfa:	9319      	str	r3, [sp, #100]	; 0x64
 800ecfc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800ed00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ed04:	e79c      	b.n	800ec40 <_strtod_l+0x980>
 800ed06:	f1ba 0f01 	cmp.w	sl, #1
 800ed0a:	d102      	bne.n	800ed12 <_strtod_l+0xa52>
 800ed0c:	2d00      	cmp	r5, #0
 800ed0e:	f43f ad8e 	beq.w	800e82e <_strtod_l+0x56e>
 800ed12:	2200      	movs	r2, #0
 800ed14:	4b34      	ldr	r3, [pc, #208]	; (800ede8 <_strtod_l+0xb28>)
 800ed16:	e78f      	b.n	800ec38 <_strtod_l+0x978>
 800ed18:	2600      	movs	r6, #0
 800ed1a:	4f32      	ldr	r7, [pc, #200]	; (800ede4 <_strtod_l+0xb24>)
 800ed1c:	e7ea      	b.n	800ecf4 <_strtod_l+0xa34>
 800ed1e:	4b31      	ldr	r3, [pc, #196]	; (800ede4 <_strtod_l+0xb24>)
 800ed20:	4630      	mov	r0, r6
 800ed22:	4639      	mov	r1, r7
 800ed24:	2200      	movs	r2, #0
 800ed26:	f7f1 fc67 	bl	80005f8 <__aeabi_dmul>
 800ed2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed2c:	4606      	mov	r6, r0
 800ed2e:	460f      	mov	r7, r1
 800ed30:	b933      	cbnz	r3, 800ed40 <_strtod_l+0xa80>
 800ed32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed36:	9010      	str	r0, [sp, #64]	; 0x40
 800ed38:	9311      	str	r3, [sp, #68]	; 0x44
 800ed3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ed3e:	e7df      	b.n	800ed00 <_strtod_l+0xa40>
 800ed40:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ed44:	e7f9      	b.n	800ed3a <_strtod_l+0xa7a>
 800ed46:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ed4a:	9b04      	ldr	r3, [sp, #16]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d1ab      	bne.n	800eca8 <_strtod_l+0x9e8>
 800ed50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ed54:	0d1b      	lsrs	r3, r3, #20
 800ed56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed58:	051b      	lsls	r3, r3, #20
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	465d      	mov	r5, fp
 800ed5e:	d1a3      	bne.n	800eca8 <_strtod_l+0x9e8>
 800ed60:	4639      	mov	r1, r7
 800ed62:	4630      	mov	r0, r6
 800ed64:	f7f1 fef8 	bl	8000b58 <__aeabi_d2iz>
 800ed68:	f7f1 fbdc 	bl	8000524 <__aeabi_i2d>
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	4602      	mov	r2, r0
 800ed70:	4639      	mov	r1, r7
 800ed72:	4630      	mov	r0, r6
 800ed74:	f7f1 fa88 	bl	8000288 <__aeabi_dsub>
 800ed78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	460f      	mov	r7, r1
 800ed7e:	b933      	cbnz	r3, 800ed8e <_strtod_l+0xace>
 800ed80:	f1ba 0f00 	cmp.w	sl, #0
 800ed84:	d103      	bne.n	800ed8e <_strtod_l+0xace>
 800ed86:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800ed8a:	2d00      	cmp	r5, #0
 800ed8c:	d06d      	beq.n	800ee6a <_strtod_l+0xbaa>
 800ed8e:	a30a      	add	r3, pc, #40	; (adr r3, 800edb8 <_strtod_l+0xaf8>)
 800ed90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed94:	4630      	mov	r0, r6
 800ed96:	4639      	mov	r1, r7
 800ed98:	f7f1 fea0 	bl	8000adc <__aeabi_dcmplt>
 800ed9c:	2800      	cmp	r0, #0
 800ed9e:	f47f acb8 	bne.w	800e712 <_strtod_l+0x452>
 800eda2:	a307      	add	r3, pc, #28	; (adr r3, 800edc0 <_strtod_l+0xb00>)
 800eda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda8:	4630      	mov	r0, r6
 800edaa:	4639      	mov	r1, r7
 800edac:	f7f1 feb4 	bl	8000b18 <__aeabi_dcmpgt>
 800edb0:	2800      	cmp	r0, #0
 800edb2:	f43f af79 	beq.w	800eca8 <_strtod_l+0x9e8>
 800edb6:	e4ac      	b.n	800e712 <_strtod_l+0x452>
 800edb8:	94a03595 	.word	0x94a03595
 800edbc:	3fdfffff 	.word	0x3fdfffff
 800edc0:	35afe535 	.word	0x35afe535
 800edc4:	3fe00000 	.word	0x3fe00000
 800edc8:	000fffff 	.word	0x000fffff
 800edcc:	7ff00000 	.word	0x7ff00000
 800edd0:	7fefffff 	.word	0x7fefffff
 800edd4:	39500000 	.word	0x39500000
 800edd8:	3ff00000 	.word	0x3ff00000
 800eddc:	7fe00000 	.word	0x7fe00000
 800ede0:	7c9fffff 	.word	0x7c9fffff
 800ede4:	3fe00000 	.word	0x3fe00000
 800ede8:	bff00000 	.word	0xbff00000
 800edec:	9b04      	ldr	r3, [sp, #16]
 800edee:	b333      	cbz	r3, 800ee3e <_strtod_l+0xb7e>
 800edf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edf2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800edf6:	d822      	bhi.n	800ee3e <_strtod_l+0xb7e>
 800edf8:	a327      	add	r3, pc, #156	; (adr r3, 800ee98 <_strtod_l+0xbd8>)
 800edfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfe:	4630      	mov	r0, r6
 800ee00:	4639      	mov	r1, r7
 800ee02:	f7f1 fe75 	bl	8000af0 <__aeabi_dcmple>
 800ee06:	b1a0      	cbz	r0, 800ee32 <_strtod_l+0xb72>
 800ee08:	4639      	mov	r1, r7
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	f7f1 fecc 	bl	8000ba8 <__aeabi_d2uiz>
 800ee10:	2800      	cmp	r0, #0
 800ee12:	bf08      	it	eq
 800ee14:	2001      	moveq	r0, #1
 800ee16:	f7f1 fb75 	bl	8000504 <__aeabi_ui2d>
 800ee1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee1c:	4606      	mov	r6, r0
 800ee1e:	460f      	mov	r7, r1
 800ee20:	bb03      	cbnz	r3, 800ee64 <_strtod_l+0xba4>
 800ee22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee26:	9012      	str	r0, [sp, #72]	; 0x48
 800ee28:	9313      	str	r3, [sp, #76]	; 0x4c
 800ee2a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ee2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ee32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee36:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ee3a:	1a9b      	subs	r3, r3, r2
 800ee3c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee3e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ee42:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ee46:	f001 fd3d 	bl	80108c4 <__ulp>
 800ee4a:	4650      	mov	r0, sl
 800ee4c:	ec53 2b10 	vmov	r2, r3, d0
 800ee50:	4659      	mov	r1, fp
 800ee52:	f7f1 fbd1 	bl	80005f8 <__aeabi_dmul>
 800ee56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ee5a:	f7f1 fa17 	bl	800028c <__adddf3>
 800ee5e:	4682      	mov	sl, r0
 800ee60:	468b      	mov	fp, r1
 800ee62:	e772      	b.n	800ed4a <_strtod_l+0xa8a>
 800ee64:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800ee68:	e7df      	b.n	800ee2a <_strtod_l+0xb6a>
 800ee6a:	a30d      	add	r3, pc, #52	; (adr r3, 800eea0 <_strtod_l+0xbe0>)
 800ee6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee70:	f7f1 fe34 	bl	8000adc <__aeabi_dcmplt>
 800ee74:	e79c      	b.n	800edb0 <_strtod_l+0xaf0>
 800ee76:	2300      	movs	r3, #0
 800ee78:	930d      	str	r3, [sp, #52]	; 0x34
 800ee7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ee7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee7e:	6013      	str	r3, [r2, #0]
 800ee80:	f7ff ba61 	b.w	800e346 <_strtod_l+0x86>
 800ee84:	2b65      	cmp	r3, #101	; 0x65
 800ee86:	f04f 0200 	mov.w	r2, #0
 800ee8a:	f43f ab4e 	beq.w	800e52a <_strtod_l+0x26a>
 800ee8e:	2101      	movs	r1, #1
 800ee90:	4614      	mov	r4, r2
 800ee92:	9104      	str	r1, [sp, #16]
 800ee94:	f7ff bacb 	b.w	800e42e <_strtod_l+0x16e>
 800ee98:	ffc00000 	.word	0xffc00000
 800ee9c:	41dfffff 	.word	0x41dfffff
 800eea0:	94a03595 	.word	0x94a03595
 800eea4:	3fcfffff 	.word	0x3fcfffff

0800eea8 <_strtod_r>:
 800eea8:	4b05      	ldr	r3, [pc, #20]	; (800eec0 <_strtod_r+0x18>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	b410      	push	{r4}
 800eeae:	6a1b      	ldr	r3, [r3, #32]
 800eeb0:	4c04      	ldr	r4, [pc, #16]	; (800eec4 <_strtod_r+0x1c>)
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	bf08      	it	eq
 800eeb6:	4623      	moveq	r3, r4
 800eeb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eebc:	f7ff ba00 	b.w	800e2c0 <_strtod_l>
 800eec0:	20000044 	.word	0x20000044
 800eec4:	200000a8 	.word	0x200000a8

0800eec8 <_strtol_l.isra.0>:
 800eec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eecc:	4680      	mov	r8, r0
 800eece:	4689      	mov	r9, r1
 800eed0:	4692      	mov	sl, r2
 800eed2:	461e      	mov	r6, r3
 800eed4:	460f      	mov	r7, r1
 800eed6:	463d      	mov	r5, r7
 800eed8:	9808      	ldr	r0, [sp, #32]
 800eeda:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eede:	f001 f9ed 	bl	80102bc <__locale_ctype_ptr_l>
 800eee2:	4420      	add	r0, r4
 800eee4:	7843      	ldrb	r3, [r0, #1]
 800eee6:	f013 0308 	ands.w	r3, r3, #8
 800eeea:	d132      	bne.n	800ef52 <_strtol_l.isra.0+0x8a>
 800eeec:	2c2d      	cmp	r4, #45	; 0x2d
 800eeee:	d132      	bne.n	800ef56 <_strtol_l.isra.0+0x8e>
 800eef0:	787c      	ldrb	r4, [r7, #1]
 800eef2:	1cbd      	adds	r5, r7, #2
 800eef4:	2201      	movs	r2, #1
 800eef6:	2e00      	cmp	r6, #0
 800eef8:	d05d      	beq.n	800efb6 <_strtol_l.isra.0+0xee>
 800eefa:	2e10      	cmp	r6, #16
 800eefc:	d109      	bne.n	800ef12 <_strtol_l.isra.0+0x4a>
 800eefe:	2c30      	cmp	r4, #48	; 0x30
 800ef00:	d107      	bne.n	800ef12 <_strtol_l.isra.0+0x4a>
 800ef02:	782b      	ldrb	r3, [r5, #0]
 800ef04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ef08:	2b58      	cmp	r3, #88	; 0x58
 800ef0a:	d14f      	bne.n	800efac <_strtol_l.isra.0+0xe4>
 800ef0c:	786c      	ldrb	r4, [r5, #1]
 800ef0e:	2610      	movs	r6, #16
 800ef10:	3502      	adds	r5, #2
 800ef12:	2a00      	cmp	r2, #0
 800ef14:	bf14      	ite	ne
 800ef16:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ef1a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ef1e:	2700      	movs	r7, #0
 800ef20:	fbb1 fcf6 	udiv	ip, r1, r6
 800ef24:	4638      	mov	r0, r7
 800ef26:	fb06 1e1c 	mls	lr, r6, ip, r1
 800ef2a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ef2e:	2b09      	cmp	r3, #9
 800ef30:	d817      	bhi.n	800ef62 <_strtol_l.isra.0+0x9a>
 800ef32:	461c      	mov	r4, r3
 800ef34:	42a6      	cmp	r6, r4
 800ef36:	dd23      	ble.n	800ef80 <_strtol_l.isra.0+0xb8>
 800ef38:	1c7b      	adds	r3, r7, #1
 800ef3a:	d007      	beq.n	800ef4c <_strtol_l.isra.0+0x84>
 800ef3c:	4584      	cmp	ip, r0
 800ef3e:	d31c      	bcc.n	800ef7a <_strtol_l.isra.0+0xb2>
 800ef40:	d101      	bne.n	800ef46 <_strtol_l.isra.0+0x7e>
 800ef42:	45a6      	cmp	lr, r4
 800ef44:	db19      	blt.n	800ef7a <_strtol_l.isra.0+0xb2>
 800ef46:	fb00 4006 	mla	r0, r0, r6, r4
 800ef4a:	2701      	movs	r7, #1
 800ef4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef50:	e7eb      	b.n	800ef2a <_strtol_l.isra.0+0x62>
 800ef52:	462f      	mov	r7, r5
 800ef54:	e7bf      	b.n	800eed6 <_strtol_l.isra.0+0xe>
 800ef56:	2c2b      	cmp	r4, #43	; 0x2b
 800ef58:	bf04      	itt	eq
 800ef5a:	1cbd      	addeq	r5, r7, #2
 800ef5c:	787c      	ldrbeq	r4, [r7, #1]
 800ef5e:	461a      	mov	r2, r3
 800ef60:	e7c9      	b.n	800eef6 <_strtol_l.isra.0+0x2e>
 800ef62:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800ef66:	2b19      	cmp	r3, #25
 800ef68:	d801      	bhi.n	800ef6e <_strtol_l.isra.0+0xa6>
 800ef6a:	3c37      	subs	r4, #55	; 0x37
 800ef6c:	e7e2      	b.n	800ef34 <_strtol_l.isra.0+0x6c>
 800ef6e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800ef72:	2b19      	cmp	r3, #25
 800ef74:	d804      	bhi.n	800ef80 <_strtol_l.isra.0+0xb8>
 800ef76:	3c57      	subs	r4, #87	; 0x57
 800ef78:	e7dc      	b.n	800ef34 <_strtol_l.isra.0+0x6c>
 800ef7a:	f04f 37ff 	mov.w	r7, #4294967295
 800ef7e:	e7e5      	b.n	800ef4c <_strtol_l.isra.0+0x84>
 800ef80:	1c7b      	adds	r3, r7, #1
 800ef82:	d108      	bne.n	800ef96 <_strtol_l.isra.0+0xce>
 800ef84:	2322      	movs	r3, #34	; 0x22
 800ef86:	f8c8 3000 	str.w	r3, [r8]
 800ef8a:	4608      	mov	r0, r1
 800ef8c:	f1ba 0f00 	cmp.w	sl, #0
 800ef90:	d107      	bne.n	800efa2 <_strtol_l.isra.0+0xda>
 800ef92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef96:	b102      	cbz	r2, 800ef9a <_strtol_l.isra.0+0xd2>
 800ef98:	4240      	negs	r0, r0
 800ef9a:	f1ba 0f00 	cmp.w	sl, #0
 800ef9e:	d0f8      	beq.n	800ef92 <_strtol_l.isra.0+0xca>
 800efa0:	b10f      	cbz	r7, 800efa6 <_strtol_l.isra.0+0xde>
 800efa2:	f105 39ff 	add.w	r9, r5, #4294967295
 800efa6:	f8ca 9000 	str.w	r9, [sl]
 800efaa:	e7f2      	b.n	800ef92 <_strtol_l.isra.0+0xca>
 800efac:	2430      	movs	r4, #48	; 0x30
 800efae:	2e00      	cmp	r6, #0
 800efb0:	d1af      	bne.n	800ef12 <_strtol_l.isra.0+0x4a>
 800efb2:	2608      	movs	r6, #8
 800efb4:	e7ad      	b.n	800ef12 <_strtol_l.isra.0+0x4a>
 800efb6:	2c30      	cmp	r4, #48	; 0x30
 800efb8:	d0a3      	beq.n	800ef02 <_strtol_l.isra.0+0x3a>
 800efba:	260a      	movs	r6, #10
 800efbc:	e7a9      	b.n	800ef12 <_strtol_l.isra.0+0x4a>
	...

0800efc0 <_strtol_r>:
 800efc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efc2:	4c06      	ldr	r4, [pc, #24]	; (800efdc <_strtol_r+0x1c>)
 800efc4:	4d06      	ldr	r5, [pc, #24]	; (800efe0 <_strtol_r+0x20>)
 800efc6:	6824      	ldr	r4, [r4, #0]
 800efc8:	6a24      	ldr	r4, [r4, #32]
 800efca:	2c00      	cmp	r4, #0
 800efcc:	bf08      	it	eq
 800efce:	462c      	moveq	r4, r5
 800efd0:	9400      	str	r4, [sp, #0]
 800efd2:	f7ff ff79 	bl	800eec8 <_strtol_l.isra.0>
 800efd6:	b003      	add	sp, #12
 800efd8:	bd30      	pop	{r4, r5, pc}
 800efda:	bf00      	nop
 800efdc:	20000044 	.word	0x20000044
 800efe0:	200000a8 	.word	0x200000a8

0800efe4 <quorem>:
 800efe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe8:	6903      	ldr	r3, [r0, #16]
 800efea:	690c      	ldr	r4, [r1, #16]
 800efec:	42a3      	cmp	r3, r4
 800efee:	4680      	mov	r8, r0
 800eff0:	f2c0 8082 	blt.w	800f0f8 <quorem+0x114>
 800eff4:	3c01      	subs	r4, #1
 800eff6:	f101 0714 	add.w	r7, r1, #20
 800effa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800effe:	f100 0614 	add.w	r6, r0, #20
 800f002:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f006:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f00a:	eb06 030c 	add.w	r3, r6, ip
 800f00e:	3501      	adds	r5, #1
 800f010:	eb07 090c 	add.w	r9, r7, ip
 800f014:	9301      	str	r3, [sp, #4]
 800f016:	fbb0 f5f5 	udiv	r5, r0, r5
 800f01a:	b395      	cbz	r5, 800f082 <quorem+0x9e>
 800f01c:	f04f 0a00 	mov.w	sl, #0
 800f020:	4638      	mov	r0, r7
 800f022:	46b6      	mov	lr, r6
 800f024:	46d3      	mov	fp, sl
 800f026:	f850 2b04 	ldr.w	r2, [r0], #4
 800f02a:	b293      	uxth	r3, r2
 800f02c:	fb05 a303 	mla	r3, r5, r3, sl
 800f030:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f034:	b29b      	uxth	r3, r3
 800f036:	ebab 0303 	sub.w	r3, fp, r3
 800f03a:	0c12      	lsrs	r2, r2, #16
 800f03c:	f8de b000 	ldr.w	fp, [lr]
 800f040:	fb05 a202 	mla	r2, r5, r2, sl
 800f044:	fa13 f38b 	uxtah	r3, r3, fp
 800f048:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f04c:	fa1f fb82 	uxth.w	fp, r2
 800f050:	f8de 2000 	ldr.w	r2, [lr]
 800f054:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f058:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f05c:	b29b      	uxth	r3, r3
 800f05e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f062:	4581      	cmp	r9, r0
 800f064:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f068:	f84e 3b04 	str.w	r3, [lr], #4
 800f06c:	d2db      	bcs.n	800f026 <quorem+0x42>
 800f06e:	f856 300c 	ldr.w	r3, [r6, ip]
 800f072:	b933      	cbnz	r3, 800f082 <quorem+0x9e>
 800f074:	9b01      	ldr	r3, [sp, #4]
 800f076:	3b04      	subs	r3, #4
 800f078:	429e      	cmp	r6, r3
 800f07a:	461a      	mov	r2, r3
 800f07c:	d330      	bcc.n	800f0e0 <quorem+0xfc>
 800f07e:	f8c8 4010 	str.w	r4, [r8, #16]
 800f082:	4640      	mov	r0, r8
 800f084:	f001 fba6 	bl	80107d4 <__mcmp>
 800f088:	2800      	cmp	r0, #0
 800f08a:	db25      	blt.n	800f0d8 <quorem+0xf4>
 800f08c:	3501      	adds	r5, #1
 800f08e:	4630      	mov	r0, r6
 800f090:	f04f 0c00 	mov.w	ip, #0
 800f094:	f857 2b04 	ldr.w	r2, [r7], #4
 800f098:	f8d0 e000 	ldr.w	lr, [r0]
 800f09c:	b293      	uxth	r3, r2
 800f09e:	ebac 0303 	sub.w	r3, ip, r3
 800f0a2:	0c12      	lsrs	r2, r2, #16
 800f0a4:	fa13 f38e 	uxtah	r3, r3, lr
 800f0a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f0ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0b6:	45b9      	cmp	r9, r7
 800f0b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f0bc:	f840 3b04 	str.w	r3, [r0], #4
 800f0c0:	d2e8      	bcs.n	800f094 <quorem+0xb0>
 800f0c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f0c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f0ca:	b92a      	cbnz	r2, 800f0d8 <quorem+0xf4>
 800f0cc:	3b04      	subs	r3, #4
 800f0ce:	429e      	cmp	r6, r3
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	d30b      	bcc.n	800f0ec <quorem+0x108>
 800f0d4:	f8c8 4010 	str.w	r4, [r8, #16]
 800f0d8:	4628      	mov	r0, r5
 800f0da:	b003      	add	sp, #12
 800f0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e0:	6812      	ldr	r2, [r2, #0]
 800f0e2:	3b04      	subs	r3, #4
 800f0e4:	2a00      	cmp	r2, #0
 800f0e6:	d1ca      	bne.n	800f07e <quorem+0x9a>
 800f0e8:	3c01      	subs	r4, #1
 800f0ea:	e7c5      	b.n	800f078 <quorem+0x94>
 800f0ec:	6812      	ldr	r2, [r2, #0]
 800f0ee:	3b04      	subs	r3, #4
 800f0f0:	2a00      	cmp	r2, #0
 800f0f2:	d1ef      	bne.n	800f0d4 <quorem+0xf0>
 800f0f4:	3c01      	subs	r4, #1
 800f0f6:	e7ea      	b.n	800f0ce <quorem+0xea>
 800f0f8:	2000      	movs	r0, #0
 800f0fa:	e7ee      	b.n	800f0da <quorem+0xf6>
 800f0fc:	0000      	movs	r0, r0
	...

0800f100 <_dtoa_r>:
 800f100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f104:	ec57 6b10 	vmov	r6, r7, d0
 800f108:	b097      	sub	sp, #92	; 0x5c
 800f10a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f10c:	9106      	str	r1, [sp, #24]
 800f10e:	4604      	mov	r4, r0
 800f110:	920b      	str	r2, [sp, #44]	; 0x2c
 800f112:	9312      	str	r3, [sp, #72]	; 0x48
 800f114:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f118:	e9cd 6700 	strd	r6, r7, [sp]
 800f11c:	b93d      	cbnz	r5, 800f12e <_dtoa_r+0x2e>
 800f11e:	2010      	movs	r0, #16
 800f120:	f001 f8e0 	bl	80102e4 <malloc>
 800f124:	6260      	str	r0, [r4, #36]	; 0x24
 800f126:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f12a:	6005      	str	r5, [r0, #0]
 800f12c:	60c5      	str	r5, [r0, #12]
 800f12e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f130:	6819      	ldr	r1, [r3, #0]
 800f132:	b151      	cbz	r1, 800f14a <_dtoa_r+0x4a>
 800f134:	685a      	ldr	r2, [r3, #4]
 800f136:	604a      	str	r2, [r1, #4]
 800f138:	2301      	movs	r3, #1
 800f13a:	4093      	lsls	r3, r2
 800f13c:	608b      	str	r3, [r1, #8]
 800f13e:	4620      	mov	r0, r4
 800f140:	f001 f929 	bl	8010396 <_Bfree>
 800f144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f146:	2200      	movs	r2, #0
 800f148:	601a      	str	r2, [r3, #0]
 800f14a:	1e3b      	subs	r3, r7, #0
 800f14c:	bfbb      	ittet	lt
 800f14e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f152:	9301      	strlt	r3, [sp, #4]
 800f154:	2300      	movge	r3, #0
 800f156:	2201      	movlt	r2, #1
 800f158:	bfac      	ite	ge
 800f15a:	f8c8 3000 	strge.w	r3, [r8]
 800f15e:	f8c8 2000 	strlt.w	r2, [r8]
 800f162:	4baf      	ldr	r3, [pc, #700]	; (800f420 <_dtoa_r+0x320>)
 800f164:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f168:	ea33 0308 	bics.w	r3, r3, r8
 800f16c:	d114      	bne.n	800f198 <_dtoa_r+0x98>
 800f16e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f170:	f242 730f 	movw	r3, #9999	; 0x270f
 800f174:	6013      	str	r3, [r2, #0]
 800f176:	9b00      	ldr	r3, [sp, #0]
 800f178:	b923      	cbnz	r3, 800f184 <_dtoa_r+0x84>
 800f17a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f17e:	2800      	cmp	r0, #0
 800f180:	f000 8542 	beq.w	800fc08 <_dtoa_r+0xb08>
 800f184:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f186:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f434 <_dtoa_r+0x334>
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	f000 8544 	beq.w	800fc18 <_dtoa_r+0xb18>
 800f190:	f10b 0303 	add.w	r3, fp, #3
 800f194:	f000 bd3e 	b.w	800fc14 <_dtoa_r+0xb14>
 800f198:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f19c:	2200      	movs	r2, #0
 800f19e:	2300      	movs	r3, #0
 800f1a0:	4630      	mov	r0, r6
 800f1a2:	4639      	mov	r1, r7
 800f1a4:	f7f1 fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1a8:	4681      	mov	r9, r0
 800f1aa:	b168      	cbz	r0, 800f1c8 <_dtoa_r+0xc8>
 800f1ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	6013      	str	r3, [r2, #0]
 800f1b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f000 8524 	beq.w	800fc02 <_dtoa_r+0xb02>
 800f1ba:	4b9a      	ldr	r3, [pc, #616]	; (800f424 <_dtoa_r+0x324>)
 800f1bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f1be:	f103 3bff 	add.w	fp, r3, #4294967295
 800f1c2:	6013      	str	r3, [r2, #0]
 800f1c4:	f000 bd28 	b.w	800fc18 <_dtoa_r+0xb18>
 800f1c8:	aa14      	add	r2, sp, #80	; 0x50
 800f1ca:	a915      	add	r1, sp, #84	; 0x54
 800f1cc:	ec47 6b10 	vmov	d0, r6, r7
 800f1d0:	4620      	mov	r0, r4
 800f1d2:	f001 fbed 	bl	80109b0 <__d2b>
 800f1d6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f1da:	9004      	str	r0, [sp, #16]
 800f1dc:	2d00      	cmp	r5, #0
 800f1de:	d07c      	beq.n	800f2da <_dtoa_r+0x1da>
 800f1e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f1e4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f1e8:	46b2      	mov	sl, r6
 800f1ea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f1ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f1f2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	4b8b      	ldr	r3, [pc, #556]	; (800f428 <_dtoa_r+0x328>)
 800f1fa:	4650      	mov	r0, sl
 800f1fc:	4659      	mov	r1, fp
 800f1fe:	f7f1 f843 	bl	8000288 <__aeabi_dsub>
 800f202:	a381      	add	r3, pc, #516	; (adr r3, 800f408 <_dtoa_r+0x308>)
 800f204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f208:	f7f1 f9f6 	bl	80005f8 <__aeabi_dmul>
 800f20c:	a380      	add	r3, pc, #512	; (adr r3, 800f410 <_dtoa_r+0x310>)
 800f20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f212:	f7f1 f83b 	bl	800028c <__adddf3>
 800f216:	4606      	mov	r6, r0
 800f218:	4628      	mov	r0, r5
 800f21a:	460f      	mov	r7, r1
 800f21c:	f7f1 f982 	bl	8000524 <__aeabi_i2d>
 800f220:	a37d      	add	r3, pc, #500	; (adr r3, 800f418 <_dtoa_r+0x318>)
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	f7f1 f9e7 	bl	80005f8 <__aeabi_dmul>
 800f22a:	4602      	mov	r2, r0
 800f22c:	460b      	mov	r3, r1
 800f22e:	4630      	mov	r0, r6
 800f230:	4639      	mov	r1, r7
 800f232:	f7f1 f82b 	bl	800028c <__adddf3>
 800f236:	4606      	mov	r6, r0
 800f238:	460f      	mov	r7, r1
 800f23a:	f7f1 fc8d 	bl	8000b58 <__aeabi_d2iz>
 800f23e:	2200      	movs	r2, #0
 800f240:	4682      	mov	sl, r0
 800f242:	2300      	movs	r3, #0
 800f244:	4630      	mov	r0, r6
 800f246:	4639      	mov	r1, r7
 800f248:	f7f1 fc48 	bl	8000adc <__aeabi_dcmplt>
 800f24c:	b148      	cbz	r0, 800f262 <_dtoa_r+0x162>
 800f24e:	4650      	mov	r0, sl
 800f250:	f7f1 f968 	bl	8000524 <__aeabi_i2d>
 800f254:	4632      	mov	r2, r6
 800f256:	463b      	mov	r3, r7
 800f258:	f7f1 fc36 	bl	8000ac8 <__aeabi_dcmpeq>
 800f25c:	b908      	cbnz	r0, 800f262 <_dtoa_r+0x162>
 800f25e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f262:	f1ba 0f16 	cmp.w	sl, #22
 800f266:	d859      	bhi.n	800f31c <_dtoa_r+0x21c>
 800f268:	4970      	ldr	r1, [pc, #448]	; (800f42c <_dtoa_r+0x32c>)
 800f26a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f26e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f272:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f276:	f7f1 fc4f 	bl	8000b18 <__aeabi_dcmpgt>
 800f27a:	2800      	cmp	r0, #0
 800f27c:	d050      	beq.n	800f320 <_dtoa_r+0x220>
 800f27e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f282:	2300      	movs	r3, #0
 800f284:	930f      	str	r3, [sp, #60]	; 0x3c
 800f286:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f288:	1b5d      	subs	r5, r3, r5
 800f28a:	f1b5 0801 	subs.w	r8, r5, #1
 800f28e:	bf49      	itett	mi
 800f290:	f1c5 0301 	rsbmi	r3, r5, #1
 800f294:	2300      	movpl	r3, #0
 800f296:	9305      	strmi	r3, [sp, #20]
 800f298:	f04f 0800 	movmi.w	r8, #0
 800f29c:	bf58      	it	pl
 800f29e:	9305      	strpl	r3, [sp, #20]
 800f2a0:	f1ba 0f00 	cmp.w	sl, #0
 800f2a4:	db3e      	blt.n	800f324 <_dtoa_r+0x224>
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	44d0      	add	r8, sl
 800f2aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f2ae:	9307      	str	r3, [sp, #28]
 800f2b0:	9b06      	ldr	r3, [sp, #24]
 800f2b2:	2b09      	cmp	r3, #9
 800f2b4:	f200 8090 	bhi.w	800f3d8 <_dtoa_r+0x2d8>
 800f2b8:	2b05      	cmp	r3, #5
 800f2ba:	bfc4      	itt	gt
 800f2bc:	3b04      	subgt	r3, #4
 800f2be:	9306      	strgt	r3, [sp, #24]
 800f2c0:	9b06      	ldr	r3, [sp, #24]
 800f2c2:	f1a3 0302 	sub.w	r3, r3, #2
 800f2c6:	bfcc      	ite	gt
 800f2c8:	2500      	movgt	r5, #0
 800f2ca:	2501      	movle	r5, #1
 800f2cc:	2b03      	cmp	r3, #3
 800f2ce:	f200 808f 	bhi.w	800f3f0 <_dtoa_r+0x2f0>
 800f2d2:	e8df f003 	tbb	[pc, r3]
 800f2d6:	7f7d      	.short	0x7f7d
 800f2d8:	7131      	.short	0x7131
 800f2da:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f2de:	441d      	add	r5, r3
 800f2e0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f2e4:	2820      	cmp	r0, #32
 800f2e6:	dd13      	ble.n	800f310 <_dtoa_r+0x210>
 800f2e8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f2ec:	9b00      	ldr	r3, [sp, #0]
 800f2ee:	fa08 f800 	lsl.w	r8, r8, r0
 800f2f2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f2f6:	fa23 f000 	lsr.w	r0, r3, r0
 800f2fa:	ea48 0000 	orr.w	r0, r8, r0
 800f2fe:	f7f1 f901 	bl	8000504 <__aeabi_ui2d>
 800f302:	2301      	movs	r3, #1
 800f304:	4682      	mov	sl, r0
 800f306:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f30a:	3d01      	subs	r5, #1
 800f30c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f30e:	e772      	b.n	800f1f6 <_dtoa_r+0xf6>
 800f310:	9b00      	ldr	r3, [sp, #0]
 800f312:	f1c0 0020 	rsb	r0, r0, #32
 800f316:	fa03 f000 	lsl.w	r0, r3, r0
 800f31a:	e7f0      	b.n	800f2fe <_dtoa_r+0x1fe>
 800f31c:	2301      	movs	r3, #1
 800f31e:	e7b1      	b.n	800f284 <_dtoa_r+0x184>
 800f320:	900f      	str	r0, [sp, #60]	; 0x3c
 800f322:	e7b0      	b.n	800f286 <_dtoa_r+0x186>
 800f324:	9b05      	ldr	r3, [sp, #20]
 800f326:	eba3 030a 	sub.w	r3, r3, sl
 800f32a:	9305      	str	r3, [sp, #20]
 800f32c:	f1ca 0300 	rsb	r3, sl, #0
 800f330:	9307      	str	r3, [sp, #28]
 800f332:	2300      	movs	r3, #0
 800f334:	930e      	str	r3, [sp, #56]	; 0x38
 800f336:	e7bb      	b.n	800f2b0 <_dtoa_r+0x1b0>
 800f338:	2301      	movs	r3, #1
 800f33a:	930a      	str	r3, [sp, #40]	; 0x28
 800f33c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f33e:	2b00      	cmp	r3, #0
 800f340:	dd59      	ble.n	800f3f6 <_dtoa_r+0x2f6>
 800f342:	9302      	str	r3, [sp, #8]
 800f344:	4699      	mov	r9, r3
 800f346:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f348:	2200      	movs	r2, #0
 800f34a:	6072      	str	r2, [r6, #4]
 800f34c:	2204      	movs	r2, #4
 800f34e:	f102 0014 	add.w	r0, r2, #20
 800f352:	4298      	cmp	r0, r3
 800f354:	6871      	ldr	r1, [r6, #4]
 800f356:	d953      	bls.n	800f400 <_dtoa_r+0x300>
 800f358:	4620      	mov	r0, r4
 800f35a:	f000 ffe8 	bl	801032e <_Balloc>
 800f35e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f360:	6030      	str	r0, [r6, #0]
 800f362:	f1b9 0f0e 	cmp.w	r9, #14
 800f366:	f8d3 b000 	ldr.w	fp, [r3]
 800f36a:	f200 80e6 	bhi.w	800f53a <_dtoa_r+0x43a>
 800f36e:	2d00      	cmp	r5, #0
 800f370:	f000 80e3 	beq.w	800f53a <_dtoa_r+0x43a>
 800f374:	ed9d 7b00 	vldr	d7, [sp]
 800f378:	f1ba 0f00 	cmp.w	sl, #0
 800f37c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f380:	dd74      	ble.n	800f46c <_dtoa_r+0x36c>
 800f382:	4a2a      	ldr	r2, [pc, #168]	; (800f42c <_dtoa_r+0x32c>)
 800f384:	f00a 030f 	and.w	r3, sl, #15
 800f388:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f38c:	ed93 7b00 	vldr	d7, [r3]
 800f390:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f394:	06f0      	lsls	r0, r6, #27
 800f396:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f39a:	d565      	bpl.n	800f468 <_dtoa_r+0x368>
 800f39c:	4b24      	ldr	r3, [pc, #144]	; (800f430 <_dtoa_r+0x330>)
 800f39e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f3a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f3a6:	f7f1 fa51 	bl	800084c <__aeabi_ddiv>
 800f3aa:	e9cd 0100 	strd	r0, r1, [sp]
 800f3ae:	f006 060f 	and.w	r6, r6, #15
 800f3b2:	2503      	movs	r5, #3
 800f3b4:	4f1e      	ldr	r7, [pc, #120]	; (800f430 <_dtoa_r+0x330>)
 800f3b6:	e04c      	b.n	800f452 <_dtoa_r+0x352>
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	930a      	str	r3, [sp, #40]	; 0x28
 800f3bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3be:	4453      	add	r3, sl
 800f3c0:	f103 0901 	add.w	r9, r3, #1
 800f3c4:	9302      	str	r3, [sp, #8]
 800f3c6:	464b      	mov	r3, r9
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	bfb8      	it	lt
 800f3cc:	2301      	movlt	r3, #1
 800f3ce:	e7ba      	b.n	800f346 <_dtoa_r+0x246>
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	e7b2      	b.n	800f33a <_dtoa_r+0x23a>
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	e7f0      	b.n	800f3ba <_dtoa_r+0x2ba>
 800f3d8:	2501      	movs	r5, #1
 800f3da:	2300      	movs	r3, #0
 800f3dc:	9306      	str	r3, [sp, #24]
 800f3de:	950a      	str	r5, [sp, #40]	; 0x28
 800f3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f3e4:	9302      	str	r3, [sp, #8]
 800f3e6:	4699      	mov	r9, r3
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	2312      	movs	r3, #18
 800f3ec:	920b      	str	r2, [sp, #44]	; 0x2c
 800f3ee:	e7aa      	b.n	800f346 <_dtoa_r+0x246>
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	930a      	str	r3, [sp, #40]	; 0x28
 800f3f4:	e7f4      	b.n	800f3e0 <_dtoa_r+0x2e0>
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	9302      	str	r3, [sp, #8]
 800f3fa:	4699      	mov	r9, r3
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	e7f5      	b.n	800f3ec <_dtoa_r+0x2ec>
 800f400:	3101      	adds	r1, #1
 800f402:	6071      	str	r1, [r6, #4]
 800f404:	0052      	lsls	r2, r2, #1
 800f406:	e7a2      	b.n	800f34e <_dtoa_r+0x24e>
 800f408:	636f4361 	.word	0x636f4361
 800f40c:	3fd287a7 	.word	0x3fd287a7
 800f410:	8b60c8b3 	.word	0x8b60c8b3
 800f414:	3fc68a28 	.word	0x3fc68a28
 800f418:	509f79fb 	.word	0x509f79fb
 800f41c:	3fd34413 	.word	0x3fd34413
 800f420:	7ff00000 	.word	0x7ff00000
 800f424:	08014341 	.word	0x08014341
 800f428:	3ff80000 	.word	0x3ff80000
 800f42c:	08014400 	.word	0x08014400
 800f430:	080143d8 	.word	0x080143d8
 800f434:	080143c9 	.word	0x080143c9
 800f438:	07f1      	lsls	r1, r6, #31
 800f43a:	d508      	bpl.n	800f44e <_dtoa_r+0x34e>
 800f43c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f440:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f444:	f7f1 f8d8 	bl	80005f8 <__aeabi_dmul>
 800f448:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f44c:	3501      	adds	r5, #1
 800f44e:	1076      	asrs	r6, r6, #1
 800f450:	3708      	adds	r7, #8
 800f452:	2e00      	cmp	r6, #0
 800f454:	d1f0      	bne.n	800f438 <_dtoa_r+0x338>
 800f456:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f45a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f45e:	f7f1 f9f5 	bl	800084c <__aeabi_ddiv>
 800f462:	e9cd 0100 	strd	r0, r1, [sp]
 800f466:	e01a      	b.n	800f49e <_dtoa_r+0x39e>
 800f468:	2502      	movs	r5, #2
 800f46a:	e7a3      	b.n	800f3b4 <_dtoa_r+0x2b4>
 800f46c:	f000 80a0 	beq.w	800f5b0 <_dtoa_r+0x4b0>
 800f470:	f1ca 0600 	rsb	r6, sl, #0
 800f474:	4b9f      	ldr	r3, [pc, #636]	; (800f6f4 <_dtoa_r+0x5f4>)
 800f476:	4fa0      	ldr	r7, [pc, #640]	; (800f6f8 <_dtoa_r+0x5f8>)
 800f478:	f006 020f 	and.w	r2, r6, #15
 800f47c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f484:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f488:	f7f1 f8b6 	bl	80005f8 <__aeabi_dmul>
 800f48c:	e9cd 0100 	strd	r0, r1, [sp]
 800f490:	1136      	asrs	r6, r6, #4
 800f492:	2300      	movs	r3, #0
 800f494:	2502      	movs	r5, #2
 800f496:	2e00      	cmp	r6, #0
 800f498:	d17f      	bne.n	800f59a <_dtoa_r+0x49a>
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d1e1      	bne.n	800f462 <_dtoa_r+0x362>
 800f49e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	f000 8087 	beq.w	800f5b4 <_dtoa_r+0x4b4>
 800f4a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	4b93      	ldr	r3, [pc, #588]	; (800f6fc <_dtoa_r+0x5fc>)
 800f4ae:	4630      	mov	r0, r6
 800f4b0:	4639      	mov	r1, r7
 800f4b2:	f7f1 fb13 	bl	8000adc <__aeabi_dcmplt>
 800f4b6:	2800      	cmp	r0, #0
 800f4b8:	d07c      	beq.n	800f5b4 <_dtoa_r+0x4b4>
 800f4ba:	f1b9 0f00 	cmp.w	r9, #0
 800f4be:	d079      	beq.n	800f5b4 <_dtoa_r+0x4b4>
 800f4c0:	9b02      	ldr	r3, [sp, #8]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	dd35      	ble.n	800f532 <_dtoa_r+0x432>
 800f4c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f4ca:	9308      	str	r3, [sp, #32]
 800f4cc:	4639      	mov	r1, r7
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	4b8b      	ldr	r3, [pc, #556]	; (800f700 <_dtoa_r+0x600>)
 800f4d2:	4630      	mov	r0, r6
 800f4d4:	f7f1 f890 	bl	80005f8 <__aeabi_dmul>
 800f4d8:	e9cd 0100 	strd	r0, r1, [sp]
 800f4dc:	9f02      	ldr	r7, [sp, #8]
 800f4de:	3501      	adds	r5, #1
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	f7f1 f81f 	bl	8000524 <__aeabi_i2d>
 800f4e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4ea:	f7f1 f885 	bl	80005f8 <__aeabi_dmul>
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	4b84      	ldr	r3, [pc, #528]	; (800f704 <_dtoa_r+0x604>)
 800f4f2:	f7f0 fecb 	bl	800028c <__adddf3>
 800f4f6:	4605      	mov	r5, r0
 800f4f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f4fc:	2f00      	cmp	r7, #0
 800f4fe:	d15d      	bne.n	800f5bc <_dtoa_r+0x4bc>
 800f500:	2200      	movs	r2, #0
 800f502:	4b81      	ldr	r3, [pc, #516]	; (800f708 <_dtoa_r+0x608>)
 800f504:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f508:	f7f0 febe 	bl	8000288 <__aeabi_dsub>
 800f50c:	462a      	mov	r2, r5
 800f50e:	4633      	mov	r3, r6
 800f510:	e9cd 0100 	strd	r0, r1, [sp]
 800f514:	f7f1 fb00 	bl	8000b18 <__aeabi_dcmpgt>
 800f518:	2800      	cmp	r0, #0
 800f51a:	f040 8288 	bne.w	800fa2e <_dtoa_r+0x92e>
 800f51e:	462a      	mov	r2, r5
 800f520:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f524:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f528:	f7f1 fad8 	bl	8000adc <__aeabi_dcmplt>
 800f52c:	2800      	cmp	r0, #0
 800f52e:	f040 827c 	bne.w	800fa2a <_dtoa_r+0x92a>
 800f532:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f536:	e9cd 2300 	strd	r2, r3, [sp]
 800f53a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	f2c0 8150 	blt.w	800f7e2 <_dtoa_r+0x6e2>
 800f542:	f1ba 0f0e 	cmp.w	sl, #14
 800f546:	f300 814c 	bgt.w	800f7e2 <_dtoa_r+0x6e2>
 800f54a:	4b6a      	ldr	r3, [pc, #424]	; (800f6f4 <_dtoa_r+0x5f4>)
 800f54c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f550:	ed93 7b00 	vldr	d7, [r3]
 800f554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f556:	2b00      	cmp	r3, #0
 800f558:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f55c:	f280 80d8 	bge.w	800f710 <_dtoa_r+0x610>
 800f560:	f1b9 0f00 	cmp.w	r9, #0
 800f564:	f300 80d4 	bgt.w	800f710 <_dtoa_r+0x610>
 800f568:	f040 825e 	bne.w	800fa28 <_dtoa_r+0x928>
 800f56c:	2200      	movs	r2, #0
 800f56e:	4b66      	ldr	r3, [pc, #408]	; (800f708 <_dtoa_r+0x608>)
 800f570:	ec51 0b17 	vmov	r0, r1, d7
 800f574:	f7f1 f840 	bl	80005f8 <__aeabi_dmul>
 800f578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f57c:	f7f1 fac2 	bl	8000b04 <__aeabi_dcmpge>
 800f580:	464f      	mov	r7, r9
 800f582:	464e      	mov	r6, r9
 800f584:	2800      	cmp	r0, #0
 800f586:	f040 8234 	bne.w	800f9f2 <_dtoa_r+0x8f2>
 800f58a:	2331      	movs	r3, #49	; 0x31
 800f58c:	f10b 0501 	add.w	r5, fp, #1
 800f590:	f88b 3000 	strb.w	r3, [fp]
 800f594:	f10a 0a01 	add.w	sl, sl, #1
 800f598:	e22f      	b.n	800f9fa <_dtoa_r+0x8fa>
 800f59a:	07f2      	lsls	r2, r6, #31
 800f59c:	d505      	bpl.n	800f5aa <_dtoa_r+0x4aa>
 800f59e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5a2:	f7f1 f829 	bl	80005f8 <__aeabi_dmul>
 800f5a6:	3501      	adds	r5, #1
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	1076      	asrs	r6, r6, #1
 800f5ac:	3708      	adds	r7, #8
 800f5ae:	e772      	b.n	800f496 <_dtoa_r+0x396>
 800f5b0:	2502      	movs	r5, #2
 800f5b2:	e774      	b.n	800f49e <_dtoa_r+0x39e>
 800f5b4:	f8cd a020 	str.w	sl, [sp, #32]
 800f5b8:	464f      	mov	r7, r9
 800f5ba:	e791      	b.n	800f4e0 <_dtoa_r+0x3e0>
 800f5bc:	4b4d      	ldr	r3, [pc, #308]	; (800f6f4 <_dtoa_r+0x5f4>)
 800f5be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f5c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d047      	beq.n	800f65c <_dtoa_r+0x55c>
 800f5cc:	4602      	mov	r2, r0
 800f5ce:	460b      	mov	r3, r1
 800f5d0:	2000      	movs	r0, #0
 800f5d2:	494e      	ldr	r1, [pc, #312]	; (800f70c <_dtoa_r+0x60c>)
 800f5d4:	f7f1 f93a 	bl	800084c <__aeabi_ddiv>
 800f5d8:	462a      	mov	r2, r5
 800f5da:	4633      	mov	r3, r6
 800f5dc:	f7f0 fe54 	bl	8000288 <__aeabi_dsub>
 800f5e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f5e4:	465d      	mov	r5, fp
 800f5e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5ea:	f7f1 fab5 	bl	8000b58 <__aeabi_d2iz>
 800f5ee:	4606      	mov	r6, r0
 800f5f0:	f7f0 ff98 	bl	8000524 <__aeabi_i2d>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5fc:	f7f0 fe44 	bl	8000288 <__aeabi_dsub>
 800f600:	3630      	adds	r6, #48	; 0x30
 800f602:	f805 6b01 	strb.w	r6, [r5], #1
 800f606:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f60a:	e9cd 0100 	strd	r0, r1, [sp]
 800f60e:	f7f1 fa65 	bl	8000adc <__aeabi_dcmplt>
 800f612:	2800      	cmp	r0, #0
 800f614:	d163      	bne.n	800f6de <_dtoa_r+0x5de>
 800f616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f61a:	2000      	movs	r0, #0
 800f61c:	4937      	ldr	r1, [pc, #220]	; (800f6fc <_dtoa_r+0x5fc>)
 800f61e:	f7f0 fe33 	bl	8000288 <__aeabi_dsub>
 800f622:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f626:	f7f1 fa59 	bl	8000adc <__aeabi_dcmplt>
 800f62a:	2800      	cmp	r0, #0
 800f62c:	f040 80b7 	bne.w	800f79e <_dtoa_r+0x69e>
 800f630:	eba5 030b 	sub.w	r3, r5, fp
 800f634:	429f      	cmp	r7, r3
 800f636:	f77f af7c 	ble.w	800f532 <_dtoa_r+0x432>
 800f63a:	2200      	movs	r2, #0
 800f63c:	4b30      	ldr	r3, [pc, #192]	; (800f700 <_dtoa_r+0x600>)
 800f63e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f642:	f7f0 ffd9 	bl	80005f8 <__aeabi_dmul>
 800f646:	2200      	movs	r2, #0
 800f648:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f64c:	4b2c      	ldr	r3, [pc, #176]	; (800f700 <_dtoa_r+0x600>)
 800f64e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f652:	f7f0 ffd1 	bl	80005f8 <__aeabi_dmul>
 800f656:	e9cd 0100 	strd	r0, r1, [sp]
 800f65a:	e7c4      	b.n	800f5e6 <_dtoa_r+0x4e6>
 800f65c:	462a      	mov	r2, r5
 800f65e:	4633      	mov	r3, r6
 800f660:	f7f0 ffca 	bl	80005f8 <__aeabi_dmul>
 800f664:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f668:	eb0b 0507 	add.w	r5, fp, r7
 800f66c:	465e      	mov	r6, fp
 800f66e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f672:	f7f1 fa71 	bl	8000b58 <__aeabi_d2iz>
 800f676:	4607      	mov	r7, r0
 800f678:	f7f0 ff54 	bl	8000524 <__aeabi_i2d>
 800f67c:	3730      	adds	r7, #48	; 0x30
 800f67e:	4602      	mov	r2, r0
 800f680:	460b      	mov	r3, r1
 800f682:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f686:	f7f0 fdff 	bl	8000288 <__aeabi_dsub>
 800f68a:	f806 7b01 	strb.w	r7, [r6], #1
 800f68e:	42ae      	cmp	r6, r5
 800f690:	e9cd 0100 	strd	r0, r1, [sp]
 800f694:	f04f 0200 	mov.w	r2, #0
 800f698:	d126      	bne.n	800f6e8 <_dtoa_r+0x5e8>
 800f69a:	4b1c      	ldr	r3, [pc, #112]	; (800f70c <_dtoa_r+0x60c>)
 800f69c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f6a0:	f7f0 fdf4 	bl	800028c <__adddf3>
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6ac:	f7f1 fa34 	bl	8000b18 <__aeabi_dcmpgt>
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	d174      	bne.n	800f79e <_dtoa_r+0x69e>
 800f6b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f6b8:	2000      	movs	r0, #0
 800f6ba:	4914      	ldr	r1, [pc, #80]	; (800f70c <_dtoa_r+0x60c>)
 800f6bc:	f7f0 fde4 	bl	8000288 <__aeabi_dsub>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6c8:	f7f1 fa08 	bl	8000adc <__aeabi_dcmplt>
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	f43f af30 	beq.w	800f532 <_dtoa_r+0x432>
 800f6d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f6d6:	2b30      	cmp	r3, #48	; 0x30
 800f6d8:	f105 32ff 	add.w	r2, r5, #4294967295
 800f6dc:	d002      	beq.n	800f6e4 <_dtoa_r+0x5e4>
 800f6de:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f6e2:	e04a      	b.n	800f77a <_dtoa_r+0x67a>
 800f6e4:	4615      	mov	r5, r2
 800f6e6:	e7f4      	b.n	800f6d2 <_dtoa_r+0x5d2>
 800f6e8:	4b05      	ldr	r3, [pc, #20]	; (800f700 <_dtoa_r+0x600>)
 800f6ea:	f7f0 ff85 	bl	80005f8 <__aeabi_dmul>
 800f6ee:	e9cd 0100 	strd	r0, r1, [sp]
 800f6f2:	e7bc      	b.n	800f66e <_dtoa_r+0x56e>
 800f6f4:	08014400 	.word	0x08014400
 800f6f8:	080143d8 	.word	0x080143d8
 800f6fc:	3ff00000 	.word	0x3ff00000
 800f700:	40240000 	.word	0x40240000
 800f704:	401c0000 	.word	0x401c0000
 800f708:	40140000 	.word	0x40140000
 800f70c:	3fe00000 	.word	0x3fe00000
 800f710:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f714:	465d      	mov	r5, fp
 800f716:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f71a:	4630      	mov	r0, r6
 800f71c:	4639      	mov	r1, r7
 800f71e:	f7f1 f895 	bl	800084c <__aeabi_ddiv>
 800f722:	f7f1 fa19 	bl	8000b58 <__aeabi_d2iz>
 800f726:	4680      	mov	r8, r0
 800f728:	f7f0 fefc 	bl	8000524 <__aeabi_i2d>
 800f72c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f730:	f7f0 ff62 	bl	80005f8 <__aeabi_dmul>
 800f734:	4602      	mov	r2, r0
 800f736:	460b      	mov	r3, r1
 800f738:	4630      	mov	r0, r6
 800f73a:	4639      	mov	r1, r7
 800f73c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f740:	f7f0 fda2 	bl	8000288 <__aeabi_dsub>
 800f744:	f805 6b01 	strb.w	r6, [r5], #1
 800f748:	eba5 060b 	sub.w	r6, r5, fp
 800f74c:	45b1      	cmp	r9, r6
 800f74e:	4602      	mov	r2, r0
 800f750:	460b      	mov	r3, r1
 800f752:	d139      	bne.n	800f7c8 <_dtoa_r+0x6c8>
 800f754:	f7f0 fd9a 	bl	800028c <__adddf3>
 800f758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f75c:	4606      	mov	r6, r0
 800f75e:	460f      	mov	r7, r1
 800f760:	f7f1 f9da 	bl	8000b18 <__aeabi_dcmpgt>
 800f764:	b9c8      	cbnz	r0, 800f79a <_dtoa_r+0x69a>
 800f766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f76a:	4630      	mov	r0, r6
 800f76c:	4639      	mov	r1, r7
 800f76e:	f7f1 f9ab 	bl	8000ac8 <__aeabi_dcmpeq>
 800f772:	b110      	cbz	r0, 800f77a <_dtoa_r+0x67a>
 800f774:	f018 0f01 	tst.w	r8, #1
 800f778:	d10f      	bne.n	800f79a <_dtoa_r+0x69a>
 800f77a:	9904      	ldr	r1, [sp, #16]
 800f77c:	4620      	mov	r0, r4
 800f77e:	f000 fe0a 	bl	8010396 <_Bfree>
 800f782:	2300      	movs	r3, #0
 800f784:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f786:	702b      	strb	r3, [r5, #0]
 800f788:	f10a 0301 	add.w	r3, sl, #1
 800f78c:	6013      	str	r3, [r2, #0]
 800f78e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f790:	2b00      	cmp	r3, #0
 800f792:	f000 8241 	beq.w	800fc18 <_dtoa_r+0xb18>
 800f796:	601d      	str	r5, [r3, #0]
 800f798:	e23e      	b.n	800fc18 <_dtoa_r+0xb18>
 800f79a:	f8cd a020 	str.w	sl, [sp, #32]
 800f79e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f7a2:	2a39      	cmp	r2, #57	; 0x39
 800f7a4:	f105 33ff 	add.w	r3, r5, #4294967295
 800f7a8:	d108      	bne.n	800f7bc <_dtoa_r+0x6bc>
 800f7aa:	459b      	cmp	fp, r3
 800f7ac:	d10a      	bne.n	800f7c4 <_dtoa_r+0x6c4>
 800f7ae:	9b08      	ldr	r3, [sp, #32]
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	9308      	str	r3, [sp, #32]
 800f7b4:	2330      	movs	r3, #48	; 0x30
 800f7b6:	f88b 3000 	strb.w	r3, [fp]
 800f7ba:	465b      	mov	r3, fp
 800f7bc:	781a      	ldrb	r2, [r3, #0]
 800f7be:	3201      	adds	r2, #1
 800f7c0:	701a      	strb	r2, [r3, #0]
 800f7c2:	e78c      	b.n	800f6de <_dtoa_r+0x5de>
 800f7c4:	461d      	mov	r5, r3
 800f7c6:	e7ea      	b.n	800f79e <_dtoa_r+0x69e>
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	4b9b      	ldr	r3, [pc, #620]	; (800fa38 <_dtoa_r+0x938>)
 800f7cc:	f7f0 ff14 	bl	80005f8 <__aeabi_dmul>
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	4606      	mov	r6, r0
 800f7d6:	460f      	mov	r7, r1
 800f7d8:	f7f1 f976 	bl	8000ac8 <__aeabi_dcmpeq>
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	d09a      	beq.n	800f716 <_dtoa_r+0x616>
 800f7e0:	e7cb      	b.n	800f77a <_dtoa_r+0x67a>
 800f7e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7e4:	2a00      	cmp	r2, #0
 800f7e6:	f000 808b 	beq.w	800f900 <_dtoa_r+0x800>
 800f7ea:	9a06      	ldr	r2, [sp, #24]
 800f7ec:	2a01      	cmp	r2, #1
 800f7ee:	dc6e      	bgt.n	800f8ce <_dtoa_r+0x7ce>
 800f7f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f7f2:	2a00      	cmp	r2, #0
 800f7f4:	d067      	beq.n	800f8c6 <_dtoa_r+0x7c6>
 800f7f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f7fa:	9f07      	ldr	r7, [sp, #28]
 800f7fc:	9d05      	ldr	r5, [sp, #20]
 800f7fe:	9a05      	ldr	r2, [sp, #20]
 800f800:	2101      	movs	r1, #1
 800f802:	441a      	add	r2, r3
 800f804:	4620      	mov	r0, r4
 800f806:	9205      	str	r2, [sp, #20]
 800f808:	4498      	add	r8, r3
 800f80a:	f000 fea2 	bl	8010552 <__i2b>
 800f80e:	4606      	mov	r6, r0
 800f810:	2d00      	cmp	r5, #0
 800f812:	dd0c      	ble.n	800f82e <_dtoa_r+0x72e>
 800f814:	f1b8 0f00 	cmp.w	r8, #0
 800f818:	dd09      	ble.n	800f82e <_dtoa_r+0x72e>
 800f81a:	4545      	cmp	r5, r8
 800f81c:	9a05      	ldr	r2, [sp, #20]
 800f81e:	462b      	mov	r3, r5
 800f820:	bfa8      	it	ge
 800f822:	4643      	movge	r3, r8
 800f824:	1ad2      	subs	r2, r2, r3
 800f826:	9205      	str	r2, [sp, #20]
 800f828:	1aed      	subs	r5, r5, r3
 800f82a:	eba8 0803 	sub.w	r8, r8, r3
 800f82e:	9b07      	ldr	r3, [sp, #28]
 800f830:	b1eb      	cbz	r3, 800f86e <_dtoa_r+0x76e>
 800f832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f834:	2b00      	cmp	r3, #0
 800f836:	d067      	beq.n	800f908 <_dtoa_r+0x808>
 800f838:	b18f      	cbz	r7, 800f85e <_dtoa_r+0x75e>
 800f83a:	4631      	mov	r1, r6
 800f83c:	463a      	mov	r2, r7
 800f83e:	4620      	mov	r0, r4
 800f840:	f000 ff26 	bl	8010690 <__pow5mult>
 800f844:	9a04      	ldr	r2, [sp, #16]
 800f846:	4601      	mov	r1, r0
 800f848:	4606      	mov	r6, r0
 800f84a:	4620      	mov	r0, r4
 800f84c:	f000 fe8a 	bl	8010564 <__multiply>
 800f850:	9904      	ldr	r1, [sp, #16]
 800f852:	9008      	str	r0, [sp, #32]
 800f854:	4620      	mov	r0, r4
 800f856:	f000 fd9e 	bl	8010396 <_Bfree>
 800f85a:	9b08      	ldr	r3, [sp, #32]
 800f85c:	9304      	str	r3, [sp, #16]
 800f85e:	9b07      	ldr	r3, [sp, #28]
 800f860:	1bda      	subs	r2, r3, r7
 800f862:	d004      	beq.n	800f86e <_dtoa_r+0x76e>
 800f864:	9904      	ldr	r1, [sp, #16]
 800f866:	4620      	mov	r0, r4
 800f868:	f000 ff12 	bl	8010690 <__pow5mult>
 800f86c:	9004      	str	r0, [sp, #16]
 800f86e:	2101      	movs	r1, #1
 800f870:	4620      	mov	r0, r4
 800f872:	f000 fe6e 	bl	8010552 <__i2b>
 800f876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f878:	4607      	mov	r7, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	f000 81d0 	beq.w	800fc20 <_dtoa_r+0xb20>
 800f880:	461a      	mov	r2, r3
 800f882:	4601      	mov	r1, r0
 800f884:	4620      	mov	r0, r4
 800f886:	f000 ff03 	bl	8010690 <__pow5mult>
 800f88a:	9b06      	ldr	r3, [sp, #24]
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	4607      	mov	r7, r0
 800f890:	dc40      	bgt.n	800f914 <_dtoa_r+0x814>
 800f892:	9b00      	ldr	r3, [sp, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d139      	bne.n	800f90c <_dtoa_r+0x80c>
 800f898:	9b01      	ldr	r3, [sp, #4]
 800f89a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d136      	bne.n	800f910 <_dtoa_r+0x810>
 800f8a2:	9b01      	ldr	r3, [sp, #4]
 800f8a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f8a8:	0d1b      	lsrs	r3, r3, #20
 800f8aa:	051b      	lsls	r3, r3, #20
 800f8ac:	b12b      	cbz	r3, 800f8ba <_dtoa_r+0x7ba>
 800f8ae:	9b05      	ldr	r3, [sp, #20]
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	9305      	str	r3, [sp, #20]
 800f8b4:	f108 0801 	add.w	r8, r8, #1
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	9307      	str	r3, [sp, #28]
 800f8bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d12a      	bne.n	800f918 <_dtoa_r+0x818>
 800f8c2:	2001      	movs	r0, #1
 800f8c4:	e030      	b.n	800f928 <_dtoa_r+0x828>
 800f8c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f8c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f8cc:	e795      	b.n	800f7fa <_dtoa_r+0x6fa>
 800f8ce:	9b07      	ldr	r3, [sp, #28]
 800f8d0:	f109 37ff 	add.w	r7, r9, #4294967295
 800f8d4:	42bb      	cmp	r3, r7
 800f8d6:	bfbf      	itttt	lt
 800f8d8:	9b07      	ldrlt	r3, [sp, #28]
 800f8da:	9707      	strlt	r7, [sp, #28]
 800f8dc:	1afa      	sublt	r2, r7, r3
 800f8de:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f8e0:	bfbb      	ittet	lt
 800f8e2:	189b      	addlt	r3, r3, r2
 800f8e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f8e6:	1bdf      	subge	r7, r3, r7
 800f8e8:	2700      	movlt	r7, #0
 800f8ea:	f1b9 0f00 	cmp.w	r9, #0
 800f8ee:	bfb5      	itete	lt
 800f8f0:	9b05      	ldrlt	r3, [sp, #20]
 800f8f2:	9d05      	ldrge	r5, [sp, #20]
 800f8f4:	eba3 0509 	sublt.w	r5, r3, r9
 800f8f8:	464b      	movge	r3, r9
 800f8fa:	bfb8      	it	lt
 800f8fc:	2300      	movlt	r3, #0
 800f8fe:	e77e      	b.n	800f7fe <_dtoa_r+0x6fe>
 800f900:	9f07      	ldr	r7, [sp, #28]
 800f902:	9d05      	ldr	r5, [sp, #20]
 800f904:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f906:	e783      	b.n	800f810 <_dtoa_r+0x710>
 800f908:	9a07      	ldr	r2, [sp, #28]
 800f90a:	e7ab      	b.n	800f864 <_dtoa_r+0x764>
 800f90c:	2300      	movs	r3, #0
 800f90e:	e7d4      	b.n	800f8ba <_dtoa_r+0x7ba>
 800f910:	9b00      	ldr	r3, [sp, #0]
 800f912:	e7d2      	b.n	800f8ba <_dtoa_r+0x7ba>
 800f914:	2300      	movs	r3, #0
 800f916:	9307      	str	r3, [sp, #28]
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f91e:	6918      	ldr	r0, [r3, #16]
 800f920:	f000 fdc9 	bl	80104b6 <__hi0bits>
 800f924:	f1c0 0020 	rsb	r0, r0, #32
 800f928:	4440      	add	r0, r8
 800f92a:	f010 001f 	ands.w	r0, r0, #31
 800f92e:	d047      	beq.n	800f9c0 <_dtoa_r+0x8c0>
 800f930:	f1c0 0320 	rsb	r3, r0, #32
 800f934:	2b04      	cmp	r3, #4
 800f936:	dd3b      	ble.n	800f9b0 <_dtoa_r+0x8b0>
 800f938:	9b05      	ldr	r3, [sp, #20]
 800f93a:	f1c0 001c 	rsb	r0, r0, #28
 800f93e:	4403      	add	r3, r0
 800f940:	9305      	str	r3, [sp, #20]
 800f942:	4405      	add	r5, r0
 800f944:	4480      	add	r8, r0
 800f946:	9b05      	ldr	r3, [sp, #20]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	dd05      	ble.n	800f958 <_dtoa_r+0x858>
 800f94c:	461a      	mov	r2, r3
 800f94e:	9904      	ldr	r1, [sp, #16]
 800f950:	4620      	mov	r0, r4
 800f952:	f000 feeb 	bl	801072c <__lshift>
 800f956:	9004      	str	r0, [sp, #16]
 800f958:	f1b8 0f00 	cmp.w	r8, #0
 800f95c:	dd05      	ble.n	800f96a <_dtoa_r+0x86a>
 800f95e:	4639      	mov	r1, r7
 800f960:	4642      	mov	r2, r8
 800f962:	4620      	mov	r0, r4
 800f964:	f000 fee2 	bl	801072c <__lshift>
 800f968:	4607      	mov	r7, r0
 800f96a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f96c:	b353      	cbz	r3, 800f9c4 <_dtoa_r+0x8c4>
 800f96e:	4639      	mov	r1, r7
 800f970:	9804      	ldr	r0, [sp, #16]
 800f972:	f000 ff2f 	bl	80107d4 <__mcmp>
 800f976:	2800      	cmp	r0, #0
 800f978:	da24      	bge.n	800f9c4 <_dtoa_r+0x8c4>
 800f97a:	2300      	movs	r3, #0
 800f97c:	220a      	movs	r2, #10
 800f97e:	9904      	ldr	r1, [sp, #16]
 800f980:	4620      	mov	r0, r4
 800f982:	f000 fd1f 	bl	80103c4 <__multadd>
 800f986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f988:	9004      	str	r0, [sp, #16]
 800f98a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f000 814d 	beq.w	800fc2e <_dtoa_r+0xb2e>
 800f994:	2300      	movs	r3, #0
 800f996:	4631      	mov	r1, r6
 800f998:	220a      	movs	r2, #10
 800f99a:	4620      	mov	r0, r4
 800f99c:	f000 fd12 	bl	80103c4 <__multadd>
 800f9a0:	9b02      	ldr	r3, [sp, #8]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	4606      	mov	r6, r0
 800f9a6:	dc4f      	bgt.n	800fa48 <_dtoa_r+0x948>
 800f9a8:	9b06      	ldr	r3, [sp, #24]
 800f9aa:	2b02      	cmp	r3, #2
 800f9ac:	dd4c      	ble.n	800fa48 <_dtoa_r+0x948>
 800f9ae:	e011      	b.n	800f9d4 <_dtoa_r+0x8d4>
 800f9b0:	d0c9      	beq.n	800f946 <_dtoa_r+0x846>
 800f9b2:	9a05      	ldr	r2, [sp, #20]
 800f9b4:	331c      	adds	r3, #28
 800f9b6:	441a      	add	r2, r3
 800f9b8:	9205      	str	r2, [sp, #20]
 800f9ba:	441d      	add	r5, r3
 800f9bc:	4498      	add	r8, r3
 800f9be:	e7c2      	b.n	800f946 <_dtoa_r+0x846>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	e7f6      	b.n	800f9b2 <_dtoa_r+0x8b2>
 800f9c4:	f1b9 0f00 	cmp.w	r9, #0
 800f9c8:	dc38      	bgt.n	800fa3c <_dtoa_r+0x93c>
 800f9ca:	9b06      	ldr	r3, [sp, #24]
 800f9cc:	2b02      	cmp	r3, #2
 800f9ce:	dd35      	ble.n	800fa3c <_dtoa_r+0x93c>
 800f9d0:	f8cd 9008 	str.w	r9, [sp, #8]
 800f9d4:	9b02      	ldr	r3, [sp, #8]
 800f9d6:	b963      	cbnz	r3, 800f9f2 <_dtoa_r+0x8f2>
 800f9d8:	4639      	mov	r1, r7
 800f9da:	2205      	movs	r2, #5
 800f9dc:	4620      	mov	r0, r4
 800f9de:	f000 fcf1 	bl	80103c4 <__multadd>
 800f9e2:	4601      	mov	r1, r0
 800f9e4:	4607      	mov	r7, r0
 800f9e6:	9804      	ldr	r0, [sp, #16]
 800f9e8:	f000 fef4 	bl	80107d4 <__mcmp>
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	f73f adcc 	bgt.w	800f58a <_dtoa_r+0x48a>
 800f9f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9f4:	465d      	mov	r5, fp
 800f9f6:	ea6f 0a03 	mvn.w	sl, r3
 800f9fa:	f04f 0900 	mov.w	r9, #0
 800f9fe:	4639      	mov	r1, r7
 800fa00:	4620      	mov	r0, r4
 800fa02:	f000 fcc8 	bl	8010396 <_Bfree>
 800fa06:	2e00      	cmp	r6, #0
 800fa08:	f43f aeb7 	beq.w	800f77a <_dtoa_r+0x67a>
 800fa0c:	f1b9 0f00 	cmp.w	r9, #0
 800fa10:	d005      	beq.n	800fa1e <_dtoa_r+0x91e>
 800fa12:	45b1      	cmp	r9, r6
 800fa14:	d003      	beq.n	800fa1e <_dtoa_r+0x91e>
 800fa16:	4649      	mov	r1, r9
 800fa18:	4620      	mov	r0, r4
 800fa1a:	f000 fcbc 	bl	8010396 <_Bfree>
 800fa1e:	4631      	mov	r1, r6
 800fa20:	4620      	mov	r0, r4
 800fa22:	f000 fcb8 	bl	8010396 <_Bfree>
 800fa26:	e6a8      	b.n	800f77a <_dtoa_r+0x67a>
 800fa28:	2700      	movs	r7, #0
 800fa2a:	463e      	mov	r6, r7
 800fa2c:	e7e1      	b.n	800f9f2 <_dtoa_r+0x8f2>
 800fa2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fa32:	463e      	mov	r6, r7
 800fa34:	e5a9      	b.n	800f58a <_dtoa_r+0x48a>
 800fa36:	bf00      	nop
 800fa38:	40240000 	.word	0x40240000
 800fa3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa3e:	f8cd 9008 	str.w	r9, [sp, #8]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	f000 80fa 	beq.w	800fc3c <_dtoa_r+0xb3c>
 800fa48:	2d00      	cmp	r5, #0
 800fa4a:	dd05      	ble.n	800fa58 <_dtoa_r+0x958>
 800fa4c:	4631      	mov	r1, r6
 800fa4e:	462a      	mov	r2, r5
 800fa50:	4620      	mov	r0, r4
 800fa52:	f000 fe6b 	bl	801072c <__lshift>
 800fa56:	4606      	mov	r6, r0
 800fa58:	9b07      	ldr	r3, [sp, #28]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d04c      	beq.n	800faf8 <_dtoa_r+0x9f8>
 800fa5e:	6871      	ldr	r1, [r6, #4]
 800fa60:	4620      	mov	r0, r4
 800fa62:	f000 fc64 	bl	801032e <_Balloc>
 800fa66:	6932      	ldr	r2, [r6, #16]
 800fa68:	3202      	adds	r2, #2
 800fa6a:	4605      	mov	r5, r0
 800fa6c:	0092      	lsls	r2, r2, #2
 800fa6e:	f106 010c 	add.w	r1, r6, #12
 800fa72:	300c      	adds	r0, #12
 800fa74:	f000 fc50 	bl	8010318 <memcpy>
 800fa78:	2201      	movs	r2, #1
 800fa7a:	4629      	mov	r1, r5
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	f000 fe55 	bl	801072c <__lshift>
 800fa82:	9b00      	ldr	r3, [sp, #0]
 800fa84:	f8cd b014 	str.w	fp, [sp, #20]
 800fa88:	f003 0301 	and.w	r3, r3, #1
 800fa8c:	46b1      	mov	r9, r6
 800fa8e:	9307      	str	r3, [sp, #28]
 800fa90:	4606      	mov	r6, r0
 800fa92:	4639      	mov	r1, r7
 800fa94:	9804      	ldr	r0, [sp, #16]
 800fa96:	f7ff faa5 	bl	800efe4 <quorem>
 800fa9a:	4649      	mov	r1, r9
 800fa9c:	4605      	mov	r5, r0
 800fa9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800faa2:	9804      	ldr	r0, [sp, #16]
 800faa4:	f000 fe96 	bl	80107d4 <__mcmp>
 800faa8:	4632      	mov	r2, r6
 800faaa:	9000      	str	r0, [sp, #0]
 800faac:	4639      	mov	r1, r7
 800faae:	4620      	mov	r0, r4
 800fab0:	f000 feaa 	bl	8010808 <__mdiff>
 800fab4:	68c3      	ldr	r3, [r0, #12]
 800fab6:	4602      	mov	r2, r0
 800fab8:	bb03      	cbnz	r3, 800fafc <_dtoa_r+0x9fc>
 800faba:	4601      	mov	r1, r0
 800fabc:	9008      	str	r0, [sp, #32]
 800fabe:	9804      	ldr	r0, [sp, #16]
 800fac0:	f000 fe88 	bl	80107d4 <__mcmp>
 800fac4:	9a08      	ldr	r2, [sp, #32]
 800fac6:	4603      	mov	r3, r0
 800fac8:	4611      	mov	r1, r2
 800faca:	4620      	mov	r0, r4
 800facc:	9308      	str	r3, [sp, #32]
 800face:	f000 fc62 	bl	8010396 <_Bfree>
 800fad2:	9b08      	ldr	r3, [sp, #32]
 800fad4:	b9a3      	cbnz	r3, 800fb00 <_dtoa_r+0xa00>
 800fad6:	9a06      	ldr	r2, [sp, #24]
 800fad8:	b992      	cbnz	r2, 800fb00 <_dtoa_r+0xa00>
 800fada:	9a07      	ldr	r2, [sp, #28]
 800fadc:	b982      	cbnz	r2, 800fb00 <_dtoa_r+0xa00>
 800fade:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fae2:	d029      	beq.n	800fb38 <_dtoa_r+0xa38>
 800fae4:	9b00      	ldr	r3, [sp, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	dd01      	ble.n	800faee <_dtoa_r+0x9ee>
 800faea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800faee:	9b05      	ldr	r3, [sp, #20]
 800faf0:	1c5d      	adds	r5, r3, #1
 800faf2:	f883 8000 	strb.w	r8, [r3]
 800faf6:	e782      	b.n	800f9fe <_dtoa_r+0x8fe>
 800faf8:	4630      	mov	r0, r6
 800fafa:	e7c2      	b.n	800fa82 <_dtoa_r+0x982>
 800fafc:	2301      	movs	r3, #1
 800fafe:	e7e3      	b.n	800fac8 <_dtoa_r+0x9c8>
 800fb00:	9a00      	ldr	r2, [sp, #0]
 800fb02:	2a00      	cmp	r2, #0
 800fb04:	db04      	blt.n	800fb10 <_dtoa_r+0xa10>
 800fb06:	d125      	bne.n	800fb54 <_dtoa_r+0xa54>
 800fb08:	9a06      	ldr	r2, [sp, #24]
 800fb0a:	bb1a      	cbnz	r2, 800fb54 <_dtoa_r+0xa54>
 800fb0c:	9a07      	ldr	r2, [sp, #28]
 800fb0e:	bb0a      	cbnz	r2, 800fb54 <_dtoa_r+0xa54>
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	ddec      	ble.n	800faee <_dtoa_r+0x9ee>
 800fb14:	2201      	movs	r2, #1
 800fb16:	9904      	ldr	r1, [sp, #16]
 800fb18:	4620      	mov	r0, r4
 800fb1a:	f000 fe07 	bl	801072c <__lshift>
 800fb1e:	4639      	mov	r1, r7
 800fb20:	9004      	str	r0, [sp, #16]
 800fb22:	f000 fe57 	bl	80107d4 <__mcmp>
 800fb26:	2800      	cmp	r0, #0
 800fb28:	dc03      	bgt.n	800fb32 <_dtoa_r+0xa32>
 800fb2a:	d1e0      	bne.n	800faee <_dtoa_r+0x9ee>
 800fb2c:	f018 0f01 	tst.w	r8, #1
 800fb30:	d0dd      	beq.n	800faee <_dtoa_r+0x9ee>
 800fb32:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fb36:	d1d8      	bne.n	800faea <_dtoa_r+0x9ea>
 800fb38:	9b05      	ldr	r3, [sp, #20]
 800fb3a:	9a05      	ldr	r2, [sp, #20]
 800fb3c:	1c5d      	adds	r5, r3, #1
 800fb3e:	2339      	movs	r3, #57	; 0x39
 800fb40:	7013      	strb	r3, [r2, #0]
 800fb42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fb46:	2b39      	cmp	r3, #57	; 0x39
 800fb48:	f105 32ff 	add.w	r2, r5, #4294967295
 800fb4c:	d04f      	beq.n	800fbee <_dtoa_r+0xaee>
 800fb4e:	3301      	adds	r3, #1
 800fb50:	7013      	strb	r3, [r2, #0]
 800fb52:	e754      	b.n	800f9fe <_dtoa_r+0x8fe>
 800fb54:	9a05      	ldr	r2, [sp, #20]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	f102 0501 	add.w	r5, r2, #1
 800fb5c:	dd06      	ble.n	800fb6c <_dtoa_r+0xa6c>
 800fb5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fb62:	d0e9      	beq.n	800fb38 <_dtoa_r+0xa38>
 800fb64:	f108 0801 	add.w	r8, r8, #1
 800fb68:	9b05      	ldr	r3, [sp, #20]
 800fb6a:	e7c2      	b.n	800faf2 <_dtoa_r+0x9f2>
 800fb6c:	9a02      	ldr	r2, [sp, #8]
 800fb6e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800fb72:	eba5 030b 	sub.w	r3, r5, fp
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d021      	beq.n	800fbbe <_dtoa_r+0xabe>
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	220a      	movs	r2, #10
 800fb7e:	9904      	ldr	r1, [sp, #16]
 800fb80:	4620      	mov	r0, r4
 800fb82:	f000 fc1f 	bl	80103c4 <__multadd>
 800fb86:	45b1      	cmp	r9, r6
 800fb88:	9004      	str	r0, [sp, #16]
 800fb8a:	f04f 0300 	mov.w	r3, #0
 800fb8e:	f04f 020a 	mov.w	r2, #10
 800fb92:	4649      	mov	r1, r9
 800fb94:	4620      	mov	r0, r4
 800fb96:	d105      	bne.n	800fba4 <_dtoa_r+0xaa4>
 800fb98:	f000 fc14 	bl	80103c4 <__multadd>
 800fb9c:	4681      	mov	r9, r0
 800fb9e:	4606      	mov	r6, r0
 800fba0:	9505      	str	r5, [sp, #20]
 800fba2:	e776      	b.n	800fa92 <_dtoa_r+0x992>
 800fba4:	f000 fc0e 	bl	80103c4 <__multadd>
 800fba8:	4631      	mov	r1, r6
 800fbaa:	4681      	mov	r9, r0
 800fbac:	2300      	movs	r3, #0
 800fbae:	220a      	movs	r2, #10
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	f000 fc07 	bl	80103c4 <__multadd>
 800fbb6:	4606      	mov	r6, r0
 800fbb8:	e7f2      	b.n	800fba0 <_dtoa_r+0xaa0>
 800fbba:	f04f 0900 	mov.w	r9, #0
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	9904      	ldr	r1, [sp, #16]
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f000 fdb2 	bl	801072c <__lshift>
 800fbc8:	4639      	mov	r1, r7
 800fbca:	9004      	str	r0, [sp, #16]
 800fbcc:	f000 fe02 	bl	80107d4 <__mcmp>
 800fbd0:	2800      	cmp	r0, #0
 800fbd2:	dcb6      	bgt.n	800fb42 <_dtoa_r+0xa42>
 800fbd4:	d102      	bne.n	800fbdc <_dtoa_r+0xadc>
 800fbd6:	f018 0f01 	tst.w	r8, #1
 800fbda:	d1b2      	bne.n	800fb42 <_dtoa_r+0xa42>
 800fbdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fbe0:	2b30      	cmp	r3, #48	; 0x30
 800fbe2:	f105 32ff 	add.w	r2, r5, #4294967295
 800fbe6:	f47f af0a 	bne.w	800f9fe <_dtoa_r+0x8fe>
 800fbea:	4615      	mov	r5, r2
 800fbec:	e7f6      	b.n	800fbdc <_dtoa_r+0xadc>
 800fbee:	4593      	cmp	fp, r2
 800fbf0:	d105      	bne.n	800fbfe <_dtoa_r+0xafe>
 800fbf2:	2331      	movs	r3, #49	; 0x31
 800fbf4:	f10a 0a01 	add.w	sl, sl, #1
 800fbf8:	f88b 3000 	strb.w	r3, [fp]
 800fbfc:	e6ff      	b.n	800f9fe <_dtoa_r+0x8fe>
 800fbfe:	4615      	mov	r5, r2
 800fc00:	e79f      	b.n	800fb42 <_dtoa_r+0xa42>
 800fc02:	f8df b064 	ldr.w	fp, [pc, #100]	; 800fc68 <_dtoa_r+0xb68>
 800fc06:	e007      	b.n	800fc18 <_dtoa_r+0xb18>
 800fc08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc0a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800fc6c <_dtoa_r+0xb6c>
 800fc0e:	b11b      	cbz	r3, 800fc18 <_dtoa_r+0xb18>
 800fc10:	f10b 0308 	add.w	r3, fp, #8
 800fc14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fc16:	6013      	str	r3, [r2, #0]
 800fc18:	4658      	mov	r0, fp
 800fc1a:	b017      	add	sp, #92	; 0x5c
 800fc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc20:	9b06      	ldr	r3, [sp, #24]
 800fc22:	2b01      	cmp	r3, #1
 800fc24:	f77f ae35 	ble.w	800f892 <_dtoa_r+0x792>
 800fc28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc2a:	9307      	str	r3, [sp, #28]
 800fc2c:	e649      	b.n	800f8c2 <_dtoa_r+0x7c2>
 800fc2e:	9b02      	ldr	r3, [sp, #8]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	dc03      	bgt.n	800fc3c <_dtoa_r+0xb3c>
 800fc34:	9b06      	ldr	r3, [sp, #24]
 800fc36:	2b02      	cmp	r3, #2
 800fc38:	f73f aecc 	bgt.w	800f9d4 <_dtoa_r+0x8d4>
 800fc3c:	465d      	mov	r5, fp
 800fc3e:	4639      	mov	r1, r7
 800fc40:	9804      	ldr	r0, [sp, #16]
 800fc42:	f7ff f9cf 	bl	800efe4 <quorem>
 800fc46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fc4a:	f805 8b01 	strb.w	r8, [r5], #1
 800fc4e:	9a02      	ldr	r2, [sp, #8]
 800fc50:	eba5 030b 	sub.w	r3, r5, fp
 800fc54:	429a      	cmp	r2, r3
 800fc56:	ddb0      	ble.n	800fbba <_dtoa_r+0xaba>
 800fc58:	2300      	movs	r3, #0
 800fc5a:	220a      	movs	r2, #10
 800fc5c:	9904      	ldr	r1, [sp, #16]
 800fc5e:	4620      	mov	r0, r4
 800fc60:	f000 fbb0 	bl	80103c4 <__multadd>
 800fc64:	9004      	str	r0, [sp, #16]
 800fc66:	e7ea      	b.n	800fc3e <_dtoa_r+0xb3e>
 800fc68:	08014340 	.word	0x08014340
 800fc6c:	080143c0 	.word	0x080143c0

0800fc70 <rshift>:
 800fc70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc72:	6906      	ldr	r6, [r0, #16]
 800fc74:	114b      	asrs	r3, r1, #5
 800fc76:	429e      	cmp	r6, r3
 800fc78:	f100 0414 	add.w	r4, r0, #20
 800fc7c:	dd30      	ble.n	800fce0 <rshift+0x70>
 800fc7e:	f011 011f 	ands.w	r1, r1, #31
 800fc82:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800fc86:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800fc8a:	d108      	bne.n	800fc9e <rshift+0x2e>
 800fc8c:	4621      	mov	r1, r4
 800fc8e:	42b2      	cmp	r2, r6
 800fc90:	460b      	mov	r3, r1
 800fc92:	d211      	bcs.n	800fcb8 <rshift+0x48>
 800fc94:	f852 3b04 	ldr.w	r3, [r2], #4
 800fc98:	f841 3b04 	str.w	r3, [r1], #4
 800fc9c:	e7f7      	b.n	800fc8e <rshift+0x1e>
 800fc9e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800fca2:	f1c1 0c20 	rsb	ip, r1, #32
 800fca6:	40cd      	lsrs	r5, r1
 800fca8:	3204      	adds	r2, #4
 800fcaa:	4623      	mov	r3, r4
 800fcac:	42b2      	cmp	r2, r6
 800fcae:	4617      	mov	r7, r2
 800fcb0:	d30c      	bcc.n	800fccc <rshift+0x5c>
 800fcb2:	601d      	str	r5, [r3, #0]
 800fcb4:	b105      	cbz	r5, 800fcb8 <rshift+0x48>
 800fcb6:	3304      	adds	r3, #4
 800fcb8:	1b1a      	subs	r2, r3, r4
 800fcba:	42a3      	cmp	r3, r4
 800fcbc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fcc0:	bf08      	it	eq
 800fcc2:	2300      	moveq	r3, #0
 800fcc4:	6102      	str	r2, [r0, #16]
 800fcc6:	bf08      	it	eq
 800fcc8:	6143      	streq	r3, [r0, #20]
 800fcca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fccc:	683f      	ldr	r7, [r7, #0]
 800fcce:	fa07 f70c 	lsl.w	r7, r7, ip
 800fcd2:	433d      	orrs	r5, r7
 800fcd4:	f843 5b04 	str.w	r5, [r3], #4
 800fcd8:	f852 5b04 	ldr.w	r5, [r2], #4
 800fcdc:	40cd      	lsrs	r5, r1
 800fcde:	e7e5      	b.n	800fcac <rshift+0x3c>
 800fce0:	4623      	mov	r3, r4
 800fce2:	e7e9      	b.n	800fcb8 <rshift+0x48>

0800fce4 <__hexdig_fun>:
 800fce4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fce8:	2b09      	cmp	r3, #9
 800fcea:	d802      	bhi.n	800fcf2 <__hexdig_fun+0xe>
 800fcec:	3820      	subs	r0, #32
 800fcee:	b2c0      	uxtb	r0, r0
 800fcf0:	4770      	bx	lr
 800fcf2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fcf6:	2b05      	cmp	r3, #5
 800fcf8:	d801      	bhi.n	800fcfe <__hexdig_fun+0x1a>
 800fcfa:	3847      	subs	r0, #71	; 0x47
 800fcfc:	e7f7      	b.n	800fcee <__hexdig_fun+0xa>
 800fcfe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fd02:	2b05      	cmp	r3, #5
 800fd04:	d801      	bhi.n	800fd0a <__hexdig_fun+0x26>
 800fd06:	3827      	subs	r0, #39	; 0x27
 800fd08:	e7f1      	b.n	800fcee <__hexdig_fun+0xa>
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	4770      	bx	lr

0800fd0e <__gethex>:
 800fd0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd12:	b08b      	sub	sp, #44	; 0x2c
 800fd14:	468a      	mov	sl, r1
 800fd16:	9002      	str	r0, [sp, #8]
 800fd18:	9816      	ldr	r0, [sp, #88]	; 0x58
 800fd1a:	9306      	str	r3, [sp, #24]
 800fd1c:	4690      	mov	r8, r2
 800fd1e:	f000 fad0 	bl	80102c2 <__localeconv_l>
 800fd22:	6803      	ldr	r3, [r0, #0]
 800fd24:	9303      	str	r3, [sp, #12]
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7f0 fa52 	bl	80001d0 <strlen>
 800fd2c:	9b03      	ldr	r3, [sp, #12]
 800fd2e:	9001      	str	r0, [sp, #4]
 800fd30:	4403      	add	r3, r0
 800fd32:	f04f 0b00 	mov.w	fp, #0
 800fd36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fd3a:	9307      	str	r3, [sp, #28]
 800fd3c:	f8da 3000 	ldr.w	r3, [sl]
 800fd40:	3302      	adds	r3, #2
 800fd42:	461f      	mov	r7, r3
 800fd44:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fd48:	2830      	cmp	r0, #48	; 0x30
 800fd4a:	d06c      	beq.n	800fe26 <__gethex+0x118>
 800fd4c:	f7ff ffca 	bl	800fce4 <__hexdig_fun>
 800fd50:	4604      	mov	r4, r0
 800fd52:	2800      	cmp	r0, #0
 800fd54:	d16a      	bne.n	800fe2c <__gethex+0x11e>
 800fd56:	9a01      	ldr	r2, [sp, #4]
 800fd58:	9903      	ldr	r1, [sp, #12]
 800fd5a:	4638      	mov	r0, r7
 800fd5c:	f001 f8fe 	bl	8010f5c <strncmp>
 800fd60:	2800      	cmp	r0, #0
 800fd62:	d166      	bne.n	800fe32 <__gethex+0x124>
 800fd64:	9b01      	ldr	r3, [sp, #4]
 800fd66:	5cf8      	ldrb	r0, [r7, r3]
 800fd68:	18fe      	adds	r6, r7, r3
 800fd6a:	f7ff ffbb 	bl	800fce4 <__hexdig_fun>
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	d062      	beq.n	800fe38 <__gethex+0x12a>
 800fd72:	4633      	mov	r3, r6
 800fd74:	7818      	ldrb	r0, [r3, #0]
 800fd76:	2830      	cmp	r0, #48	; 0x30
 800fd78:	461f      	mov	r7, r3
 800fd7a:	f103 0301 	add.w	r3, r3, #1
 800fd7e:	d0f9      	beq.n	800fd74 <__gethex+0x66>
 800fd80:	f7ff ffb0 	bl	800fce4 <__hexdig_fun>
 800fd84:	fab0 f580 	clz	r5, r0
 800fd88:	096d      	lsrs	r5, r5, #5
 800fd8a:	4634      	mov	r4, r6
 800fd8c:	f04f 0b01 	mov.w	fp, #1
 800fd90:	463a      	mov	r2, r7
 800fd92:	4616      	mov	r6, r2
 800fd94:	3201      	adds	r2, #1
 800fd96:	7830      	ldrb	r0, [r6, #0]
 800fd98:	f7ff ffa4 	bl	800fce4 <__hexdig_fun>
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	d1f8      	bne.n	800fd92 <__gethex+0x84>
 800fda0:	9a01      	ldr	r2, [sp, #4]
 800fda2:	9903      	ldr	r1, [sp, #12]
 800fda4:	4630      	mov	r0, r6
 800fda6:	f001 f8d9 	bl	8010f5c <strncmp>
 800fdaa:	b950      	cbnz	r0, 800fdc2 <__gethex+0xb4>
 800fdac:	b954      	cbnz	r4, 800fdc4 <__gethex+0xb6>
 800fdae:	9b01      	ldr	r3, [sp, #4]
 800fdb0:	18f4      	adds	r4, r6, r3
 800fdb2:	4622      	mov	r2, r4
 800fdb4:	4616      	mov	r6, r2
 800fdb6:	3201      	adds	r2, #1
 800fdb8:	7830      	ldrb	r0, [r6, #0]
 800fdba:	f7ff ff93 	bl	800fce4 <__hexdig_fun>
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	d1f8      	bne.n	800fdb4 <__gethex+0xa6>
 800fdc2:	b10c      	cbz	r4, 800fdc8 <__gethex+0xba>
 800fdc4:	1ba4      	subs	r4, r4, r6
 800fdc6:	00a4      	lsls	r4, r4, #2
 800fdc8:	7833      	ldrb	r3, [r6, #0]
 800fdca:	2b50      	cmp	r3, #80	; 0x50
 800fdcc:	d001      	beq.n	800fdd2 <__gethex+0xc4>
 800fdce:	2b70      	cmp	r3, #112	; 0x70
 800fdd0:	d140      	bne.n	800fe54 <__gethex+0x146>
 800fdd2:	7873      	ldrb	r3, [r6, #1]
 800fdd4:	2b2b      	cmp	r3, #43	; 0x2b
 800fdd6:	d031      	beq.n	800fe3c <__gethex+0x12e>
 800fdd8:	2b2d      	cmp	r3, #45	; 0x2d
 800fdda:	d033      	beq.n	800fe44 <__gethex+0x136>
 800fddc:	1c71      	adds	r1, r6, #1
 800fdde:	f04f 0900 	mov.w	r9, #0
 800fde2:	7808      	ldrb	r0, [r1, #0]
 800fde4:	f7ff ff7e 	bl	800fce4 <__hexdig_fun>
 800fde8:	1e43      	subs	r3, r0, #1
 800fdea:	b2db      	uxtb	r3, r3
 800fdec:	2b18      	cmp	r3, #24
 800fdee:	d831      	bhi.n	800fe54 <__gethex+0x146>
 800fdf0:	f1a0 0210 	sub.w	r2, r0, #16
 800fdf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fdf8:	f7ff ff74 	bl	800fce4 <__hexdig_fun>
 800fdfc:	1e43      	subs	r3, r0, #1
 800fdfe:	b2db      	uxtb	r3, r3
 800fe00:	2b18      	cmp	r3, #24
 800fe02:	d922      	bls.n	800fe4a <__gethex+0x13c>
 800fe04:	f1b9 0f00 	cmp.w	r9, #0
 800fe08:	d000      	beq.n	800fe0c <__gethex+0xfe>
 800fe0a:	4252      	negs	r2, r2
 800fe0c:	4414      	add	r4, r2
 800fe0e:	f8ca 1000 	str.w	r1, [sl]
 800fe12:	b30d      	cbz	r5, 800fe58 <__gethex+0x14a>
 800fe14:	f1bb 0f00 	cmp.w	fp, #0
 800fe18:	bf0c      	ite	eq
 800fe1a:	2706      	moveq	r7, #6
 800fe1c:	2700      	movne	r7, #0
 800fe1e:	4638      	mov	r0, r7
 800fe20:	b00b      	add	sp, #44	; 0x2c
 800fe22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe26:	f10b 0b01 	add.w	fp, fp, #1
 800fe2a:	e78a      	b.n	800fd42 <__gethex+0x34>
 800fe2c:	2500      	movs	r5, #0
 800fe2e:	462c      	mov	r4, r5
 800fe30:	e7ae      	b.n	800fd90 <__gethex+0x82>
 800fe32:	463e      	mov	r6, r7
 800fe34:	2501      	movs	r5, #1
 800fe36:	e7c7      	b.n	800fdc8 <__gethex+0xba>
 800fe38:	4604      	mov	r4, r0
 800fe3a:	e7fb      	b.n	800fe34 <__gethex+0x126>
 800fe3c:	f04f 0900 	mov.w	r9, #0
 800fe40:	1cb1      	adds	r1, r6, #2
 800fe42:	e7ce      	b.n	800fde2 <__gethex+0xd4>
 800fe44:	f04f 0901 	mov.w	r9, #1
 800fe48:	e7fa      	b.n	800fe40 <__gethex+0x132>
 800fe4a:	230a      	movs	r3, #10
 800fe4c:	fb03 0202 	mla	r2, r3, r2, r0
 800fe50:	3a10      	subs	r2, #16
 800fe52:	e7cf      	b.n	800fdf4 <__gethex+0xe6>
 800fe54:	4631      	mov	r1, r6
 800fe56:	e7da      	b.n	800fe0e <__gethex+0x100>
 800fe58:	1bf3      	subs	r3, r6, r7
 800fe5a:	3b01      	subs	r3, #1
 800fe5c:	4629      	mov	r1, r5
 800fe5e:	2b07      	cmp	r3, #7
 800fe60:	dc49      	bgt.n	800fef6 <__gethex+0x1e8>
 800fe62:	9802      	ldr	r0, [sp, #8]
 800fe64:	f000 fa63 	bl	801032e <_Balloc>
 800fe68:	9b01      	ldr	r3, [sp, #4]
 800fe6a:	f100 0914 	add.w	r9, r0, #20
 800fe6e:	f04f 0b00 	mov.w	fp, #0
 800fe72:	f1c3 0301 	rsb	r3, r3, #1
 800fe76:	4605      	mov	r5, r0
 800fe78:	f8cd 9010 	str.w	r9, [sp, #16]
 800fe7c:	46da      	mov	sl, fp
 800fe7e:	9308      	str	r3, [sp, #32]
 800fe80:	42b7      	cmp	r7, r6
 800fe82:	d33b      	bcc.n	800fefc <__gethex+0x1ee>
 800fe84:	9804      	ldr	r0, [sp, #16]
 800fe86:	f840 ab04 	str.w	sl, [r0], #4
 800fe8a:	eba0 0009 	sub.w	r0, r0, r9
 800fe8e:	1080      	asrs	r0, r0, #2
 800fe90:	6128      	str	r0, [r5, #16]
 800fe92:	0147      	lsls	r7, r0, #5
 800fe94:	4650      	mov	r0, sl
 800fe96:	f000 fb0e 	bl	80104b6 <__hi0bits>
 800fe9a:	f8d8 6000 	ldr.w	r6, [r8]
 800fe9e:	1a3f      	subs	r7, r7, r0
 800fea0:	42b7      	cmp	r7, r6
 800fea2:	dd64      	ble.n	800ff6e <__gethex+0x260>
 800fea4:	1bbf      	subs	r7, r7, r6
 800fea6:	4639      	mov	r1, r7
 800fea8:	4628      	mov	r0, r5
 800feaa:	f000 fe1d 	bl	8010ae8 <__any_on>
 800feae:	4682      	mov	sl, r0
 800feb0:	b178      	cbz	r0, 800fed2 <__gethex+0x1c4>
 800feb2:	1e7b      	subs	r3, r7, #1
 800feb4:	1159      	asrs	r1, r3, #5
 800feb6:	f003 021f 	and.w	r2, r3, #31
 800feba:	f04f 0a01 	mov.w	sl, #1
 800febe:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fec2:	fa0a f202 	lsl.w	r2, sl, r2
 800fec6:	420a      	tst	r2, r1
 800fec8:	d003      	beq.n	800fed2 <__gethex+0x1c4>
 800feca:	4553      	cmp	r3, sl
 800fecc:	dc46      	bgt.n	800ff5c <__gethex+0x24e>
 800fece:	f04f 0a02 	mov.w	sl, #2
 800fed2:	4639      	mov	r1, r7
 800fed4:	4628      	mov	r0, r5
 800fed6:	f7ff fecb 	bl	800fc70 <rshift>
 800feda:	443c      	add	r4, r7
 800fedc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fee0:	42a3      	cmp	r3, r4
 800fee2:	da52      	bge.n	800ff8a <__gethex+0x27c>
 800fee4:	4629      	mov	r1, r5
 800fee6:	9802      	ldr	r0, [sp, #8]
 800fee8:	f000 fa55 	bl	8010396 <_Bfree>
 800feec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800feee:	2300      	movs	r3, #0
 800fef0:	6013      	str	r3, [r2, #0]
 800fef2:	27a3      	movs	r7, #163	; 0xa3
 800fef4:	e793      	b.n	800fe1e <__gethex+0x110>
 800fef6:	3101      	adds	r1, #1
 800fef8:	105b      	asrs	r3, r3, #1
 800fefa:	e7b0      	b.n	800fe5e <__gethex+0x150>
 800fefc:	1e73      	subs	r3, r6, #1
 800fefe:	9305      	str	r3, [sp, #20]
 800ff00:	9a07      	ldr	r2, [sp, #28]
 800ff02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ff06:	4293      	cmp	r3, r2
 800ff08:	d018      	beq.n	800ff3c <__gethex+0x22e>
 800ff0a:	f1bb 0f20 	cmp.w	fp, #32
 800ff0e:	d107      	bne.n	800ff20 <__gethex+0x212>
 800ff10:	9b04      	ldr	r3, [sp, #16]
 800ff12:	f8c3 a000 	str.w	sl, [r3]
 800ff16:	3304      	adds	r3, #4
 800ff18:	f04f 0a00 	mov.w	sl, #0
 800ff1c:	9304      	str	r3, [sp, #16]
 800ff1e:	46d3      	mov	fp, sl
 800ff20:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ff24:	f7ff fede 	bl	800fce4 <__hexdig_fun>
 800ff28:	f000 000f 	and.w	r0, r0, #15
 800ff2c:	fa00 f00b 	lsl.w	r0, r0, fp
 800ff30:	ea4a 0a00 	orr.w	sl, sl, r0
 800ff34:	f10b 0b04 	add.w	fp, fp, #4
 800ff38:	9b05      	ldr	r3, [sp, #20]
 800ff3a:	e00d      	b.n	800ff58 <__gethex+0x24a>
 800ff3c:	9b05      	ldr	r3, [sp, #20]
 800ff3e:	9a08      	ldr	r2, [sp, #32]
 800ff40:	4413      	add	r3, r2
 800ff42:	42bb      	cmp	r3, r7
 800ff44:	d3e1      	bcc.n	800ff0a <__gethex+0x1fc>
 800ff46:	4618      	mov	r0, r3
 800ff48:	9a01      	ldr	r2, [sp, #4]
 800ff4a:	9903      	ldr	r1, [sp, #12]
 800ff4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff4e:	f001 f805 	bl	8010f5c <strncmp>
 800ff52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff54:	2800      	cmp	r0, #0
 800ff56:	d1d8      	bne.n	800ff0a <__gethex+0x1fc>
 800ff58:	461e      	mov	r6, r3
 800ff5a:	e791      	b.n	800fe80 <__gethex+0x172>
 800ff5c:	1eb9      	subs	r1, r7, #2
 800ff5e:	4628      	mov	r0, r5
 800ff60:	f000 fdc2 	bl	8010ae8 <__any_on>
 800ff64:	2800      	cmp	r0, #0
 800ff66:	d0b2      	beq.n	800fece <__gethex+0x1c0>
 800ff68:	f04f 0a03 	mov.w	sl, #3
 800ff6c:	e7b1      	b.n	800fed2 <__gethex+0x1c4>
 800ff6e:	da09      	bge.n	800ff84 <__gethex+0x276>
 800ff70:	1bf7      	subs	r7, r6, r7
 800ff72:	4629      	mov	r1, r5
 800ff74:	463a      	mov	r2, r7
 800ff76:	9802      	ldr	r0, [sp, #8]
 800ff78:	f000 fbd8 	bl	801072c <__lshift>
 800ff7c:	1be4      	subs	r4, r4, r7
 800ff7e:	4605      	mov	r5, r0
 800ff80:	f100 0914 	add.w	r9, r0, #20
 800ff84:	f04f 0a00 	mov.w	sl, #0
 800ff88:	e7a8      	b.n	800fedc <__gethex+0x1ce>
 800ff8a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ff8e:	42a0      	cmp	r0, r4
 800ff90:	dd6a      	ble.n	8010068 <__gethex+0x35a>
 800ff92:	1b04      	subs	r4, r0, r4
 800ff94:	42a6      	cmp	r6, r4
 800ff96:	dc2e      	bgt.n	800fff6 <__gethex+0x2e8>
 800ff98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ff9c:	2b02      	cmp	r3, #2
 800ff9e:	d022      	beq.n	800ffe6 <__gethex+0x2d8>
 800ffa0:	2b03      	cmp	r3, #3
 800ffa2:	d024      	beq.n	800ffee <__gethex+0x2e0>
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d115      	bne.n	800ffd4 <__gethex+0x2c6>
 800ffa8:	42a6      	cmp	r6, r4
 800ffaa:	d113      	bne.n	800ffd4 <__gethex+0x2c6>
 800ffac:	2e01      	cmp	r6, #1
 800ffae:	dc0b      	bgt.n	800ffc8 <__gethex+0x2ba>
 800ffb0:	9a06      	ldr	r2, [sp, #24]
 800ffb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ffb6:	6013      	str	r3, [r2, #0]
 800ffb8:	2301      	movs	r3, #1
 800ffba:	612b      	str	r3, [r5, #16]
 800ffbc:	f8c9 3000 	str.w	r3, [r9]
 800ffc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ffc2:	2762      	movs	r7, #98	; 0x62
 800ffc4:	601d      	str	r5, [r3, #0]
 800ffc6:	e72a      	b.n	800fe1e <__gethex+0x110>
 800ffc8:	1e71      	subs	r1, r6, #1
 800ffca:	4628      	mov	r0, r5
 800ffcc:	f000 fd8c 	bl	8010ae8 <__any_on>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d1ed      	bne.n	800ffb0 <__gethex+0x2a2>
 800ffd4:	4629      	mov	r1, r5
 800ffd6:	9802      	ldr	r0, [sp, #8]
 800ffd8:	f000 f9dd 	bl	8010396 <_Bfree>
 800ffdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ffde:	2300      	movs	r3, #0
 800ffe0:	6013      	str	r3, [r2, #0]
 800ffe2:	2750      	movs	r7, #80	; 0x50
 800ffe4:	e71b      	b.n	800fe1e <__gethex+0x110>
 800ffe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d0e1      	beq.n	800ffb0 <__gethex+0x2a2>
 800ffec:	e7f2      	b.n	800ffd4 <__gethex+0x2c6>
 800ffee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d1dd      	bne.n	800ffb0 <__gethex+0x2a2>
 800fff4:	e7ee      	b.n	800ffd4 <__gethex+0x2c6>
 800fff6:	1e67      	subs	r7, r4, #1
 800fff8:	f1ba 0f00 	cmp.w	sl, #0
 800fffc:	d131      	bne.n	8010062 <__gethex+0x354>
 800fffe:	b127      	cbz	r7, 801000a <__gethex+0x2fc>
 8010000:	4639      	mov	r1, r7
 8010002:	4628      	mov	r0, r5
 8010004:	f000 fd70 	bl	8010ae8 <__any_on>
 8010008:	4682      	mov	sl, r0
 801000a:	117a      	asrs	r2, r7, #5
 801000c:	2301      	movs	r3, #1
 801000e:	f007 071f 	and.w	r7, r7, #31
 8010012:	fa03 f707 	lsl.w	r7, r3, r7
 8010016:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801001a:	4621      	mov	r1, r4
 801001c:	421f      	tst	r7, r3
 801001e:	4628      	mov	r0, r5
 8010020:	bf18      	it	ne
 8010022:	f04a 0a02 	orrne.w	sl, sl, #2
 8010026:	1b36      	subs	r6, r6, r4
 8010028:	f7ff fe22 	bl	800fc70 <rshift>
 801002c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010030:	2702      	movs	r7, #2
 8010032:	f1ba 0f00 	cmp.w	sl, #0
 8010036:	d048      	beq.n	80100ca <__gethex+0x3bc>
 8010038:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801003c:	2b02      	cmp	r3, #2
 801003e:	d015      	beq.n	801006c <__gethex+0x35e>
 8010040:	2b03      	cmp	r3, #3
 8010042:	d017      	beq.n	8010074 <__gethex+0x366>
 8010044:	2b01      	cmp	r3, #1
 8010046:	d109      	bne.n	801005c <__gethex+0x34e>
 8010048:	f01a 0f02 	tst.w	sl, #2
 801004c:	d006      	beq.n	801005c <__gethex+0x34e>
 801004e:	f8d9 3000 	ldr.w	r3, [r9]
 8010052:	ea4a 0a03 	orr.w	sl, sl, r3
 8010056:	f01a 0f01 	tst.w	sl, #1
 801005a:	d10e      	bne.n	801007a <__gethex+0x36c>
 801005c:	f047 0710 	orr.w	r7, r7, #16
 8010060:	e033      	b.n	80100ca <__gethex+0x3bc>
 8010062:	f04f 0a01 	mov.w	sl, #1
 8010066:	e7d0      	b.n	801000a <__gethex+0x2fc>
 8010068:	2701      	movs	r7, #1
 801006a:	e7e2      	b.n	8010032 <__gethex+0x324>
 801006c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801006e:	f1c3 0301 	rsb	r3, r3, #1
 8010072:	9315      	str	r3, [sp, #84]	; 0x54
 8010074:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010076:	2b00      	cmp	r3, #0
 8010078:	d0f0      	beq.n	801005c <__gethex+0x34e>
 801007a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801007e:	f105 0314 	add.w	r3, r5, #20
 8010082:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8010086:	eb03 010a 	add.w	r1, r3, sl
 801008a:	f04f 0c00 	mov.w	ip, #0
 801008e:	4618      	mov	r0, r3
 8010090:	f853 2b04 	ldr.w	r2, [r3], #4
 8010094:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010098:	d01c      	beq.n	80100d4 <__gethex+0x3c6>
 801009a:	3201      	adds	r2, #1
 801009c:	6002      	str	r2, [r0, #0]
 801009e:	2f02      	cmp	r7, #2
 80100a0:	f105 0314 	add.w	r3, r5, #20
 80100a4:	d138      	bne.n	8010118 <__gethex+0x40a>
 80100a6:	f8d8 2000 	ldr.w	r2, [r8]
 80100aa:	3a01      	subs	r2, #1
 80100ac:	42b2      	cmp	r2, r6
 80100ae:	d10a      	bne.n	80100c6 <__gethex+0x3b8>
 80100b0:	1171      	asrs	r1, r6, #5
 80100b2:	2201      	movs	r2, #1
 80100b4:	f006 061f 	and.w	r6, r6, #31
 80100b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80100bc:	fa02 f606 	lsl.w	r6, r2, r6
 80100c0:	421e      	tst	r6, r3
 80100c2:	bf18      	it	ne
 80100c4:	4617      	movne	r7, r2
 80100c6:	f047 0720 	orr.w	r7, r7, #32
 80100ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80100cc:	601d      	str	r5, [r3, #0]
 80100ce:	9b06      	ldr	r3, [sp, #24]
 80100d0:	601c      	str	r4, [r3, #0]
 80100d2:	e6a4      	b.n	800fe1e <__gethex+0x110>
 80100d4:	4299      	cmp	r1, r3
 80100d6:	f843 cc04 	str.w	ip, [r3, #-4]
 80100da:	d8d8      	bhi.n	801008e <__gethex+0x380>
 80100dc:	68ab      	ldr	r3, [r5, #8]
 80100de:	4599      	cmp	r9, r3
 80100e0:	db12      	blt.n	8010108 <__gethex+0x3fa>
 80100e2:	6869      	ldr	r1, [r5, #4]
 80100e4:	9802      	ldr	r0, [sp, #8]
 80100e6:	3101      	adds	r1, #1
 80100e8:	f000 f921 	bl	801032e <_Balloc>
 80100ec:	692a      	ldr	r2, [r5, #16]
 80100ee:	3202      	adds	r2, #2
 80100f0:	f105 010c 	add.w	r1, r5, #12
 80100f4:	4683      	mov	fp, r0
 80100f6:	0092      	lsls	r2, r2, #2
 80100f8:	300c      	adds	r0, #12
 80100fa:	f000 f90d 	bl	8010318 <memcpy>
 80100fe:	4629      	mov	r1, r5
 8010100:	9802      	ldr	r0, [sp, #8]
 8010102:	f000 f948 	bl	8010396 <_Bfree>
 8010106:	465d      	mov	r5, fp
 8010108:	692b      	ldr	r3, [r5, #16]
 801010a:	1c5a      	adds	r2, r3, #1
 801010c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010110:	612a      	str	r2, [r5, #16]
 8010112:	2201      	movs	r2, #1
 8010114:	615a      	str	r2, [r3, #20]
 8010116:	e7c2      	b.n	801009e <__gethex+0x390>
 8010118:	692a      	ldr	r2, [r5, #16]
 801011a:	454a      	cmp	r2, r9
 801011c:	dd0b      	ble.n	8010136 <__gethex+0x428>
 801011e:	2101      	movs	r1, #1
 8010120:	4628      	mov	r0, r5
 8010122:	f7ff fda5 	bl	800fc70 <rshift>
 8010126:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801012a:	3401      	adds	r4, #1
 801012c:	42a3      	cmp	r3, r4
 801012e:	f6ff aed9 	blt.w	800fee4 <__gethex+0x1d6>
 8010132:	2701      	movs	r7, #1
 8010134:	e7c7      	b.n	80100c6 <__gethex+0x3b8>
 8010136:	f016 061f 	ands.w	r6, r6, #31
 801013a:	d0fa      	beq.n	8010132 <__gethex+0x424>
 801013c:	449a      	add	sl, r3
 801013e:	f1c6 0620 	rsb	r6, r6, #32
 8010142:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010146:	f000 f9b6 	bl	80104b6 <__hi0bits>
 801014a:	42b0      	cmp	r0, r6
 801014c:	dbe7      	blt.n	801011e <__gethex+0x410>
 801014e:	e7f0      	b.n	8010132 <__gethex+0x424>

08010150 <L_shift>:
 8010150:	f1c2 0208 	rsb	r2, r2, #8
 8010154:	0092      	lsls	r2, r2, #2
 8010156:	b570      	push	{r4, r5, r6, lr}
 8010158:	f1c2 0620 	rsb	r6, r2, #32
 801015c:	6843      	ldr	r3, [r0, #4]
 801015e:	6804      	ldr	r4, [r0, #0]
 8010160:	fa03 f506 	lsl.w	r5, r3, r6
 8010164:	432c      	orrs	r4, r5
 8010166:	40d3      	lsrs	r3, r2
 8010168:	6004      	str	r4, [r0, #0]
 801016a:	f840 3f04 	str.w	r3, [r0, #4]!
 801016e:	4288      	cmp	r0, r1
 8010170:	d3f4      	bcc.n	801015c <L_shift+0xc>
 8010172:	bd70      	pop	{r4, r5, r6, pc}

08010174 <__match>:
 8010174:	b530      	push	{r4, r5, lr}
 8010176:	6803      	ldr	r3, [r0, #0]
 8010178:	3301      	adds	r3, #1
 801017a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801017e:	b914      	cbnz	r4, 8010186 <__match+0x12>
 8010180:	6003      	str	r3, [r0, #0]
 8010182:	2001      	movs	r0, #1
 8010184:	bd30      	pop	{r4, r5, pc}
 8010186:	f813 2b01 	ldrb.w	r2, [r3], #1
 801018a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801018e:	2d19      	cmp	r5, #25
 8010190:	bf98      	it	ls
 8010192:	3220      	addls	r2, #32
 8010194:	42a2      	cmp	r2, r4
 8010196:	d0f0      	beq.n	801017a <__match+0x6>
 8010198:	2000      	movs	r0, #0
 801019a:	e7f3      	b.n	8010184 <__match+0x10>

0801019c <__hexnan>:
 801019c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101a0:	680b      	ldr	r3, [r1, #0]
 80101a2:	6801      	ldr	r1, [r0, #0]
 80101a4:	115f      	asrs	r7, r3, #5
 80101a6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80101aa:	f013 031f 	ands.w	r3, r3, #31
 80101ae:	b087      	sub	sp, #28
 80101b0:	bf18      	it	ne
 80101b2:	3704      	addne	r7, #4
 80101b4:	2500      	movs	r5, #0
 80101b6:	1f3e      	subs	r6, r7, #4
 80101b8:	4682      	mov	sl, r0
 80101ba:	4690      	mov	r8, r2
 80101bc:	9301      	str	r3, [sp, #4]
 80101be:	f847 5c04 	str.w	r5, [r7, #-4]
 80101c2:	46b1      	mov	r9, r6
 80101c4:	4634      	mov	r4, r6
 80101c6:	9502      	str	r5, [sp, #8]
 80101c8:	46ab      	mov	fp, r5
 80101ca:	784a      	ldrb	r2, [r1, #1]
 80101cc:	1c4b      	adds	r3, r1, #1
 80101ce:	9303      	str	r3, [sp, #12]
 80101d0:	b342      	cbz	r2, 8010224 <__hexnan+0x88>
 80101d2:	4610      	mov	r0, r2
 80101d4:	9105      	str	r1, [sp, #20]
 80101d6:	9204      	str	r2, [sp, #16]
 80101d8:	f7ff fd84 	bl	800fce4 <__hexdig_fun>
 80101dc:	2800      	cmp	r0, #0
 80101de:	d143      	bne.n	8010268 <__hexnan+0xcc>
 80101e0:	9a04      	ldr	r2, [sp, #16]
 80101e2:	9905      	ldr	r1, [sp, #20]
 80101e4:	2a20      	cmp	r2, #32
 80101e6:	d818      	bhi.n	801021a <__hexnan+0x7e>
 80101e8:	9b02      	ldr	r3, [sp, #8]
 80101ea:	459b      	cmp	fp, r3
 80101ec:	dd13      	ble.n	8010216 <__hexnan+0x7a>
 80101ee:	454c      	cmp	r4, r9
 80101f0:	d206      	bcs.n	8010200 <__hexnan+0x64>
 80101f2:	2d07      	cmp	r5, #7
 80101f4:	dc04      	bgt.n	8010200 <__hexnan+0x64>
 80101f6:	462a      	mov	r2, r5
 80101f8:	4649      	mov	r1, r9
 80101fa:	4620      	mov	r0, r4
 80101fc:	f7ff ffa8 	bl	8010150 <L_shift>
 8010200:	4544      	cmp	r4, r8
 8010202:	d944      	bls.n	801028e <__hexnan+0xf2>
 8010204:	2300      	movs	r3, #0
 8010206:	f1a4 0904 	sub.w	r9, r4, #4
 801020a:	f844 3c04 	str.w	r3, [r4, #-4]
 801020e:	f8cd b008 	str.w	fp, [sp, #8]
 8010212:	464c      	mov	r4, r9
 8010214:	461d      	mov	r5, r3
 8010216:	9903      	ldr	r1, [sp, #12]
 8010218:	e7d7      	b.n	80101ca <__hexnan+0x2e>
 801021a:	2a29      	cmp	r2, #41	; 0x29
 801021c:	d14a      	bne.n	80102b4 <__hexnan+0x118>
 801021e:	3102      	adds	r1, #2
 8010220:	f8ca 1000 	str.w	r1, [sl]
 8010224:	f1bb 0f00 	cmp.w	fp, #0
 8010228:	d044      	beq.n	80102b4 <__hexnan+0x118>
 801022a:	454c      	cmp	r4, r9
 801022c:	d206      	bcs.n	801023c <__hexnan+0xa0>
 801022e:	2d07      	cmp	r5, #7
 8010230:	dc04      	bgt.n	801023c <__hexnan+0xa0>
 8010232:	462a      	mov	r2, r5
 8010234:	4649      	mov	r1, r9
 8010236:	4620      	mov	r0, r4
 8010238:	f7ff ff8a 	bl	8010150 <L_shift>
 801023c:	4544      	cmp	r4, r8
 801023e:	d928      	bls.n	8010292 <__hexnan+0xf6>
 8010240:	4643      	mov	r3, r8
 8010242:	f854 2b04 	ldr.w	r2, [r4], #4
 8010246:	f843 2b04 	str.w	r2, [r3], #4
 801024a:	42a6      	cmp	r6, r4
 801024c:	d2f9      	bcs.n	8010242 <__hexnan+0xa6>
 801024e:	2200      	movs	r2, #0
 8010250:	f843 2b04 	str.w	r2, [r3], #4
 8010254:	429e      	cmp	r6, r3
 8010256:	d2fb      	bcs.n	8010250 <__hexnan+0xb4>
 8010258:	6833      	ldr	r3, [r6, #0]
 801025a:	b91b      	cbnz	r3, 8010264 <__hexnan+0xc8>
 801025c:	4546      	cmp	r6, r8
 801025e:	d127      	bne.n	80102b0 <__hexnan+0x114>
 8010260:	2301      	movs	r3, #1
 8010262:	6033      	str	r3, [r6, #0]
 8010264:	2005      	movs	r0, #5
 8010266:	e026      	b.n	80102b6 <__hexnan+0x11a>
 8010268:	3501      	adds	r5, #1
 801026a:	2d08      	cmp	r5, #8
 801026c:	f10b 0b01 	add.w	fp, fp, #1
 8010270:	dd06      	ble.n	8010280 <__hexnan+0xe4>
 8010272:	4544      	cmp	r4, r8
 8010274:	d9cf      	bls.n	8010216 <__hexnan+0x7a>
 8010276:	2300      	movs	r3, #0
 8010278:	f844 3c04 	str.w	r3, [r4, #-4]
 801027c:	2501      	movs	r5, #1
 801027e:	3c04      	subs	r4, #4
 8010280:	6822      	ldr	r2, [r4, #0]
 8010282:	f000 000f 	and.w	r0, r0, #15
 8010286:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801028a:	6020      	str	r0, [r4, #0]
 801028c:	e7c3      	b.n	8010216 <__hexnan+0x7a>
 801028e:	2508      	movs	r5, #8
 8010290:	e7c1      	b.n	8010216 <__hexnan+0x7a>
 8010292:	9b01      	ldr	r3, [sp, #4]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d0df      	beq.n	8010258 <__hexnan+0xbc>
 8010298:	f04f 32ff 	mov.w	r2, #4294967295
 801029c:	f1c3 0320 	rsb	r3, r3, #32
 80102a0:	fa22 f303 	lsr.w	r3, r2, r3
 80102a4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80102a8:	401a      	ands	r2, r3
 80102aa:	f847 2c04 	str.w	r2, [r7, #-4]
 80102ae:	e7d3      	b.n	8010258 <__hexnan+0xbc>
 80102b0:	3e04      	subs	r6, #4
 80102b2:	e7d1      	b.n	8010258 <__hexnan+0xbc>
 80102b4:	2004      	movs	r0, #4
 80102b6:	b007      	add	sp, #28
 80102b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080102bc <__locale_ctype_ptr_l>:
 80102bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80102c0:	4770      	bx	lr

080102c2 <__localeconv_l>:
 80102c2:	30f0      	adds	r0, #240	; 0xf0
 80102c4:	4770      	bx	lr
	...

080102c8 <_localeconv_r>:
 80102c8:	4b04      	ldr	r3, [pc, #16]	; (80102dc <_localeconv_r+0x14>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	6a18      	ldr	r0, [r3, #32]
 80102ce:	4b04      	ldr	r3, [pc, #16]	; (80102e0 <_localeconv_r+0x18>)
 80102d0:	2800      	cmp	r0, #0
 80102d2:	bf08      	it	eq
 80102d4:	4618      	moveq	r0, r3
 80102d6:	30f0      	adds	r0, #240	; 0xf0
 80102d8:	4770      	bx	lr
 80102da:	bf00      	nop
 80102dc:	20000044 	.word	0x20000044
 80102e0:	200000a8 	.word	0x200000a8

080102e4 <malloc>:
 80102e4:	4b02      	ldr	r3, [pc, #8]	; (80102f0 <malloc+0xc>)
 80102e6:	4601      	mov	r1, r0
 80102e8:	6818      	ldr	r0, [r3, #0]
 80102ea:	f000 bc7b 	b.w	8010be4 <_malloc_r>
 80102ee:	bf00      	nop
 80102f0:	20000044 	.word	0x20000044

080102f4 <__ascii_mbtowc>:
 80102f4:	b082      	sub	sp, #8
 80102f6:	b901      	cbnz	r1, 80102fa <__ascii_mbtowc+0x6>
 80102f8:	a901      	add	r1, sp, #4
 80102fa:	b142      	cbz	r2, 801030e <__ascii_mbtowc+0x1a>
 80102fc:	b14b      	cbz	r3, 8010312 <__ascii_mbtowc+0x1e>
 80102fe:	7813      	ldrb	r3, [r2, #0]
 8010300:	600b      	str	r3, [r1, #0]
 8010302:	7812      	ldrb	r2, [r2, #0]
 8010304:	1c10      	adds	r0, r2, #0
 8010306:	bf18      	it	ne
 8010308:	2001      	movne	r0, #1
 801030a:	b002      	add	sp, #8
 801030c:	4770      	bx	lr
 801030e:	4610      	mov	r0, r2
 8010310:	e7fb      	b.n	801030a <__ascii_mbtowc+0x16>
 8010312:	f06f 0001 	mvn.w	r0, #1
 8010316:	e7f8      	b.n	801030a <__ascii_mbtowc+0x16>

08010318 <memcpy>:
 8010318:	b510      	push	{r4, lr}
 801031a:	1e43      	subs	r3, r0, #1
 801031c:	440a      	add	r2, r1
 801031e:	4291      	cmp	r1, r2
 8010320:	d100      	bne.n	8010324 <memcpy+0xc>
 8010322:	bd10      	pop	{r4, pc}
 8010324:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010328:	f803 4f01 	strb.w	r4, [r3, #1]!
 801032c:	e7f7      	b.n	801031e <memcpy+0x6>

0801032e <_Balloc>:
 801032e:	b570      	push	{r4, r5, r6, lr}
 8010330:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010332:	4604      	mov	r4, r0
 8010334:	460e      	mov	r6, r1
 8010336:	b93d      	cbnz	r5, 8010348 <_Balloc+0x1a>
 8010338:	2010      	movs	r0, #16
 801033a:	f7ff ffd3 	bl	80102e4 <malloc>
 801033e:	6260      	str	r0, [r4, #36]	; 0x24
 8010340:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010344:	6005      	str	r5, [r0, #0]
 8010346:	60c5      	str	r5, [r0, #12]
 8010348:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801034a:	68eb      	ldr	r3, [r5, #12]
 801034c:	b183      	cbz	r3, 8010370 <_Balloc+0x42>
 801034e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010350:	68db      	ldr	r3, [r3, #12]
 8010352:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010356:	b9b8      	cbnz	r0, 8010388 <_Balloc+0x5a>
 8010358:	2101      	movs	r1, #1
 801035a:	fa01 f506 	lsl.w	r5, r1, r6
 801035e:	1d6a      	adds	r2, r5, #5
 8010360:	0092      	lsls	r2, r2, #2
 8010362:	4620      	mov	r0, r4
 8010364:	f000 fbe1 	bl	8010b2a <_calloc_r>
 8010368:	b160      	cbz	r0, 8010384 <_Balloc+0x56>
 801036a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801036e:	e00e      	b.n	801038e <_Balloc+0x60>
 8010370:	2221      	movs	r2, #33	; 0x21
 8010372:	2104      	movs	r1, #4
 8010374:	4620      	mov	r0, r4
 8010376:	f000 fbd8 	bl	8010b2a <_calloc_r>
 801037a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801037c:	60e8      	str	r0, [r5, #12]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d1e4      	bne.n	801034e <_Balloc+0x20>
 8010384:	2000      	movs	r0, #0
 8010386:	bd70      	pop	{r4, r5, r6, pc}
 8010388:	6802      	ldr	r2, [r0, #0]
 801038a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801038e:	2300      	movs	r3, #0
 8010390:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010394:	e7f7      	b.n	8010386 <_Balloc+0x58>

08010396 <_Bfree>:
 8010396:	b570      	push	{r4, r5, r6, lr}
 8010398:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801039a:	4606      	mov	r6, r0
 801039c:	460d      	mov	r5, r1
 801039e:	b93c      	cbnz	r4, 80103b0 <_Bfree+0x1a>
 80103a0:	2010      	movs	r0, #16
 80103a2:	f7ff ff9f 	bl	80102e4 <malloc>
 80103a6:	6270      	str	r0, [r6, #36]	; 0x24
 80103a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80103ac:	6004      	str	r4, [r0, #0]
 80103ae:	60c4      	str	r4, [r0, #12]
 80103b0:	b13d      	cbz	r5, 80103c2 <_Bfree+0x2c>
 80103b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80103b4:	686a      	ldr	r2, [r5, #4]
 80103b6:	68db      	ldr	r3, [r3, #12]
 80103b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80103bc:	6029      	str	r1, [r5, #0]
 80103be:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80103c2:	bd70      	pop	{r4, r5, r6, pc}

080103c4 <__multadd>:
 80103c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103c8:	690d      	ldr	r5, [r1, #16]
 80103ca:	461f      	mov	r7, r3
 80103cc:	4606      	mov	r6, r0
 80103ce:	460c      	mov	r4, r1
 80103d0:	f101 0c14 	add.w	ip, r1, #20
 80103d4:	2300      	movs	r3, #0
 80103d6:	f8dc 0000 	ldr.w	r0, [ip]
 80103da:	b281      	uxth	r1, r0
 80103dc:	fb02 7101 	mla	r1, r2, r1, r7
 80103e0:	0c0f      	lsrs	r7, r1, #16
 80103e2:	0c00      	lsrs	r0, r0, #16
 80103e4:	fb02 7000 	mla	r0, r2, r0, r7
 80103e8:	b289      	uxth	r1, r1
 80103ea:	3301      	adds	r3, #1
 80103ec:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80103f0:	429d      	cmp	r5, r3
 80103f2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80103f6:	f84c 1b04 	str.w	r1, [ip], #4
 80103fa:	dcec      	bgt.n	80103d6 <__multadd+0x12>
 80103fc:	b1d7      	cbz	r7, 8010434 <__multadd+0x70>
 80103fe:	68a3      	ldr	r3, [r4, #8]
 8010400:	42ab      	cmp	r3, r5
 8010402:	dc12      	bgt.n	801042a <__multadd+0x66>
 8010404:	6861      	ldr	r1, [r4, #4]
 8010406:	4630      	mov	r0, r6
 8010408:	3101      	adds	r1, #1
 801040a:	f7ff ff90 	bl	801032e <_Balloc>
 801040e:	6922      	ldr	r2, [r4, #16]
 8010410:	3202      	adds	r2, #2
 8010412:	f104 010c 	add.w	r1, r4, #12
 8010416:	4680      	mov	r8, r0
 8010418:	0092      	lsls	r2, r2, #2
 801041a:	300c      	adds	r0, #12
 801041c:	f7ff ff7c 	bl	8010318 <memcpy>
 8010420:	4621      	mov	r1, r4
 8010422:	4630      	mov	r0, r6
 8010424:	f7ff ffb7 	bl	8010396 <_Bfree>
 8010428:	4644      	mov	r4, r8
 801042a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801042e:	3501      	adds	r5, #1
 8010430:	615f      	str	r7, [r3, #20]
 8010432:	6125      	str	r5, [r4, #16]
 8010434:	4620      	mov	r0, r4
 8010436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801043a <__s2b>:
 801043a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801043e:	460c      	mov	r4, r1
 8010440:	4615      	mov	r5, r2
 8010442:	461f      	mov	r7, r3
 8010444:	2209      	movs	r2, #9
 8010446:	3308      	adds	r3, #8
 8010448:	4606      	mov	r6, r0
 801044a:	fb93 f3f2 	sdiv	r3, r3, r2
 801044e:	2100      	movs	r1, #0
 8010450:	2201      	movs	r2, #1
 8010452:	429a      	cmp	r2, r3
 8010454:	db20      	blt.n	8010498 <__s2b+0x5e>
 8010456:	4630      	mov	r0, r6
 8010458:	f7ff ff69 	bl	801032e <_Balloc>
 801045c:	9b08      	ldr	r3, [sp, #32]
 801045e:	6143      	str	r3, [r0, #20]
 8010460:	2d09      	cmp	r5, #9
 8010462:	f04f 0301 	mov.w	r3, #1
 8010466:	6103      	str	r3, [r0, #16]
 8010468:	dd19      	ble.n	801049e <__s2b+0x64>
 801046a:	f104 0809 	add.w	r8, r4, #9
 801046e:	46c1      	mov	r9, r8
 8010470:	442c      	add	r4, r5
 8010472:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010476:	4601      	mov	r1, r0
 8010478:	3b30      	subs	r3, #48	; 0x30
 801047a:	220a      	movs	r2, #10
 801047c:	4630      	mov	r0, r6
 801047e:	f7ff ffa1 	bl	80103c4 <__multadd>
 8010482:	45a1      	cmp	r9, r4
 8010484:	d1f5      	bne.n	8010472 <__s2b+0x38>
 8010486:	eb08 0405 	add.w	r4, r8, r5
 801048a:	3c08      	subs	r4, #8
 801048c:	1b2d      	subs	r5, r5, r4
 801048e:	1963      	adds	r3, r4, r5
 8010490:	42bb      	cmp	r3, r7
 8010492:	db07      	blt.n	80104a4 <__s2b+0x6a>
 8010494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010498:	0052      	lsls	r2, r2, #1
 801049a:	3101      	adds	r1, #1
 801049c:	e7d9      	b.n	8010452 <__s2b+0x18>
 801049e:	340a      	adds	r4, #10
 80104a0:	2509      	movs	r5, #9
 80104a2:	e7f3      	b.n	801048c <__s2b+0x52>
 80104a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80104a8:	4601      	mov	r1, r0
 80104aa:	3b30      	subs	r3, #48	; 0x30
 80104ac:	220a      	movs	r2, #10
 80104ae:	4630      	mov	r0, r6
 80104b0:	f7ff ff88 	bl	80103c4 <__multadd>
 80104b4:	e7eb      	b.n	801048e <__s2b+0x54>

080104b6 <__hi0bits>:
 80104b6:	0c02      	lsrs	r2, r0, #16
 80104b8:	0412      	lsls	r2, r2, #16
 80104ba:	4603      	mov	r3, r0
 80104bc:	b9b2      	cbnz	r2, 80104ec <__hi0bits+0x36>
 80104be:	0403      	lsls	r3, r0, #16
 80104c0:	2010      	movs	r0, #16
 80104c2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80104c6:	bf04      	itt	eq
 80104c8:	021b      	lsleq	r3, r3, #8
 80104ca:	3008      	addeq	r0, #8
 80104cc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80104d0:	bf04      	itt	eq
 80104d2:	011b      	lsleq	r3, r3, #4
 80104d4:	3004      	addeq	r0, #4
 80104d6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80104da:	bf04      	itt	eq
 80104dc:	009b      	lsleq	r3, r3, #2
 80104de:	3002      	addeq	r0, #2
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	db06      	blt.n	80104f2 <__hi0bits+0x3c>
 80104e4:	005b      	lsls	r3, r3, #1
 80104e6:	d503      	bpl.n	80104f0 <__hi0bits+0x3a>
 80104e8:	3001      	adds	r0, #1
 80104ea:	4770      	bx	lr
 80104ec:	2000      	movs	r0, #0
 80104ee:	e7e8      	b.n	80104c2 <__hi0bits+0xc>
 80104f0:	2020      	movs	r0, #32
 80104f2:	4770      	bx	lr

080104f4 <__lo0bits>:
 80104f4:	6803      	ldr	r3, [r0, #0]
 80104f6:	f013 0207 	ands.w	r2, r3, #7
 80104fa:	4601      	mov	r1, r0
 80104fc:	d00b      	beq.n	8010516 <__lo0bits+0x22>
 80104fe:	07da      	lsls	r2, r3, #31
 8010500:	d423      	bmi.n	801054a <__lo0bits+0x56>
 8010502:	0798      	lsls	r0, r3, #30
 8010504:	bf49      	itett	mi
 8010506:	085b      	lsrmi	r3, r3, #1
 8010508:	089b      	lsrpl	r3, r3, #2
 801050a:	2001      	movmi	r0, #1
 801050c:	600b      	strmi	r3, [r1, #0]
 801050e:	bf5c      	itt	pl
 8010510:	600b      	strpl	r3, [r1, #0]
 8010512:	2002      	movpl	r0, #2
 8010514:	4770      	bx	lr
 8010516:	b298      	uxth	r0, r3
 8010518:	b9a8      	cbnz	r0, 8010546 <__lo0bits+0x52>
 801051a:	0c1b      	lsrs	r3, r3, #16
 801051c:	2010      	movs	r0, #16
 801051e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010522:	bf04      	itt	eq
 8010524:	0a1b      	lsreq	r3, r3, #8
 8010526:	3008      	addeq	r0, #8
 8010528:	071a      	lsls	r2, r3, #28
 801052a:	bf04      	itt	eq
 801052c:	091b      	lsreq	r3, r3, #4
 801052e:	3004      	addeq	r0, #4
 8010530:	079a      	lsls	r2, r3, #30
 8010532:	bf04      	itt	eq
 8010534:	089b      	lsreq	r3, r3, #2
 8010536:	3002      	addeq	r0, #2
 8010538:	07da      	lsls	r2, r3, #31
 801053a:	d402      	bmi.n	8010542 <__lo0bits+0x4e>
 801053c:	085b      	lsrs	r3, r3, #1
 801053e:	d006      	beq.n	801054e <__lo0bits+0x5a>
 8010540:	3001      	adds	r0, #1
 8010542:	600b      	str	r3, [r1, #0]
 8010544:	4770      	bx	lr
 8010546:	4610      	mov	r0, r2
 8010548:	e7e9      	b.n	801051e <__lo0bits+0x2a>
 801054a:	2000      	movs	r0, #0
 801054c:	4770      	bx	lr
 801054e:	2020      	movs	r0, #32
 8010550:	4770      	bx	lr

08010552 <__i2b>:
 8010552:	b510      	push	{r4, lr}
 8010554:	460c      	mov	r4, r1
 8010556:	2101      	movs	r1, #1
 8010558:	f7ff fee9 	bl	801032e <_Balloc>
 801055c:	2201      	movs	r2, #1
 801055e:	6144      	str	r4, [r0, #20]
 8010560:	6102      	str	r2, [r0, #16]
 8010562:	bd10      	pop	{r4, pc}

08010564 <__multiply>:
 8010564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010568:	4614      	mov	r4, r2
 801056a:	690a      	ldr	r2, [r1, #16]
 801056c:	6923      	ldr	r3, [r4, #16]
 801056e:	429a      	cmp	r2, r3
 8010570:	bfb8      	it	lt
 8010572:	460b      	movlt	r3, r1
 8010574:	4688      	mov	r8, r1
 8010576:	bfbc      	itt	lt
 8010578:	46a0      	movlt	r8, r4
 801057a:	461c      	movlt	r4, r3
 801057c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010580:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010584:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010588:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801058c:	eb07 0609 	add.w	r6, r7, r9
 8010590:	42b3      	cmp	r3, r6
 8010592:	bfb8      	it	lt
 8010594:	3101      	addlt	r1, #1
 8010596:	f7ff feca 	bl	801032e <_Balloc>
 801059a:	f100 0514 	add.w	r5, r0, #20
 801059e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80105a2:	462b      	mov	r3, r5
 80105a4:	2200      	movs	r2, #0
 80105a6:	4573      	cmp	r3, lr
 80105a8:	d316      	bcc.n	80105d8 <__multiply+0x74>
 80105aa:	f104 0214 	add.w	r2, r4, #20
 80105ae:	f108 0114 	add.w	r1, r8, #20
 80105b2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80105b6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80105ba:	9300      	str	r3, [sp, #0]
 80105bc:	9b00      	ldr	r3, [sp, #0]
 80105be:	9201      	str	r2, [sp, #4]
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d80c      	bhi.n	80105de <__multiply+0x7a>
 80105c4:	2e00      	cmp	r6, #0
 80105c6:	dd03      	ble.n	80105d0 <__multiply+0x6c>
 80105c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d05d      	beq.n	801068c <__multiply+0x128>
 80105d0:	6106      	str	r6, [r0, #16]
 80105d2:	b003      	add	sp, #12
 80105d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d8:	f843 2b04 	str.w	r2, [r3], #4
 80105dc:	e7e3      	b.n	80105a6 <__multiply+0x42>
 80105de:	f8b2 b000 	ldrh.w	fp, [r2]
 80105e2:	f1bb 0f00 	cmp.w	fp, #0
 80105e6:	d023      	beq.n	8010630 <__multiply+0xcc>
 80105e8:	4689      	mov	r9, r1
 80105ea:	46ac      	mov	ip, r5
 80105ec:	f04f 0800 	mov.w	r8, #0
 80105f0:	f859 4b04 	ldr.w	r4, [r9], #4
 80105f4:	f8dc a000 	ldr.w	sl, [ip]
 80105f8:	b2a3      	uxth	r3, r4
 80105fa:	fa1f fa8a 	uxth.w	sl, sl
 80105fe:	fb0b a303 	mla	r3, fp, r3, sl
 8010602:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010606:	f8dc 4000 	ldr.w	r4, [ip]
 801060a:	4443      	add	r3, r8
 801060c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010610:	fb0b 840a 	mla	r4, fp, sl, r8
 8010614:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010618:	46e2      	mov	sl, ip
 801061a:	b29b      	uxth	r3, r3
 801061c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010620:	454f      	cmp	r7, r9
 8010622:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010626:	f84a 3b04 	str.w	r3, [sl], #4
 801062a:	d82b      	bhi.n	8010684 <__multiply+0x120>
 801062c:	f8cc 8004 	str.w	r8, [ip, #4]
 8010630:	9b01      	ldr	r3, [sp, #4]
 8010632:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010636:	3204      	adds	r2, #4
 8010638:	f1ba 0f00 	cmp.w	sl, #0
 801063c:	d020      	beq.n	8010680 <__multiply+0x11c>
 801063e:	682b      	ldr	r3, [r5, #0]
 8010640:	4689      	mov	r9, r1
 8010642:	46a8      	mov	r8, r5
 8010644:	f04f 0b00 	mov.w	fp, #0
 8010648:	f8b9 c000 	ldrh.w	ip, [r9]
 801064c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010650:	fb0a 440c 	mla	r4, sl, ip, r4
 8010654:	445c      	add	r4, fp
 8010656:	46c4      	mov	ip, r8
 8010658:	b29b      	uxth	r3, r3
 801065a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801065e:	f84c 3b04 	str.w	r3, [ip], #4
 8010662:	f859 3b04 	ldr.w	r3, [r9], #4
 8010666:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801066a:	0c1b      	lsrs	r3, r3, #16
 801066c:	fb0a b303 	mla	r3, sl, r3, fp
 8010670:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010674:	454f      	cmp	r7, r9
 8010676:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801067a:	d805      	bhi.n	8010688 <__multiply+0x124>
 801067c:	f8c8 3004 	str.w	r3, [r8, #4]
 8010680:	3504      	adds	r5, #4
 8010682:	e79b      	b.n	80105bc <__multiply+0x58>
 8010684:	46d4      	mov	ip, sl
 8010686:	e7b3      	b.n	80105f0 <__multiply+0x8c>
 8010688:	46e0      	mov	r8, ip
 801068a:	e7dd      	b.n	8010648 <__multiply+0xe4>
 801068c:	3e01      	subs	r6, #1
 801068e:	e799      	b.n	80105c4 <__multiply+0x60>

08010690 <__pow5mult>:
 8010690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010694:	4615      	mov	r5, r2
 8010696:	f012 0203 	ands.w	r2, r2, #3
 801069a:	4606      	mov	r6, r0
 801069c:	460f      	mov	r7, r1
 801069e:	d007      	beq.n	80106b0 <__pow5mult+0x20>
 80106a0:	3a01      	subs	r2, #1
 80106a2:	4c21      	ldr	r4, [pc, #132]	; (8010728 <__pow5mult+0x98>)
 80106a4:	2300      	movs	r3, #0
 80106a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80106aa:	f7ff fe8b 	bl	80103c4 <__multadd>
 80106ae:	4607      	mov	r7, r0
 80106b0:	10ad      	asrs	r5, r5, #2
 80106b2:	d035      	beq.n	8010720 <__pow5mult+0x90>
 80106b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80106b6:	b93c      	cbnz	r4, 80106c8 <__pow5mult+0x38>
 80106b8:	2010      	movs	r0, #16
 80106ba:	f7ff fe13 	bl	80102e4 <malloc>
 80106be:	6270      	str	r0, [r6, #36]	; 0x24
 80106c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80106c4:	6004      	str	r4, [r0, #0]
 80106c6:	60c4      	str	r4, [r0, #12]
 80106c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80106cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80106d0:	b94c      	cbnz	r4, 80106e6 <__pow5mult+0x56>
 80106d2:	f240 2171 	movw	r1, #625	; 0x271
 80106d6:	4630      	mov	r0, r6
 80106d8:	f7ff ff3b 	bl	8010552 <__i2b>
 80106dc:	2300      	movs	r3, #0
 80106de:	f8c8 0008 	str.w	r0, [r8, #8]
 80106e2:	4604      	mov	r4, r0
 80106e4:	6003      	str	r3, [r0, #0]
 80106e6:	f04f 0800 	mov.w	r8, #0
 80106ea:	07eb      	lsls	r3, r5, #31
 80106ec:	d50a      	bpl.n	8010704 <__pow5mult+0x74>
 80106ee:	4639      	mov	r1, r7
 80106f0:	4622      	mov	r2, r4
 80106f2:	4630      	mov	r0, r6
 80106f4:	f7ff ff36 	bl	8010564 <__multiply>
 80106f8:	4639      	mov	r1, r7
 80106fa:	4681      	mov	r9, r0
 80106fc:	4630      	mov	r0, r6
 80106fe:	f7ff fe4a 	bl	8010396 <_Bfree>
 8010702:	464f      	mov	r7, r9
 8010704:	106d      	asrs	r5, r5, #1
 8010706:	d00b      	beq.n	8010720 <__pow5mult+0x90>
 8010708:	6820      	ldr	r0, [r4, #0]
 801070a:	b938      	cbnz	r0, 801071c <__pow5mult+0x8c>
 801070c:	4622      	mov	r2, r4
 801070e:	4621      	mov	r1, r4
 8010710:	4630      	mov	r0, r6
 8010712:	f7ff ff27 	bl	8010564 <__multiply>
 8010716:	6020      	str	r0, [r4, #0]
 8010718:	f8c0 8000 	str.w	r8, [r0]
 801071c:	4604      	mov	r4, r0
 801071e:	e7e4      	b.n	80106ea <__pow5mult+0x5a>
 8010720:	4638      	mov	r0, r7
 8010722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010726:	bf00      	nop
 8010728:	080144c8 	.word	0x080144c8

0801072c <__lshift>:
 801072c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010730:	460c      	mov	r4, r1
 8010732:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010736:	6923      	ldr	r3, [r4, #16]
 8010738:	6849      	ldr	r1, [r1, #4]
 801073a:	eb0a 0903 	add.w	r9, sl, r3
 801073e:	68a3      	ldr	r3, [r4, #8]
 8010740:	4607      	mov	r7, r0
 8010742:	4616      	mov	r6, r2
 8010744:	f109 0501 	add.w	r5, r9, #1
 8010748:	42ab      	cmp	r3, r5
 801074a:	db32      	blt.n	80107b2 <__lshift+0x86>
 801074c:	4638      	mov	r0, r7
 801074e:	f7ff fdee 	bl	801032e <_Balloc>
 8010752:	2300      	movs	r3, #0
 8010754:	4680      	mov	r8, r0
 8010756:	f100 0114 	add.w	r1, r0, #20
 801075a:	461a      	mov	r2, r3
 801075c:	4553      	cmp	r3, sl
 801075e:	db2b      	blt.n	80107b8 <__lshift+0x8c>
 8010760:	6920      	ldr	r0, [r4, #16]
 8010762:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010766:	f104 0314 	add.w	r3, r4, #20
 801076a:	f016 021f 	ands.w	r2, r6, #31
 801076e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010772:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010776:	d025      	beq.n	80107c4 <__lshift+0x98>
 8010778:	f1c2 0e20 	rsb	lr, r2, #32
 801077c:	2000      	movs	r0, #0
 801077e:	681e      	ldr	r6, [r3, #0]
 8010780:	468a      	mov	sl, r1
 8010782:	4096      	lsls	r6, r2
 8010784:	4330      	orrs	r0, r6
 8010786:	f84a 0b04 	str.w	r0, [sl], #4
 801078a:	f853 0b04 	ldr.w	r0, [r3], #4
 801078e:	459c      	cmp	ip, r3
 8010790:	fa20 f00e 	lsr.w	r0, r0, lr
 8010794:	d814      	bhi.n	80107c0 <__lshift+0x94>
 8010796:	6048      	str	r0, [r1, #4]
 8010798:	b108      	cbz	r0, 801079e <__lshift+0x72>
 801079a:	f109 0502 	add.w	r5, r9, #2
 801079e:	3d01      	subs	r5, #1
 80107a0:	4638      	mov	r0, r7
 80107a2:	f8c8 5010 	str.w	r5, [r8, #16]
 80107a6:	4621      	mov	r1, r4
 80107a8:	f7ff fdf5 	bl	8010396 <_Bfree>
 80107ac:	4640      	mov	r0, r8
 80107ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107b2:	3101      	adds	r1, #1
 80107b4:	005b      	lsls	r3, r3, #1
 80107b6:	e7c7      	b.n	8010748 <__lshift+0x1c>
 80107b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80107bc:	3301      	adds	r3, #1
 80107be:	e7cd      	b.n	801075c <__lshift+0x30>
 80107c0:	4651      	mov	r1, sl
 80107c2:	e7dc      	b.n	801077e <__lshift+0x52>
 80107c4:	3904      	subs	r1, #4
 80107c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80107ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80107ce:	459c      	cmp	ip, r3
 80107d0:	d8f9      	bhi.n	80107c6 <__lshift+0x9a>
 80107d2:	e7e4      	b.n	801079e <__lshift+0x72>

080107d4 <__mcmp>:
 80107d4:	6903      	ldr	r3, [r0, #16]
 80107d6:	690a      	ldr	r2, [r1, #16]
 80107d8:	1a9b      	subs	r3, r3, r2
 80107da:	b530      	push	{r4, r5, lr}
 80107dc:	d10c      	bne.n	80107f8 <__mcmp+0x24>
 80107de:	0092      	lsls	r2, r2, #2
 80107e0:	3014      	adds	r0, #20
 80107e2:	3114      	adds	r1, #20
 80107e4:	1884      	adds	r4, r0, r2
 80107e6:	4411      	add	r1, r2
 80107e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80107ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80107f0:	4295      	cmp	r5, r2
 80107f2:	d003      	beq.n	80107fc <__mcmp+0x28>
 80107f4:	d305      	bcc.n	8010802 <__mcmp+0x2e>
 80107f6:	2301      	movs	r3, #1
 80107f8:	4618      	mov	r0, r3
 80107fa:	bd30      	pop	{r4, r5, pc}
 80107fc:	42a0      	cmp	r0, r4
 80107fe:	d3f3      	bcc.n	80107e8 <__mcmp+0x14>
 8010800:	e7fa      	b.n	80107f8 <__mcmp+0x24>
 8010802:	f04f 33ff 	mov.w	r3, #4294967295
 8010806:	e7f7      	b.n	80107f8 <__mcmp+0x24>

08010808 <__mdiff>:
 8010808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801080c:	460d      	mov	r5, r1
 801080e:	4607      	mov	r7, r0
 8010810:	4611      	mov	r1, r2
 8010812:	4628      	mov	r0, r5
 8010814:	4614      	mov	r4, r2
 8010816:	f7ff ffdd 	bl	80107d4 <__mcmp>
 801081a:	1e06      	subs	r6, r0, #0
 801081c:	d108      	bne.n	8010830 <__mdiff+0x28>
 801081e:	4631      	mov	r1, r6
 8010820:	4638      	mov	r0, r7
 8010822:	f7ff fd84 	bl	801032e <_Balloc>
 8010826:	2301      	movs	r3, #1
 8010828:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801082c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010830:	bfa4      	itt	ge
 8010832:	4623      	movge	r3, r4
 8010834:	462c      	movge	r4, r5
 8010836:	4638      	mov	r0, r7
 8010838:	6861      	ldr	r1, [r4, #4]
 801083a:	bfa6      	itte	ge
 801083c:	461d      	movge	r5, r3
 801083e:	2600      	movge	r6, #0
 8010840:	2601      	movlt	r6, #1
 8010842:	f7ff fd74 	bl	801032e <_Balloc>
 8010846:	692b      	ldr	r3, [r5, #16]
 8010848:	60c6      	str	r6, [r0, #12]
 801084a:	6926      	ldr	r6, [r4, #16]
 801084c:	f105 0914 	add.w	r9, r5, #20
 8010850:	f104 0214 	add.w	r2, r4, #20
 8010854:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010858:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801085c:	f100 0514 	add.w	r5, r0, #20
 8010860:	f04f 0e00 	mov.w	lr, #0
 8010864:	f852 ab04 	ldr.w	sl, [r2], #4
 8010868:	f859 4b04 	ldr.w	r4, [r9], #4
 801086c:	fa1e f18a 	uxtah	r1, lr, sl
 8010870:	b2a3      	uxth	r3, r4
 8010872:	1ac9      	subs	r1, r1, r3
 8010874:	0c23      	lsrs	r3, r4, #16
 8010876:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801087a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801087e:	b289      	uxth	r1, r1
 8010880:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010884:	45c8      	cmp	r8, r9
 8010886:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801088a:	4694      	mov	ip, r2
 801088c:	f845 3b04 	str.w	r3, [r5], #4
 8010890:	d8e8      	bhi.n	8010864 <__mdiff+0x5c>
 8010892:	45bc      	cmp	ip, r7
 8010894:	d304      	bcc.n	80108a0 <__mdiff+0x98>
 8010896:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801089a:	b183      	cbz	r3, 80108be <__mdiff+0xb6>
 801089c:	6106      	str	r6, [r0, #16]
 801089e:	e7c5      	b.n	801082c <__mdiff+0x24>
 80108a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80108a4:	fa1e f381 	uxtah	r3, lr, r1
 80108a8:	141a      	asrs	r2, r3, #16
 80108aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80108b8:	f845 3b04 	str.w	r3, [r5], #4
 80108bc:	e7e9      	b.n	8010892 <__mdiff+0x8a>
 80108be:	3e01      	subs	r6, #1
 80108c0:	e7e9      	b.n	8010896 <__mdiff+0x8e>
	...

080108c4 <__ulp>:
 80108c4:	4b12      	ldr	r3, [pc, #72]	; (8010910 <__ulp+0x4c>)
 80108c6:	ee10 2a90 	vmov	r2, s1
 80108ca:	401a      	ands	r2, r3
 80108cc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	dd04      	ble.n	80108de <__ulp+0x1a>
 80108d4:	2000      	movs	r0, #0
 80108d6:	4619      	mov	r1, r3
 80108d8:	ec41 0b10 	vmov	d0, r0, r1
 80108dc:	4770      	bx	lr
 80108de:	425b      	negs	r3, r3
 80108e0:	151b      	asrs	r3, r3, #20
 80108e2:	2b13      	cmp	r3, #19
 80108e4:	f04f 0000 	mov.w	r0, #0
 80108e8:	f04f 0100 	mov.w	r1, #0
 80108ec:	dc04      	bgt.n	80108f8 <__ulp+0x34>
 80108ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80108f2:	fa42 f103 	asr.w	r1, r2, r3
 80108f6:	e7ef      	b.n	80108d8 <__ulp+0x14>
 80108f8:	3b14      	subs	r3, #20
 80108fa:	2b1e      	cmp	r3, #30
 80108fc:	f04f 0201 	mov.w	r2, #1
 8010900:	bfda      	itte	le
 8010902:	f1c3 031f 	rsble	r3, r3, #31
 8010906:	fa02 f303 	lslle.w	r3, r2, r3
 801090a:	4613      	movgt	r3, r2
 801090c:	4618      	mov	r0, r3
 801090e:	e7e3      	b.n	80108d8 <__ulp+0x14>
 8010910:	7ff00000 	.word	0x7ff00000

08010914 <__b2d>:
 8010914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010916:	6905      	ldr	r5, [r0, #16]
 8010918:	f100 0714 	add.w	r7, r0, #20
 801091c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010920:	1f2e      	subs	r6, r5, #4
 8010922:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010926:	4620      	mov	r0, r4
 8010928:	f7ff fdc5 	bl	80104b6 <__hi0bits>
 801092c:	f1c0 0320 	rsb	r3, r0, #32
 8010930:	280a      	cmp	r0, #10
 8010932:	600b      	str	r3, [r1, #0]
 8010934:	f8df c074 	ldr.w	ip, [pc, #116]	; 80109ac <__b2d+0x98>
 8010938:	dc14      	bgt.n	8010964 <__b2d+0x50>
 801093a:	f1c0 0e0b 	rsb	lr, r0, #11
 801093e:	fa24 f10e 	lsr.w	r1, r4, lr
 8010942:	42b7      	cmp	r7, r6
 8010944:	ea41 030c 	orr.w	r3, r1, ip
 8010948:	bf34      	ite	cc
 801094a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801094e:	2100      	movcs	r1, #0
 8010950:	3015      	adds	r0, #21
 8010952:	fa04 f000 	lsl.w	r0, r4, r0
 8010956:	fa21 f10e 	lsr.w	r1, r1, lr
 801095a:	ea40 0201 	orr.w	r2, r0, r1
 801095e:	ec43 2b10 	vmov	d0, r2, r3
 8010962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010964:	42b7      	cmp	r7, r6
 8010966:	bf3a      	itte	cc
 8010968:	f1a5 0608 	subcc.w	r6, r5, #8
 801096c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010970:	2100      	movcs	r1, #0
 8010972:	380b      	subs	r0, #11
 8010974:	d015      	beq.n	80109a2 <__b2d+0x8e>
 8010976:	4084      	lsls	r4, r0
 8010978:	f1c0 0520 	rsb	r5, r0, #32
 801097c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010980:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8010984:	42be      	cmp	r6, r7
 8010986:	fa21 fc05 	lsr.w	ip, r1, r5
 801098a:	ea44 030c 	orr.w	r3, r4, ip
 801098e:	bf8c      	ite	hi
 8010990:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010994:	2400      	movls	r4, #0
 8010996:	fa01 f000 	lsl.w	r0, r1, r0
 801099a:	40ec      	lsrs	r4, r5
 801099c:	ea40 0204 	orr.w	r2, r0, r4
 80109a0:	e7dd      	b.n	801095e <__b2d+0x4a>
 80109a2:	ea44 030c 	orr.w	r3, r4, ip
 80109a6:	460a      	mov	r2, r1
 80109a8:	e7d9      	b.n	801095e <__b2d+0x4a>
 80109aa:	bf00      	nop
 80109ac:	3ff00000 	.word	0x3ff00000

080109b0 <__d2b>:
 80109b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80109b4:	460e      	mov	r6, r1
 80109b6:	2101      	movs	r1, #1
 80109b8:	ec59 8b10 	vmov	r8, r9, d0
 80109bc:	4615      	mov	r5, r2
 80109be:	f7ff fcb6 	bl	801032e <_Balloc>
 80109c2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80109c6:	4607      	mov	r7, r0
 80109c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80109cc:	bb34      	cbnz	r4, 8010a1c <__d2b+0x6c>
 80109ce:	9301      	str	r3, [sp, #4]
 80109d0:	f1b8 0300 	subs.w	r3, r8, #0
 80109d4:	d027      	beq.n	8010a26 <__d2b+0x76>
 80109d6:	a802      	add	r0, sp, #8
 80109d8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80109dc:	f7ff fd8a 	bl	80104f4 <__lo0bits>
 80109e0:	9900      	ldr	r1, [sp, #0]
 80109e2:	b1f0      	cbz	r0, 8010a22 <__d2b+0x72>
 80109e4:	9a01      	ldr	r2, [sp, #4]
 80109e6:	f1c0 0320 	rsb	r3, r0, #32
 80109ea:	fa02 f303 	lsl.w	r3, r2, r3
 80109ee:	430b      	orrs	r3, r1
 80109f0:	40c2      	lsrs	r2, r0
 80109f2:	617b      	str	r3, [r7, #20]
 80109f4:	9201      	str	r2, [sp, #4]
 80109f6:	9b01      	ldr	r3, [sp, #4]
 80109f8:	61bb      	str	r3, [r7, #24]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	bf14      	ite	ne
 80109fe:	2102      	movne	r1, #2
 8010a00:	2101      	moveq	r1, #1
 8010a02:	6139      	str	r1, [r7, #16]
 8010a04:	b1c4      	cbz	r4, 8010a38 <__d2b+0x88>
 8010a06:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010a0a:	4404      	add	r4, r0
 8010a0c:	6034      	str	r4, [r6, #0]
 8010a0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010a12:	6028      	str	r0, [r5, #0]
 8010a14:	4638      	mov	r0, r7
 8010a16:	b003      	add	sp, #12
 8010a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a20:	e7d5      	b.n	80109ce <__d2b+0x1e>
 8010a22:	6179      	str	r1, [r7, #20]
 8010a24:	e7e7      	b.n	80109f6 <__d2b+0x46>
 8010a26:	a801      	add	r0, sp, #4
 8010a28:	f7ff fd64 	bl	80104f4 <__lo0bits>
 8010a2c:	9b01      	ldr	r3, [sp, #4]
 8010a2e:	617b      	str	r3, [r7, #20]
 8010a30:	2101      	movs	r1, #1
 8010a32:	6139      	str	r1, [r7, #16]
 8010a34:	3020      	adds	r0, #32
 8010a36:	e7e5      	b.n	8010a04 <__d2b+0x54>
 8010a38:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010a3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010a40:	6030      	str	r0, [r6, #0]
 8010a42:	6918      	ldr	r0, [r3, #16]
 8010a44:	f7ff fd37 	bl	80104b6 <__hi0bits>
 8010a48:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010a4c:	e7e1      	b.n	8010a12 <__d2b+0x62>

08010a4e <__ratio>:
 8010a4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a52:	4688      	mov	r8, r1
 8010a54:	4669      	mov	r1, sp
 8010a56:	4681      	mov	r9, r0
 8010a58:	f7ff ff5c 	bl	8010914 <__b2d>
 8010a5c:	a901      	add	r1, sp, #4
 8010a5e:	4640      	mov	r0, r8
 8010a60:	ec57 6b10 	vmov	r6, r7, d0
 8010a64:	f7ff ff56 	bl	8010914 <__b2d>
 8010a68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010a6c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010a70:	eba3 0c02 	sub.w	ip, r3, r2
 8010a74:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010a78:	1a9b      	subs	r3, r3, r2
 8010a7a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010a7e:	ec5b ab10 	vmov	sl, fp, d0
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	bfce      	itee	gt
 8010a86:	463a      	movgt	r2, r7
 8010a88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010a8c:	465a      	movle	r2, fp
 8010a8e:	4659      	mov	r1, fp
 8010a90:	463d      	mov	r5, r7
 8010a92:	bfd4      	ite	le
 8010a94:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8010a98:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8010a9c:	4630      	mov	r0, r6
 8010a9e:	ee10 2a10 	vmov	r2, s0
 8010aa2:	460b      	mov	r3, r1
 8010aa4:	4629      	mov	r1, r5
 8010aa6:	f7ef fed1 	bl	800084c <__aeabi_ddiv>
 8010aaa:	ec41 0b10 	vmov	d0, r0, r1
 8010aae:	b003      	add	sp, #12
 8010ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ab4 <__copybits>:
 8010ab4:	3901      	subs	r1, #1
 8010ab6:	b510      	push	{r4, lr}
 8010ab8:	1149      	asrs	r1, r1, #5
 8010aba:	6914      	ldr	r4, [r2, #16]
 8010abc:	3101      	adds	r1, #1
 8010abe:	f102 0314 	add.w	r3, r2, #20
 8010ac2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010ac6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010aca:	42a3      	cmp	r3, r4
 8010acc:	4602      	mov	r2, r0
 8010ace:	d303      	bcc.n	8010ad8 <__copybits+0x24>
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	428a      	cmp	r2, r1
 8010ad4:	d305      	bcc.n	8010ae2 <__copybits+0x2e>
 8010ad6:	bd10      	pop	{r4, pc}
 8010ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010adc:	f840 2b04 	str.w	r2, [r0], #4
 8010ae0:	e7f3      	b.n	8010aca <__copybits+0x16>
 8010ae2:	f842 3b04 	str.w	r3, [r2], #4
 8010ae6:	e7f4      	b.n	8010ad2 <__copybits+0x1e>

08010ae8 <__any_on>:
 8010ae8:	f100 0214 	add.w	r2, r0, #20
 8010aec:	6900      	ldr	r0, [r0, #16]
 8010aee:	114b      	asrs	r3, r1, #5
 8010af0:	4298      	cmp	r0, r3
 8010af2:	b510      	push	{r4, lr}
 8010af4:	db11      	blt.n	8010b1a <__any_on+0x32>
 8010af6:	dd0a      	ble.n	8010b0e <__any_on+0x26>
 8010af8:	f011 011f 	ands.w	r1, r1, #31
 8010afc:	d007      	beq.n	8010b0e <__any_on+0x26>
 8010afe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010b02:	fa24 f001 	lsr.w	r0, r4, r1
 8010b06:	fa00 f101 	lsl.w	r1, r0, r1
 8010b0a:	428c      	cmp	r4, r1
 8010b0c:	d10b      	bne.n	8010b26 <__any_on+0x3e>
 8010b0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010b12:	4293      	cmp	r3, r2
 8010b14:	d803      	bhi.n	8010b1e <__any_on+0x36>
 8010b16:	2000      	movs	r0, #0
 8010b18:	bd10      	pop	{r4, pc}
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	e7f7      	b.n	8010b0e <__any_on+0x26>
 8010b1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010b22:	2900      	cmp	r1, #0
 8010b24:	d0f5      	beq.n	8010b12 <__any_on+0x2a>
 8010b26:	2001      	movs	r0, #1
 8010b28:	e7f6      	b.n	8010b18 <__any_on+0x30>

08010b2a <_calloc_r>:
 8010b2a:	b538      	push	{r3, r4, r5, lr}
 8010b2c:	fb02 f401 	mul.w	r4, r2, r1
 8010b30:	4621      	mov	r1, r4
 8010b32:	f000 f857 	bl	8010be4 <_malloc_r>
 8010b36:	4605      	mov	r5, r0
 8010b38:	b118      	cbz	r0, 8010b42 <_calloc_r+0x18>
 8010b3a:	4622      	mov	r2, r4
 8010b3c:	2100      	movs	r1, #0
 8010b3e:	f7fc fd01 	bl	800d544 <memset>
 8010b42:	4628      	mov	r0, r5
 8010b44:	bd38      	pop	{r3, r4, r5, pc}
	...

08010b48 <_free_r>:
 8010b48:	b538      	push	{r3, r4, r5, lr}
 8010b4a:	4605      	mov	r5, r0
 8010b4c:	2900      	cmp	r1, #0
 8010b4e:	d045      	beq.n	8010bdc <_free_r+0x94>
 8010b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b54:	1f0c      	subs	r4, r1, #4
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	bfb8      	it	lt
 8010b5a:	18e4      	addlt	r4, r4, r3
 8010b5c:	f000 fa36 	bl	8010fcc <__malloc_lock>
 8010b60:	4a1f      	ldr	r2, [pc, #124]	; (8010be0 <_free_r+0x98>)
 8010b62:	6813      	ldr	r3, [r2, #0]
 8010b64:	4610      	mov	r0, r2
 8010b66:	b933      	cbnz	r3, 8010b76 <_free_r+0x2e>
 8010b68:	6063      	str	r3, [r4, #4]
 8010b6a:	6014      	str	r4, [r2, #0]
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b72:	f000 ba2c 	b.w	8010fce <__malloc_unlock>
 8010b76:	42a3      	cmp	r3, r4
 8010b78:	d90c      	bls.n	8010b94 <_free_r+0x4c>
 8010b7a:	6821      	ldr	r1, [r4, #0]
 8010b7c:	1862      	adds	r2, r4, r1
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	bf04      	itt	eq
 8010b82:	681a      	ldreq	r2, [r3, #0]
 8010b84:	685b      	ldreq	r3, [r3, #4]
 8010b86:	6063      	str	r3, [r4, #4]
 8010b88:	bf04      	itt	eq
 8010b8a:	1852      	addeq	r2, r2, r1
 8010b8c:	6022      	streq	r2, [r4, #0]
 8010b8e:	6004      	str	r4, [r0, #0]
 8010b90:	e7ec      	b.n	8010b6c <_free_r+0x24>
 8010b92:	4613      	mov	r3, r2
 8010b94:	685a      	ldr	r2, [r3, #4]
 8010b96:	b10a      	cbz	r2, 8010b9c <_free_r+0x54>
 8010b98:	42a2      	cmp	r2, r4
 8010b9a:	d9fa      	bls.n	8010b92 <_free_r+0x4a>
 8010b9c:	6819      	ldr	r1, [r3, #0]
 8010b9e:	1858      	adds	r0, r3, r1
 8010ba0:	42a0      	cmp	r0, r4
 8010ba2:	d10b      	bne.n	8010bbc <_free_r+0x74>
 8010ba4:	6820      	ldr	r0, [r4, #0]
 8010ba6:	4401      	add	r1, r0
 8010ba8:	1858      	adds	r0, r3, r1
 8010baa:	4282      	cmp	r2, r0
 8010bac:	6019      	str	r1, [r3, #0]
 8010bae:	d1dd      	bne.n	8010b6c <_free_r+0x24>
 8010bb0:	6810      	ldr	r0, [r2, #0]
 8010bb2:	6852      	ldr	r2, [r2, #4]
 8010bb4:	605a      	str	r2, [r3, #4]
 8010bb6:	4401      	add	r1, r0
 8010bb8:	6019      	str	r1, [r3, #0]
 8010bba:	e7d7      	b.n	8010b6c <_free_r+0x24>
 8010bbc:	d902      	bls.n	8010bc4 <_free_r+0x7c>
 8010bbe:	230c      	movs	r3, #12
 8010bc0:	602b      	str	r3, [r5, #0]
 8010bc2:	e7d3      	b.n	8010b6c <_free_r+0x24>
 8010bc4:	6820      	ldr	r0, [r4, #0]
 8010bc6:	1821      	adds	r1, r4, r0
 8010bc8:	428a      	cmp	r2, r1
 8010bca:	bf04      	itt	eq
 8010bcc:	6811      	ldreq	r1, [r2, #0]
 8010bce:	6852      	ldreq	r2, [r2, #4]
 8010bd0:	6062      	str	r2, [r4, #4]
 8010bd2:	bf04      	itt	eq
 8010bd4:	1809      	addeq	r1, r1, r0
 8010bd6:	6021      	streq	r1, [r4, #0]
 8010bd8:	605c      	str	r4, [r3, #4]
 8010bda:	e7c7      	b.n	8010b6c <_free_r+0x24>
 8010bdc:	bd38      	pop	{r3, r4, r5, pc}
 8010bde:	bf00      	nop
 8010be0:	2000046c 	.word	0x2000046c

08010be4 <_malloc_r>:
 8010be4:	b570      	push	{r4, r5, r6, lr}
 8010be6:	1ccd      	adds	r5, r1, #3
 8010be8:	f025 0503 	bic.w	r5, r5, #3
 8010bec:	3508      	adds	r5, #8
 8010bee:	2d0c      	cmp	r5, #12
 8010bf0:	bf38      	it	cc
 8010bf2:	250c      	movcc	r5, #12
 8010bf4:	2d00      	cmp	r5, #0
 8010bf6:	4606      	mov	r6, r0
 8010bf8:	db01      	blt.n	8010bfe <_malloc_r+0x1a>
 8010bfa:	42a9      	cmp	r1, r5
 8010bfc:	d903      	bls.n	8010c06 <_malloc_r+0x22>
 8010bfe:	230c      	movs	r3, #12
 8010c00:	6033      	str	r3, [r6, #0]
 8010c02:	2000      	movs	r0, #0
 8010c04:	bd70      	pop	{r4, r5, r6, pc}
 8010c06:	f000 f9e1 	bl	8010fcc <__malloc_lock>
 8010c0a:	4a21      	ldr	r2, [pc, #132]	; (8010c90 <_malloc_r+0xac>)
 8010c0c:	6814      	ldr	r4, [r2, #0]
 8010c0e:	4621      	mov	r1, r4
 8010c10:	b991      	cbnz	r1, 8010c38 <_malloc_r+0x54>
 8010c12:	4c20      	ldr	r4, [pc, #128]	; (8010c94 <_malloc_r+0xb0>)
 8010c14:	6823      	ldr	r3, [r4, #0]
 8010c16:	b91b      	cbnz	r3, 8010c20 <_malloc_r+0x3c>
 8010c18:	4630      	mov	r0, r6
 8010c1a:	f000 f98f 	bl	8010f3c <_sbrk_r>
 8010c1e:	6020      	str	r0, [r4, #0]
 8010c20:	4629      	mov	r1, r5
 8010c22:	4630      	mov	r0, r6
 8010c24:	f000 f98a 	bl	8010f3c <_sbrk_r>
 8010c28:	1c43      	adds	r3, r0, #1
 8010c2a:	d124      	bne.n	8010c76 <_malloc_r+0x92>
 8010c2c:	230c      	movs	r3, #12
 8010c2e:	6033      	str	r3, [r6, #0]
 8010c30:	4630      	mov	r0, r6
 8010c32:	f000 f9cc 	bl	8010fce <__malloc_unlock>
 8010c36:	e7e4      	b.n	8010c02 <_malloc_r+0x1e>
 8010c38:	680b      	ldr	r3, [r1, #0]
 8010c3a:	1b5b      	subs	r3, r3, r5
 8010c3c:	d418      	bmi.n	8010c70 <_malloc_r+0x8c>
 8010c3e:	2b0b      	cmp	r3, #11
 8010c40:	d90f      	bls.n	8010c62 <_malloc_r+0x7e>
 8010c42:	600b      	str	r3, [r1, #0]
 8010c44:	50cd      	str	r5, [r1, r3]
 8010c46:	18cc      	adds	r4, r1, r3
 8010c48:	4630      	mov	r0, r6
 8010c4a:	f000 f9c0 	bl	8010fce <__malloc_unlock>
 8010c4e:	f104 000b 	add.w	r0, r4, #11
 8010c52:	1d23      	adds	r3, r4, #4
 8010c54:	f020 0007 	bic.w	r0, r0, #7
 8010c58:	1ac3      	subs	r3, r0, r3
 8010c5a:	d0d3      	beq.n	8010c04 <_malloc_r+0x20>
 8010c5c:	425a      	negs	r2, r3
 8010c5e:	50e2      	str	r2, [r4, r3]
 8010c60:	e7d0      	b.n	8010c04 <_malloc_r+0x20>
 8010c62:	428c      	cmp	r4, r1
 8010c64:	684b      	ldr	r3, [r1, #4]
 8010c66:	bf16      	itet	ne
 8010c68:	6063      	strne	r3, [r4, #4]
 8010c6a:	6013      	streq	r3, [r2, #0]
 8010c6c:	460c      	movne	r4, r1
 8010c6e:	e7eb      	b.n	8010c48 <_malloc_r+0x64>
 8010c70:	460c      	mov	r4, r1
 8010c72:	6849      	ldr	r1, [r1, #4]
 8010c74:	e7cc      	b.n	8010c10 <_malloc_r+0x2c>
 8010c76:	1cc4      	adds	r4, r0, #3
 8010c78:	f024 0403 	bic.w	r4, r4, #3
 8010c7c:	42a0      	cmp	r0, r4
 8010c7e:	d005      	beq.n	8010c8c <_malloc_r+0xa8>
 8010c80:	1a21      	subs	r1, r4, r0
 8010c82:	4630      	mov	r0, r6
 8010c84:	f000 f95a 	bl	8010f3c <_sbrk_r>
 8010c88:	3001      	adds	r0, #1
 8010c8a:	d0cf      	beq.n	8010c2c <_malloc_r+0x48>
 8010c8c:	6025      	str	r5, [r4, #0]
 8010c8e:	e7db      	b.n	8010c48 <_malloc_r+0x64>
 8010c90:	2000046c 	.word	0x2000046c
 8010c94:	20000470 	.word	0x20000470

08010c98 <__ssputs_r>:
 8010c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c9c:	688e      	ldr	r6, [r1, #8]
 8010c9e:	429e      	cmp	r6, r3
 8010ca0:	4682      	mov	sl, r0
 8010ca2:	460c      	mov	r4, r1
 8010ca4:	4690      	mov	r8, r2
 8010ca6:	4699      	mov	r9, r3
 8010ca8:	d837      	bhi.n	8010d1a <__ssputs_r+0x82>
 8010caa:	898a      	ldrh	r2, [r1, #12]
 8010cac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010cb0:	d031      	beq.n	8010d16 <__ssputs_r+0x7e>
 8010cb2:	6825      	ldr	r5, [r4, #0]
 8010cb4:	6909      	ldr	r1, [r1, #16]
 8010cb6:	1a6f      	subs	r7, r5, r1
 8010cb8:	6965      	ldr	r5, [r4, #20]
 8010cba:	2302      	movs	r3, #2
 8010cbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010cc0:	fb95 f5f3 	sdiv	r5, r5, r3
 8010cc4:	f109 0301 	add.w	r3, r9, #1
 8010cc8:	443b      	add	r3, r7
 8010cca:	429d      	cmp	r5, r3
 8010ccc:	bf38      	it	cc
 8010cce:	461d      	movcc	r5, r3
 8010cd0:	0553      	lsls	r3, r2, #21
 8010cd2:	d530      	bpl.n	8010d36 <__ssputs_r+0x9e>
 8010cd4:	4629      	mov	r1, r5
 8010cd6:	f7ff ff85 	bl	8010be4 <_malloc_r>
 8010cda:	4606      	mov	r6, r0
 8010cdc:	b950      	cbnz	r0, 8010cf4 <__ssputs_r+0x5c>
 8010cde:	230c      	movs	r3, #12
 8010ce0:	f8ca 3000 	str.w	r3, [sl]
 8010ce4:	89a3      	ldrh	r3, [r4, #12]
 8010ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cea:	81a3      	strh	r3, [r4, #12]
 8010cec:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cf4:	463a      	mov	r2, r7
 8010cf6:	6921      	ldr	r1, [r4, #16]
 8010cf8:	f7ff fb0e 	bl	8010318 <memcpy>
 8010cfc:	89a3      	ldrh	r3, [r4, #12]
 8010cfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d06:	81a3      	strh	r3, [r4, #12]
 8010d08:	6126      	str	r6, [r4, #16]
 8010d0a:	6165      	str	r5, [r4, #20]
 8010d0c:	443e      	add	r6, r7
 8010d0e:	1bed      	subs	r5, r5, r7
 8010d10:	6026      	str	r6, [r4, #0]
 8010d12:	60a5      	str	r5, [r4, #8]
 8010d14:	464e      	mov	r6, r9
 8010d16:	454e      	cmp	r6, r9
 8010d18:	d900      	bls.n	8010d1c <__ssputs_r+0x84>
 8010d1a:	464e      	mov	r6, r9
 8010d1c:	4632      	mov	r2, r6
 8010d1e:	4641      	mov	r1, r8
 8010d20:	6820      	ldr	r0, [r4, #0]
 8010d22:	f000 f93a 	bl	8010f9a <memmove>
 8010d26:	68a3      	ldr	r3, [r4, #8]
 8010d28:	1b9b      	subs	r3, r3, r6
 8010d2a:	60a3      	str	r3, [r4, #8]
 8010d2c:	6823      	ldr	r3, [r4, #0]
 8010d2e:	441e      	add	r6, r3
 8010d30:	6026      	str	r6, [r4, #0]
 8010d32:	2000      	movs	r0, #0
 8010d34:	e7dc      	b.n	8010cf0 <__ssputs_r+0x58>
 8010d36:	462a      	mov	r2, r5
 8010d38:	f000 f94a 	bl	8010fd0 <_realloc_r>
 8010d3c:	4606      	mov	r6, r0
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	d1e2      	bne.n	8010d08 <__ssputs_r+0x70>
 8010d42:	6921      	ldr	r1, [r4, #16]
 8010d44:	4650      	mov	r0, sl
 8010d46:	f7ff feff 	bl	8010b48 <_free_r>
 8010d4a:	e7c8      	b.n	8010cde <__ssputs_r+0x46>

08010d4c <_svfiprintf_r>:
 8010d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d50:	461d      	mov	r5, r3
 8010d52:	898b      	ldrh	r3, [r1, #12]
 8010d54:	061f      	lsls	r7, r3, #24
 8010d56:	b09d      	sub	sp, #116	; 0x74
 8010d58:	4680      	mov	r8, r0
 8010d5a:	460c      	mov	r4, r1
 8010d5c:	4616      	mov	r6, r2
 8010d5e:	d50f      	bpl.n	8010d80 <_svfiprintf_r+0x34>
 8010d60:	690b      	ldr	r3, [r1, #16]
 8010d62:	b96b      	cbnz	r3, 8010d80 <_svfiprintf_r+0x34>
 8010d64:	2140      	movs	r1, #64	; 0x40
 8010d66:	f7ff ff3d 	bl	8010be4 <_malloc_r>
 8010d6a:	6020      	str	r0, [r4, #0]
 8010d6c:	6120      	str	r0, [r4, #16]
 8010d6e:	b928      	cbnz	r0, 8010d7c <_svfiprintf_r+0x30>
 8010d70:	230c      	movs	r3, #12
 8010d72:	f8c8 3000 	str.w	r3, [r8]
 8010d76:	f04f 30ff 	mov.w	r0, #4294967295
 8010d7a:	e0c8      	b.n	8010f0e <_svfiprintf_r+0x1c2>
 8010d7c:	2340      	movs	r3, #64	; 0x40
 8010d7e:	6163      	str	r3, [r4, #20]
 8010d80:	2300      	movs	r3, #0
 8010d82:	9309      	str	r3, [sp, #36]	; 0x24
 8010d84:	2320      	movs	r3, #32
 8010d86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d8a:	2330      	movs	r3, #48	; 0x30
 8010d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d90:	9503      	str	r5, [sp, #12]
 8010d92:	f04f 0b01 	mov.w	fp, #1
 8010d96:	4637      	mov	r7, r6
 8010d98:	463d      	mov	r5, r7
 8010d9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010d9e:	b10b      	cbz	r3, 8010da4 <_svfiprintf_r+0x58>
 8010da0:	2b25      	cmp	r3, #37	; 0x25
 8010da2:	d13e      	bne.n	8010e22 <_svfiprintf_r+0xd6>
 8010da4:	ebb7 0a06 	subs.w	sl, r7, r6
 8010da8:	d00b      	beq.n	8010dc2 <_svfiprintf_r+0x76>
 8010daa:	4653      	mov	r3, sl
 8010dac:	4632      	mov	r2, r6
 8010dae:	4621      	mov	r1, r4
 8010db0:	4640      	mov	r0, r8
 8010db2:	f7ff ff71 	bl	8010c98 <__ssputs_r>
 8010db6:	3001      	adds	r0, #1
 8010db8:	f000 80a4 	beq.w	8010f04 <_svfiprintf_r+0x1b8>
 8010dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dbe:	4453      	add	r3, sl
 8010dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8010dc2:	783b      	ldrb	r3, [r7, #0]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	f000 809d 	beq.w	8010f04 <_svfiprintf_r+0x1b8>
 8010dca:	2300      	movs	r3, #0
 8010dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8010dd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dd4:	9304      	str	r3, [sp, #16]
 8010dd6:	9307      	str	r3, [sp, #28]
 8010dd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ddc:	931a      	str	r3, [sp, #104]	; 0x68
 8010dde:	462f      	mov	r7, r5
 8010de0:	2205      	movs	r2, #5
 8010de2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010de6:	4850      	ldr	r0, [pc, #320]	; (8010f28 <_svfiprintf_r+0x1dc>)
 8010de8:	f7ef f9fa 	bl	80001e0 <memchr>
 8010dec:	9b04      	ldr	r3, [sp, #16]
 8010dee:	b9d0      	cbnz	r0, 8010e26 <_svfiprintf_r+0xda>
 8010df0:	06d9      	lsls	r1, r3, #27
 8010df2:	bf44      	itt	mi
 8010df4:	2220      	movmi	r2, #32
 8010df6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010dfa:	071a      	lsls	r2, r3, #28
 8010dfc:	bf44      	itt	mi
 8010dfe:	222b      	movmi	r2, #43	; 0x2b
 8010e00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010e04:	782a      	ldrb	r2, [r5, #0]
 8010e06:	2a2a      	cmp	r2, #42	; 0x2a
 8010e08:	d015      	beq.n	8010e36 <_svfiprintf_r+0xea>
 8010e0a:	9a07      	ldr	r2, [sp, #28]
 8010e0c:	462f      	mov	r7, r5
 8010e0e:	2000      	movs	r0, #0
 8010e10:	250a      	movs	r5, #10
 8010e12:	4639      	mov	r1, r7
 8010e14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e18:	3b30      	subs	r3, #48	; 0x30
 8010e1a:	2b09      	cmp	r3, #9
 8010e1c:	d94d      	bls.n	8010eba <_svfiprintf_r+0x16e>
 8010e1e:	b1b8      	cbz	r0, 8010e50 <_svfiprintf_r+0x104>
 8010e20:	e00f      	b.n	8010e42 <_svfiprintf_r+0xf6>
 8010e22:	462f      	mov	r7, r5
 8010e24:	e7b8      	b.n	8010d98 <_svfiprintf_r+0x4c>
 8010e26:	4a40      	ldr	r2, [pc, #256]	; (8010f28 <_svfiprintf_r+0x1dc>)
 8010e28:	1a80      	subs	r0, r0, r2
 8010e2a:	fa0b f000 	lsl.w	r0, fp, r0
 8010e2e:	4318      	orrs	r0, r3
 8010e30:	9004      	str	r0, [sp, #16]
 8010e32:	463d      	mov	r5, r7
 8010e34:	e7d3      	b.n	8010dde <_svfiprintf_r+0x92>
 8010e36:	9a03      	ldr	r2, [sp, #12]
 8010e38:	1d11      	adds	r1, r2, #4
 8010e3a:	6812      	ldr	r2, [r2, #0]
 8010e3c:	9103      	str	r1, [sp, #12]
 8010e3e:	2a00      	cmp	r2, #0
 8010e40:	db01      	blt.n	8010e46 <_svfiprintf_r+0xfa>
 8010e42:	9207      	str	r2, [sp, #28]
 8010e44:	e004      	b.n	8010e50 <_svfiprintf_r+0x104>
 8010e46:	4252      	negs	r2, r2
 8010e48:	f043 0302 	orr.w	r3, r3, #2
 8010e4c:	9207      	str	r2, [sp, #28]
 8010e4e:	9304      	str	r3, [sp, #16]
 8010e50:	783b      	ldrb	r3, [r7, #0]
 8010e52:	2b2e      	cmp	r3, #46	; 0x2e
 8010e54:	d10c      	bne.n	8010e70 <_svfiprintf_r+0x124>
 8010e56:	787b      	ldrb	r3, [r7, #1]
 8010e58:	2b2a      	cmp	r3, #42	; 0x2a
 8010e5a:	d133      	bne.n	8010ec4 <_svfiprintf_r+0x178>
 8010e5c:	9b03      	ldr	r3, [sp, #12]
 8010e5e:	1d1a      	adds	r2, r3, #4
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	9203      	str	r2, [sp, #12]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	bfb8      	it	lt
 8010e68:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e6c:	3702      	adds	r7, #2
 8010e6e:	9305      	str	r3, [sp, #20]
 8010e70:	4d2e      	ldr	r5, [pc, #184]	; (8010f2c <_svfiprintf_r+0x1e0>)
 8010e72:	7839      	ldrb	r1, [r7, #0]
 8010e74:	2203      	movs	r2, #3
 8010e76:	4628      	mov	r0, r5
 8010e78:	f7ef f9b2 	bl	80001e0 <memchr>
 8010e7c:	b138      	cbz	r0, 8010e8e <_svfiprintf_r+0x142>
 8010e7e:	2340      	movs	r3, #64	; 0x40
 8010e80:	1b40      	subs	r0, r0, r5
 8010e82:	fa03 f000 	lsl.w	r0, r3, r0
 8010e86:	9b04      	ldr	r3, [sp, #16]
 8010e88:	4303      	orrs	r3, r0
 8010e8a:	3701      	adds	r7, #1
 8010e8c:	9304      	str	r3, [sp, #16]
 8010e8e:	7839      	ldrb	r1, [r7, #0]
 8010e90:	4827      	ldr	r0, [pc, #156]	; (8010f30 <_svfiprintf_r+0x1e4>)
 8010e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e96:	2206      	movs	r2, #6
 8010e98:	1c7e      	adds	r6, r7, #1
 8010e9a:	f7ef f9a1 	bl	80001e0 <memchr>
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	d038      	beq.n	8010f14 <_svfiprintf_r+0x1c8>
 8010ea2:	4b24      	ldr	r3, [pc, #144]	; (8010f34 <_svfiprintf_r+0x1e8>)
 8010ea4:	bb13      	cbnz	r3, 8010eec <_svfiprintf_r+0x1a0>
 8010ea6:	9b03      	ldr	r3, [sp, #12]
 8010ea8:	3307      	adds	r3, #7
 8010eaa:	f023 0307 	bic.w	r3, r3, #7
 8010eae:	3308      	adds	r3, #8
 8010eb0:	9303      	str	r3, [sp, #12]
 8010eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eb4:	444b      	add	r3, r9
 8010eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8010eb8:	e76d      	b.n	8010d96 <_svfiprintf_r+0x4a>
 8010eba:	fb05 3202 	mla	r2, r5, r2, r3
 8010ebe:	2001      	movs	r0, #1
 8010ec0:	460f      	mov	r7, r1
 8010ec2:	e7a6      	b.n	8010e12 <_svfiprintf_r+0xc6>
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	3701      	adds	r7, #1
 8010ec8:	9305      	str	r3, [sp, #20]
 8010eca:	4619      	mov	r1, r3
 8010ecc:	250a      	movs	r5, #10
 8010ece:	4638      	mov	r0, r7
 8010ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ed4:	3a30      	subs	r2, #48	; 0x30
 8010ed6:	2a09      	cmp	r2, #9
 8010ed8:	d903      	bls.n	8010ee2 <_svfiprintf_r+0x196>
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d0c8      	beq.n	8010e70 <_svfiprintf_r+0x124>
 8010ede:	9105      	str	r1, [sp, #20]
 8010ee0:	e7c6      	b.n	8010e70 <_svfiprintf_r+0x124>
 8010ee2:	fb05 2101 	mla	r1, r5, r1, r2
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	4607      	mov	r7, r0
 8010eea:	e7f0      	b.n	8010ece <_svfiprintf_r+0x182>
 8010eec:	ab03      	add	r3, sp, #12
 8010eee:	9300      	str	r3, [sp, #0]
 8010ef0:	4622      	mov	r2, r4
 8010ef2:	4b11      	ldr	r3, [pc, #68]	; (8010f38 <_svfiprintf_r+0x1ec>)
 8010ef4:	a904      	add	r1, sp, #16
 8010ef6:	4640      	mov	r0, r8
 8010ef8:	f7fc fbc0 	bl	800d67c <_printf_float>
 8010efc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010f00:	4681      	mov	r9, r0
 8010f02:	d1d6      	bne.n	8010eb2 <_svfiprintf_r+0x166>
 8010f04:	89a3      	ldrh	r3, [r4, #12]
 8010f06:	065b      	lsls	r3, r3, #25
 8010f08:	f53f af35 	bmi.w	8010d76 <_svfiprintf_r+0x2a>
 8010f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f0e:	b01d      	add	sp, #116	; 0x74
 8010f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f14:	ab03      	add	r3, sp, #12
 8010f16:	9300      	str	r3, [sp, #0]
 8010f18:	4622      	mov	r2, r4
 8010f1a:	4b07      	ldr	r3, [pc, #28]	; (8010f38 <_svfiprintf_r+0x1ec>)
 8010f1c:	a904      	add	r1, sp, #16
 8010f1e:	4640      	mov	r0, r8
 8010f20:	f7fc fe62 	bl	800dbe8 <_printf_i>
 8010f24:	e7ea      	b.n	8010efc <_svfiprintf_r+0x1b0>
 8010f26:	bf00      	nop
 8010f28:	080144d4 	.word	0x080144d4
 8010f2c:	080144da 	.word	0x080144da
 8010f30:	080144de 	.word	0x080144de
 8010f34:	0800d67d 	.word	0x0800d67d
 8010f38:	08010c99 	.word	0x08010c99

08010f3c <_sbrk_r>:
 8010f3c:	b538      	push	{r3, r4, r5, lr}
 8010f3e:	4c06      	ldr	r4, [pc, #24]	; (8010f58 <_sbrk_r+0x1c>)
 8010f40:	2300      	movs	r3, #0
 8010f42:	4605      	mov	r5, r0
 8010f44:	4608      	mov	r0, r1
 8010f46:	6023      	str	r3, [r4, #0]
 8010f48:	f7f1 f954 	bl	80021f4 <_sbrk>
 8010f4c:	1c43      	adds	r3, r0, #1
 8010f4e:	d102      	bne.n	8010f56 <_sbrk_r+0x1a>
 8010f50:	6823      	ldr	r3, [r4, #0]
 8010f52:	b103      	cbz	r3, 8010f56 <_sbrk_r+0x1a>
 8010f54:	602b      	str	r3, [r5, #0]
 8010f56:	bd38      	pop	{r3, r4, r5, pc}
 8010f58:	20001274 	.word	0x20001274

08010f5c <strncmp>:
 8010f5c:	b510      	push	{r4, lr}
 8010f5e:	b16a      	cbz	r2, 8010f7c <strncmp+0x20>
 8010f60:	3901      	subs	r1, #1
 8010f62:	1884      	adds	r4, r0, r2
 8010f64:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010f68:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010f6c:	4293      	cmp	r3, r2
 8010f6e:	d103      	bne.n	8010f78 <strncmp+0x1c>
 8010f70:	42a0      	cmp	r0, r4
 8010f72:	d001      	beq.n	8010f78 <strncmp+0x1c>
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d1f5      	bne.n	8010f64 <strncmp+0x8>
 8010f78:	1a98      	subs	r0, r3, r2
 8010f7a:	bd10      	pop	{r4, pc}
 8010f7c:	4610      	mov	r0, r2
 8010f7e:	e7fc      	b.n	8010f7a <strncmp+0x1e>

08010f80 <__ascii_wctomb>:
 8010f80:	b149      	cbz	r1, 8010f96 <__ascii_wctomb+0x16>
 8010f82:	2aff      	cmp	r2, #255	; 0xff
 8010f84:	bf85      	ittet	hi
 8010f86:	238a      	movhi	r3, #138	; 0x8a
 8010f88:	6003      	strhi	r3, [r0, #0]
 8010f8a:	700a      	strbls	r2, [r1, #0]
 8010f8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010f90:	bf98      	it	ls
 8010f92:	2001      	movls	r0, #1
 8010f94:	4770      	bx	lr
 8010f96:	4608      	mov	r0, r1
 8010f98:	4770      	bx	lr

08010f9a <memmove>:
 8010f9a:	4288      	cmp	r0, r1
 8010f9c:	b510      	push	{r4, lr}
 8010f9e:	eb01 0302 	add.w	r3, r1, r2
 8010fa2:	d807      	bhi.n	8010fb4 <memmove+0x1a>
 8010fa4:	1e42      	subs	r2, r0, #1
 8010fa6:	4299      	cmp	r1, r3
 8010fa8:	d00a      	beq.n	8010fc0 <memmove+0x26>
 8010faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fae:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010fb2:	e7f8      	b.n	8010fa6 <memmove+0xc>
 8010fb4:	4283      	cmp	r3, r0
 8010fb6:	d9f5      	bls.n	8010fa4 <memmove+0xa>
 8010fb8:	1881      	adds	r1, r0, r2
 8010fba:	1ad2      	subs	r2, r2, r3
 8010fbc:	42d3      	cmn	r3, r2
 8010fbe:	d100      	bne.n	8010fc2 <memmove+0x28>
 8010fc0:	bd10      	pop	{r4, pc}
 8010fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010fc6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010fca:	e7f7      	b.n	8010fbc <memmove+0x22>

08010fcc <__malloc_lock>:
 8010fcc:	4770      	bx	lr

08010fce <__malloc_unlock>:
 8010fce:	4770      	bx	lr

08010fd0 <_realloc_r>:
 8010fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fd2:	4607      	mov	r7, r0
 8010fd4:	4614      	mov	r4, r2
 8010fd6:	460e      	mov	r6, r1
 8010fd8:	b921      	cbnz	r1, 8010fe4 <_realloc_r+0x14>
 8010fda:	4611      	mov	r1, r2
 8010fdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010fe0:	f7ff be00 	b.w	8010be4 <_malloc_r>
 8010fe4:	b922      	cbnz	r2, 8010ff0 <_realloc_r+0x20>
 8010fe6:	f7ff fdaf 	bl	8010b48 <_free_r>
 8010fea:	4625      	mov	r5, r4
 8010fec:	4628      	mov	r0, r5
 8010fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ff0:	f000 f814 	bl	801101c <_malloc_usable_size_r>
 8010ff4:	42a0      	cmp	r0, r4
 8010ff6:	d20f      	bcs.n	8011018 <_realloc_r+0x48>
 8010ff8:	4621      	mov	r1, r4
 8010ffa:	4638      	mov	r0, r7
 8010ffc:	f7ff fdf2 	bl	8010be4 <_malloc_r>
 8011000:	4605      	mov	r5, r0
 8011002:	2800      	cmp	r0, #0
 8011004:	d0f2      	beq.n	8010fec <_realloc_r+0x1c>
 8011006:	4631      	mov	r1, r6
 8011008:	4622      	mov	r2, r4
 801100a:	f7ff f985 	bl	8010318 <memcpy>
 801100e:	4631      	mov	r1, r6
 8011010:	4638      	mov	r0, r7
 8011012:	f7ff fd99 	bl	8010b48 <_free_r>
 8011016:	e7e9      	b.n	8010fec <_realloc_r+0x1c>
 8011018:	4635      	mov	r5, r6
 801101a:	e7e7      	b.n	8010fec <_realloc_r+0x1c>

0801101c <_malloc_usable_size_r>:
 801101c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011020:	1f18      	subs	r0, r3, #4
 8011022:	2b00      	cmp	r3, #0
 8011024:	bfbc      	itt	lt
 8011026:	580b      	ldrlt	r3, [r1, r0]
 8011028:	18c0      	addlt	r0, r0, r3
 801102a:	4770      	bx	lr

0801102c <_init>:
 801102c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801102e:	bf00      	nop
 8011030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011032:	bc08      	pop	{r3}
 8011034:	469e      	mov	lr, r3
 8011036:	4770      	bx	lr

08011038 <_fini>:
 8011038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801103a:	bf00      	nop
 801103c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801103e:	bc08      	pop	{r3}
 8011040:	469e      	mov	lr, r3
 8011042:	4770      	bx	lr
